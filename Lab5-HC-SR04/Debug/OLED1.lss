
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000086dc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004086dc  004086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  004086e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000308  204009d0  004090b4  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400cd8  004093bc  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040b3bc  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00017676  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003241  00000000  00000000  000380cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005b20  00000000  00000000  0003b30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ad0  00000000  00000000  00040e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a48  00000000  00000000  000418fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a496  00000000  00000000  00042346  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f566  00000000  00000000  0004c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090444  00000000  00000000  0005bd42  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003708  00000000  00000000  000ec188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 79 29 40 00 29 2a 40 00 29 2a 40 00     .,@ y)@.)*@.)*@.
  400010:	29 2a 40 00 29 2a 40 00 29 2a 40 00 00 00 00 00     )*@.)*@.)*@.....
	...
  40002c:	29 2a 40 00 29 2a 40 00 00 00 00 00 29 2a 40 00     )*@.)*@.....)*@.
  40003c:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  40004c:	69 2e 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     i.@.)*@.)*@.)*@.
  40005c:	29 2a 40 00 29 2a 40 00 00 00 00 00 31 25 40 00     )*@.)*@.....1%@.
  40006c:	49 25 40 00 61 25 40 00 29 2a 40 00 29 2a 40 00     I%@.a%@.)*@.)*@.
  40007c:	29 2a 40 00 79 25 40 00 91 25 40 00 29 2a 40 00     )*@.y%@..%@.)*@.
  40008c:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  40009c:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000ac:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000bc:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000cc:	29 2a 40 00 00 00 00 00 29 2a 40 00 00 00 00 00     )*@.....)*@.....
  4000dc:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000ec:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000fc:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  40010c:	29 2a 40 00 29 2a 40 00 00 00 00 00 00 00 00 00     )*@.)*@.........
  40011c:	00 00 00 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     ....)*@.)*@.)*@.
  40012c:	29 2a 40 00 29 2a 40 00 00 00 00 00 29 2a 40 00     )*@.)*@.....)*@.
  40013c:	29 2a 40 00                                         )*@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	004086e4 	.word	0x004086e4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004086e4 	.word	0x004086e4
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	004086e4 	.word	0x004086e4
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
  4001b4:	460b      	mov	r3, r1
  4001b6:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001b8:	887a      	ldrh	r2, [r7, #2]
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <rtt_init+0x2c>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	4313      	orrs	r3, r2
  4001c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  4001c8:	2300      	movs	r3, #0
}
  4001ca:	4618      	mov	r0, r3
  4001cc:	370c      	adds	r7, #12
  4001ce:	46bd      	mov	sp, r7
  4001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	204009ec 	.word	0x204009ec

004001dc <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  4001dc:	b480      	push	{r7}
  4001de:	b083      	sub	sp, #12
  4001e0:	af00      	add	r7, sp, #0
  4001e2:	6078      	str	r0, [r7, #4]
  4001e4:	460b      	mov	r3, r1
  4001e6:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  4001e8:	78fb      	ldrb	r3, [r7, #3]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	d00d      	beq.n	40020a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <rtt_sel_source+0x54>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001f6:	4a0e      	ldr	r2, [pc, #56]	; (400230 <rtt_sel_source+0x54>)
  4001f8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	4b0c      	ldr	r3, [pc, #48]	; (400230 <rtt_sel_source+0x54>)
  400200:	681b      	ldr	r3, [r3, #0]
  400202:	431a      	orrs	r2, r3
  400204:	687b      	ldr	r3, [r7, #4]
  400206:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400208:	e00c      	b.n	400224 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40020a:	4b09      	ldr	r3, [pc, #36]	; (400230 <rtt_sel_source+0x54>)
  40020c:	681b      	ldr	r3, [r3, #0]
  40020e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400212:	4a07      	ldr	r2, [pc, #28]	; (400230 <rtt_sel_source+0x54>)
  400214:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400216:	687b      	ldr	r3, [r7, #4]
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <rtt_sel_source+0x54>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	431a      	orrs	r2, r3
  400220:	687b      	ldr	r3, [r7, #4]
  400222:	601a      	str	r2, [r3, #0]
}
  400224:	bf00      	nop
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr
  400230:	204009ec 	.word	0x204009ec

00400234 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400234:	b480      	push	{r7}
  400236:	b085      	sub	sp, #20
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
  40023c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400244:	68fa      	ldr	r2, [r7, #12]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	4313      	orrs	r3, r2
  40024a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <rtt_enable_interrupt+0x34>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4313      	orrs	r3, r2
  400254:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	68fa      	ldr	r2, [r7, #12]
  40025a:	601a      	str	r2, [r3, #0]
}
  40025c:	bf00      	nop
  40025e:	3714      	adds	r7, #20
  400260:	46bd      	mov	sp, r7
  400262:	f85d 7b04 	ldr.w	r7, [sp], #4
  400266:	4770      	bx	lr
  400268:	204009ec 	.word	0x204009ec

0040026c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  40026c:	b480      	push	{r7}
  40026e:	b085      	sub	sp, #20
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400276:	2300      	movs	r3, #0
  400278:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	681b      	ldr	r3, [r3, #0]
  40027e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400280:	683b      	ldr	r3, [r7, #0]
  400282:	43db      	mvns	r3, r3
  400284:	68fa      	ldr	r2, [r7, #12]
  400286:	4013      	ands	r3, r2
  400288:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40028a:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <rtt_disable_interrupt+0x3c>)
  40028c:	681b      	ldr	r3, [r3, #0]
  40028e:	68fa      	ldr	r2, [r7, #12]
  400290:	4313      	orrs	r3, r2
  400292:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	68fa      	ldr	r2, [r7, #12]
  400298:	601a      	str	r2, [r3, #0]
}
  40029a:	bf00      	nop
  40029c:	3714      	adds	r7, #20
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	204009ec 	.word	0x204009ec

004002ac <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b085      	sub	sp, #20
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	689b      	ldr	r3, [r3, #8]
  4002b8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  4002ba:	e002      	b.n	4002c2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  4002bc:	687b      	ldr	r3, [r7, #4]
  4002be:	689b      	ldr	r3, [r3, #8]
  4002c0:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  4002c2:	687b      	ldr	r3, [r7, #4]
  4002c4:	689a      	ldr	r2, [r3, #8]
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	429a      	cmp	r2, r3
  4002ca:	d1f7      	bne.n	4002bc <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  4002cc:	68fb      	ldr	r3, [r7, #12]
}
  4002ce:	4618      	mov	r0, r3
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4002da:	b480      	push	{r7}
  4002dc:	b083      	sub	sp, #12
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4002e2:	687b      	ldr	r3, [r7, #4]
  4002e4:	68db      	ldr	r3, [r3, #12]
}
  4002e6:	4618      	mov	r0, r3
  4002e8:	370c      	adds	r7, #12
  4002ea:	46bd      	mov	sp, r7
  4002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f0:	4770      	bx	lr
	...

004002f4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4002fe:	687b      	ldr	r3, [r7, #4]
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400306:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40030c:	480d      	ldr	r0, [pc, #52]	; (400344 <rtt_write_alarm_time+0x50>)
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <rtt_write_alarm_time+0x54>)
  400310:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400312:	683b      	ldr	r3, [r7, #0]
  400314:	2b00      	cmp	r3, #0
  400316:	d104      	bne.n	400322 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	f04f 32ff 	mov.w	r2, #4294967295
  40031e:	605a      	str	r2, [r3, #4]
  400320:	e003      	b.n	40032a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	1e5a      	subs	r2, r3, #1
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	2b00      	cmp	r3, #0
  40032e:	d004      	beq.n	40033a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400334:	4803      	ldr	r0, [pc, #12]	; (400344 <rtt_write_alarm_time+0x50>)
  400336:	4b05      	ldr	r3, [pc, #20]	; (40034c <rtt_write_alarm_time+0x58>)
  400338:	4798      	blx	r3
	}

	return 0;
  40033a:	2300      	movs	r3, #0
}
  40033c:	4618      	mov	r0, r3
  40033e:	3710      	adds	r7, #16
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	400e1830 	.word	0x400e1830
  400348:	0040026d 	.word	0x0040026d
  40034c:	00400235 	.word	0x00400235

00400350 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	685b      	ldr	r3, [r3, #4]
  40035c:	f003 0302 	and.w	r3, r3, #2
  400360:	2b00      	cmp	r3, #0
  400362:	d001      	beq.n	400368 <spi_get_peripheral_select_mode+0x18>
		return 1;
  400364:	2301      	movs	r3, #1
  400366:	e000      	b.n	40036a <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  400368:	2300      	movs	r3, #0
	}
}
  40036a:	4618      	mov	r0, r3
  40036c:	370c      	adds	r7, #12
  40036e:	46bd      	mov	sp, r7
  400370:	f85d 7b04 	ldr.w	r7, [sp], #4
  400374:	4770      	bx	lr
	...

00400378 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400378:	b580      	push	{r7, lr}
  40037a:	b082      	sub	sp, #8
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400380:	6878      	ldr	r0, [r7, #4]
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <sysclk_enable_peripheral_clock+0x18>)
  400384:	4798      	blx	r3
}
  400386:	bf00      	nop
  400388:	3708      	adds	r7, #8
  40038a:	46bd      	mov	sp, r7
  40038c:	bd80      	pop	{r7, pc}
  40038e:	bf00      	nop
  400390:	0040286d 	.word	0x0040286d

00400394 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	4a09      	ldr	r2, [pc, #36]	; (4003c4 <spi_enable_clock+0x30>)
  4003a0:	4293      	cmp	r3, r2
  4003a2:	d103      	bne.n	4003ac <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4003a4:	2015      	movs	r0, #21
  4003a6:	4b08      	ldr	r3, [pc, #32]	; (4003c8 <spi_enable_clock+0x34>)
  4003a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003aa:	e006      	b.n	4003ba <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <spi_enable_clock+0x38>)
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d102      	bne.n	4003ba <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4003b4:	202a      	movs	r0, #42	; 0x2a
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <spi_enable_clock+0x34>)
  4003b8:	4798      	blx	r3
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	40008000 	.word	0x40008000
  4003c8:	00400379 	.word	0x00400379
  4003cc:	40058000 	.word	0x40058000

004003d0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003da:	687b      	ldr	r3, [r7, #4]
  4003dc:	685b      	ldr	r3, [r3, #4]
  4003de:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	685a      	ldr	r2, [r3, #4]
  4003ea:	683b      	ldr	r3, [r7, #0]
  4003ec:	041b      	lsls	r3, r3, #16
  4003ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4003f2:	431a      	orrs	r2, r3
  4003f4:	687b      	ldr	r3, [r7, #4]
  4003f6:	605a      	str	r2, [r3, #4]
}
  4003f8:	bf00      	nop
  4003fa:	370c      	adds	r7, #12
  4003fc:	46bd      	mov	sp, r7
  4003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400402:	4770      	bx	lr

00400404 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400404:	b580      	push	{r7, lr}
  400406:	b084      	sub	sp, #16
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
  40040c:	4608      	mov	r0, r1
  40040e:	4611      	mov	r1, r2
  400410:	461a      	mov	r2, r3
  400412:	4603      	mov	r3, r0
  400414:	807b      	strh	r3, [r7, #2]
  400416:	460b      	mov	r3, r1
  400418:	707b      	strb	r3, [r7, #1]
  40041a:	4613      	mov	r3, r2
  40041c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40041e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400422:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400424:	e006      	b.n	400434 <spi_write+0x30>
		if (!timeout--) {
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	1e5a      	subs	r2, r3, #1
  40042a:	60fa      	str	r2, [r7, #12]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d101      	bne.n	400434 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400430:	2301      	movs	r3, #1
  400432:	e020      	b.n	400476 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	691b      	ldr	r3, [r3, #16]
  400438:	f003 0302 	and.w	r3, r3, #2
  40043c:	2b00      	cmp	r3, #0
  40043e:	d0f2      	beq.n	400426 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400440:	6878      	ldr	r0, [r7, #4]
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_write+0x7c>)
  400444:	4798      	blx	r3
  400446:	4603      	mov	r3, r0
  400448:	2b00      	cmp	r3, #0
  40044a:	d00e      	beq.n	40046a <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40044c:	887a      	ldrh	r2, [r7, #2]
  40044e:	787b      	ldrb	r3, [r7, #1]
  400450:	041b      	lsls	r3, r3, #16
  400452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400456:	4313      	orrs	r3, r2
  400458:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40045a:	783b      	ldrb	r3, [r7, #0]
  40045c:	2b00      	cmp	r3, #0
  40045e:	d006      	beq.n	40046e <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400466:	60bb      	str	r3, [r7, #8]
  400468:	e001      	b.n	40046e <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40046a:	887b      	ldrh	r3, [r7, #2]
  40046c:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  40046e:	687b      	ldr	r3, [r7, #4]
  400470:	68ba      	ldr	r2, [r7, #8]
  400472:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400474:	2300      	movs	r3, #0
}
  400476:	4618      	mov	r0, r3
  400478:	3710      	adds	r7, #16
  40047a:	46bd      	mov	sp, r7
  40047c:	bd80      	pop	{r7, pc}
  40047e:	bf00      	nop
  400480:	00400351 	.word	0x00400351

00400484 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400484:	b480      	push	{r7}
  400486:	b085      	sub	sp, #20
  400488:	af00      	add	r7, sp, #0
  40048a:	60f8      	str	r0, [r7, #12]
  40048c:	60b9      	str	r1, [r7, #8]
  40048e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2b00      	cmp	r3, #0
  400494:	d00c      	beq.n	4004b0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400496:	68fb      	ldr	r3, [r7, #12]
  400498:	68ba      	ldr	r2, [r7, #8]
  40049a:	320c      	adds	r2, #12
  40049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004a0:	f043 0101 	orr.w	r1, r3, #1
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	68ba      	ldr	r2, [r7, #8]
  4004a8:	320c      	adds	r2, #12
  4004aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4004ae:	e00b      	b.n	4004c8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	68ba      	ldr	r2, [r7, #8]
  4004b4:	320c      	adds	r2, #12
  4004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004ba:	f023 0101 	bic.w	r1, r3, #1
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	68ba      	ldr	r2, [r7, #8]
  4004c2:	320c      	adds	r2, #12
  4004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4004c8:	bf00      	nop
  4004ca:	3714      	adds	r7, #20
  4004cc:	46bd      	mov	sp, r7
  4004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d2:	4770      	bx	lr

004004d4 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4004d4:	b480      	push	{r7}
  4004d6:	b085      	sub	sp, #20
  4004d8:	af00      	add	r7, sp, #0
  4004da:	60f8      	str	r0, [r7, #12]
  4004dc:	60b9      	str	r1, [r7, #8]
  4004de:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b00      	cmp	r3, #0
  4004e4:	d00c      	beq.n	400500 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004e6:	68fb      	ldr	r3, [r7, #12]
  4004e8:	68ba      	ldr	r2, [r7, #8]
  4004ea:	320c      	adds	r2, #12
  4004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004f0:	f043 0102 	orr.w	r1, r3, #2
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	68ba      	ldr	r2, [r7, #8]
  4004f8:	320c      	adds	r2, #12
  4004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4004fe:	e00b      	b.n	400518 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	68ba      	ldr	r2, [r7, #8]
  400504:	320c      	adds	r2, #12
  400506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40050a:	f023 0102 	bic.w	r1, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	320c      	adds	r2, #12
  400514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400518:	bf00      	nop
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400522:	4770      	bx	lr

00400524 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400524:	b480      	push	{r7}
  400526:	b085      	sub	sp, #20
  400528:	af00      	add	r7, sp, #0
  40052a:	60f8      	str	r0, [r7, #12]
  40052c:	60b9      	str	r1, [r7, #8]
  40052e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	2b04      	cmp	r3, #4
  400534:	d118      	bne.n	400568 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	68ba      	ldr	r2, [r7, #8]
  40053a:	320c      	adds	r2, #12
  40053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400540:	f023 0108 	bic.w	r1, r3, #8
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	320c      	adds	r2, #12
  40054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40054e:	68fb      	ldr	r3, [r7, #12]
  400550:	68ba      	ldr	r2, [r7, #8]
  400552:	320c      	adds	r2, #12
  400554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400558:	f043 0104 	orr.w	r1, r3, #4
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	68ba      	ldr	r2, [r7, #8]
  400560:	320c      	adds	r2, #12
  400562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  400566:	e02a      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d118      	bne.n	4005a0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40056e:	68fb      	ldr	r3, [r7, #12]
  400570:	68ba      	ldr	r2, [r7, #8]
  400572:	320c      	adds	r2, #12
  400574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400578:	f023 0108 	bic.w	r1, r3, #8
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	68ba      	ldr	r2, [r7, #8]
  400580:	320c      	adds	r2, #12
  400582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	320c      	adds	r2, #12
  40058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400590:	f023 0104 	bic.w	r1, r3, #4
  400594:	68fb      	ldr	r3, [r7, #12]
  400596:	68ba      	ldr	r2, [r7, #8]
  400598:	320c      	adds	r2, #12
  40059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40059e:	e00e      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2b08      	cmp	r3, #8
  4005a4:	d10b      	bne.n	4005be <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	68ba      	ldr	r2, [r7, #8]
  4005aa:	320c      	adds	r2, #12
  4005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005b0:	f043 0108 	orr.w	r1, r3, #8
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	68ba      	ldr	r2, [r7, #8]
  4005b8:	320c      	adds	r2, #12
  4005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005be:	bf00      	nop
  4005c0:	3714      	adds	r7, #20
  4005c2:	46bd      	mov	sp, r7
  4005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c8:	4770      	bx	lr

004005ca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005ca:	b480      	push	{r7}
  4005cc:	b085      	sub	sp, #20
  4005ce:	af00      	add	r7, sp, #0
  4005d0:	60f8      	str	r0, [r7, #12]
  4005d2:	60b9      	str	r1, [r7, #8]
  4005d4:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	320c      	adds	r2, #12
  4005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	320c      	adds	r2, #12
  4005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	320c      	adds	r2, #12
  4005f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	ea42 0103 	orr.w	r1, r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	68ba      	ldr	r2, [r7, #8]
  400602:	320c      	adds	r2, #12
  400604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400614:	b480      	push	{r7}
  400616:	b085      	sub	sp, #20
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4413      	add	r3, r2
  400624:	1e5a      	subs	r2, r3, #1
  400626:	687b      	ldr	r3, [r7, #4]
  400628:	fbb2 f3f3 	udiv	r3, r2, r3
  40062c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	2b00      	cmp	r3, #0
  400632:	dd02      	ble.n	40063a <spi_calc_baudrate_div+0x26>
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	2bff      	cmp	r3, #255	; 0xff
  400638:	dd02      	ble.n	400640 <spi_calc_baudrate_div+0x2c>
		return -1;
  40063a:	f04f 33ff 	mov.w	r3, #4294967295
  40063e:	e001      	b.n	400644 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	b21b      	sxth	r3, r3
}
  400644:	4618      	mov	r0, r3
  400646:	3714      	adds	r7, #20
  400648:	46bd      	mov	sp, r7
  40064a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064e:	4770      	bx	lr

00400650 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400650:	b480      	push	{r7}
  400652:	b085      	sub	sp, #20
  400654:	af00      	add	r7, sp, #0
  400656:	60f8      	str	r0, [r7, #12]
  400658:	60b9      	str	r1, [r7, #8]
  40065a:	4613      	mov	r3, r2
  40065c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	79fb      	ldrb	r3, [r7, #7]
  400660:	2b00      	cmp	r3, #0
  400662:	d102      	bne.n	40066a <spi_set_baudrate_div+0x1a>
        return -1;
  400664:	f04f 33ff 	mov.w	r3, #4294967295
  400668:	e01b      	b.n	4006a2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	68ba      	ldr	r2, [r7, #8]
  40066e:	320c      	adds	r2, #12
  400670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400674:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	68ba      	ldr	r2, [r7, #8]
  40067c:	320c      	adds	r2, #12
  40067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	320c      	adds	r2, #12
  400688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	021b      	lsls	r3, r3, #8
  400690:	b29b      	uxth	r3, r3
  400692:	ea42 0103 	orr.w	r1, r2, r3
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	320c      	adds	r2, #12
  40069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3714      	adds	r7, #20
  4006a6:	46bd      	mov	sp, r7
  4006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ac:	4770      	bx	lr
	...

004006b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	4603      	mov	r3, r0
  4006b8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4006ba:	4909      	ldr	r1, [pc, #36]	; (4006e0 <NVIC_EnableIRQ+0x30>)
  4006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4006c0:	095b      	lsrs	r3, r3, #5
  4006c2:	79fa      	ldrb	r2, [r7, #7]
  4006c4:	f002 021f 	and.w	r2, r2, #31
  4006c8:	2001      	movs	r0, #1
  4006ca:	fa00 f202 	lsl.w	r2, r0, r2
  4006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4006d2:	bf00      	nop
  4006d4:	370c      	adds	r7, #12
  4006d6:	46bd      	mov	sp, r7
  4006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop
  4006e0:	e000e100 	.word	0xe000e100

004006e4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b083      	sub	sp, #12
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	4603      	mov	r3, r0
  4006ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4006ee:	4909      	ldr	r1, [pc, #36]	; (400714 <NVIC_DisableIRQ+0x30>)
  4006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4006f4:	095b      	lsrs	r3, r3, #5
  4006f6:	79fa      	ldrb	r2, [r7, #7]
  4006f8:	f002 021f 	and.w	r2, r2, #31
  4006fc:	2001      	movs	r0, #1
  4006fe:	fa00 f202 	lsl.w	r2, r0, r2
  400702:	3320      	adds	r3, #32
  400704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400708:	bf00      	nop
  40070a:	370c      	adds	r7, #12
  40070c:	46bd      	mov	sp, r7
  40070e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400712:	4770      	bx	lr
  400714:	e000e100 	.word	0xe000e100

00400718 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400718:	b480      	push	{r7}
  40071a:	b083      	sub	sp, #12
  40071c:	af00      	add	r7, sp, #0
  40071e:	4603      	mov	r3, r0
  400720:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400722:	4909      	ldr	r1, [pc, #36]	; (400748 <NVIC_ClearPendingIRQ+0x30>)
  400724:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400728:	095b      	lsrs	r3, r3, #5
  40072a:	79fa      	ldrb	r2, [r7, #7]
  40072c:	f002 021f 	and.w	r2, r2, #31
  400730:	2001      	movs	r0, #1
  400732:	fa00 f202 	lsl.w	r2, r0, r2
  400736:	3360      	adds	r3, #96	; 0x60
  400738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40073c:	bf00      	nop
  40073e:	370c      	adds	r7, #12
  400740:	46bd      	mov	sp, r7
  400742:	f85d 7b04 	ldr.w	r7, [sp], #4
  400746:	4770      	bx	lr
  400748:	e000e100 	.word	0xe000e100

0040074c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40074c:	b480      	push	{r7}
  40074e:	b083      	sub	sp, #12
  400750:	af00      	add	r7, sp, #0
  400752:	4603      	mov	r3, r0
  400754:	6039      	str	r1, [r7, #0]
  400756:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400758:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40075c:	2b00      	cmp	r3, #0
  40075e:	da0b      	bge.n	400778 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400760:	490d      	ldr	r1, [pc, #52]	; (400798 <NVIC_SetPriority+0x4c>)
  400762:	79fb      	ldrb	r3, [r7, #7]
  400764:	f003 030f 	and.w	r3, r3, #15
  400768:	3b04      	subs	r3, #4
  40076a:	683a      	ldr	r2, [r7, #0]
  40076c:	b2d2      	uxtb	r2, r2
  40076e:	0152      	lsls	r2, r2, #5
  400770:	b2d2      	uxtb	r2, r2
  400772:	440b      	add	r3, r1
  400774:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  400776:	e009      	b.n	40078c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400778:	4908      	ldr	r1, [pc, #32]	; (40079c <NVIC_SetPriority+0x50>)
  40077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40077e:	683a      	ldr	r2, [r7, #0]
  400780:	b2d2      	uxtb	r2, r2
  400782:	0152      	lsls	r2, r2, #5
  400784:	b2d2      	uxtb	r2, r2
  400786:	440b      	add	r3, r1
  400788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40078c:	bf00      	nop
  40078e:	370c      	adds	r7, #12
  400790:	46bd      	mov	sp, r7
  400792:	f85d 7b04 	ldr.w	r7, [sp], #4
  400796:	4770      	bx	lr
  400798:	e000ed00 	.word	0xe000ed00
  40079c:	e000e100 	.word	0xe000e100

004007a0 <RTT_init>:

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
}

void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4007a0:	b580      	push	{r7, lr}
  4007a2:	b086      	sub	sp, #24
  4007a4:	af00      	add	r7, sp, #0
  4007a6:	60f8      	str	r0, [r7, #12]
  4007a8:	60b9      	str	r1, [r7, #8]
  4007aa:	607a      	str	r2, [r7, #4]

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  4007ac:	eddf 6a26 	vldr	s13, [pc, #152]	; 400848 <RTT_init+0xa8>
  4007b0:	ed97 7a03 	vldr	s14, [r7, #12]
  4007b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
  4007b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4007bc:	edc7 7a00 	vstr	s15, [r7]
  4007c0:	883b      	ldrh	r3, [r7, #0]
  4007c2:	82fb      	strh	r3, [r7, #22]
	
	rtt_sel_source(RTT, false);
  4007c4:	2100      	movs	r1, #0
  4007c6:	4821      	ldr	r0, [pc, #132]	; (40084c <RTT_init+0xac>)
  4007c8:	4b21      	ldr	r3, [pc, #132]	; (400850 <RTT_init+0xb0>)
  4007ca:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  4007cc:	8afb      	ldrh	r3, [r7, #22]
  4007ce:	4619      	mov	r1, r3
  4007d0:	481e      	ldr	r0, [pc, #120]	; (40084c <RTT_init+0xac>)
  4007d2:	4b20      	ldr	r3, [pc, #128]	; (400854 <RTT_init+0xb4>)
  4007d4:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  4007d6:	687b      	ldr	r3, [r7, #4]
  4007d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4007dc:	2b00      	cmp	r3, #0
  4007de:	d012      	beq.n	400806 <RTT_init+0x66>
		uint32_t ul_previous_time;
		ul_previous_time = rtt_read_timer_value(RTT);
  4007e0:	481a      	ldr	r0, [pc, #104]	; (40084c <RTT_init+0xac>)
  4007e2:	4b1d      	ldr	r3, [pc, #116]	; (400858 <RTT_init+0xb8>)
  4007e4:	4798      	blx	r3
  4007e6:	6138      	str	r0, [r7, #16]
		while (ul_previous_time == rtt_read_timer_value(RTT));
  4007e8:	bf00      	nop
  4007ea:	4818      	ldr	r0, [pc, #96]	; (40084c <RTT_init+0xac>)
  4007ec:	4b1a      	ldr	r3, [pc, #104]	; (400858 <RTT_init+0xb8>)
  4007ee:	4798      	blx	r3
  4007f0:	4602      	mov	r2, r0
  4007f2:	693b      	ldr	r3, [r7, #16]
  4007f4:	429a      	cmp	r2, r3
  4007f6:	d0f8      	beq.n	4007ea <RTT_init+0x4a>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  4007f8:	68ba      	ldr	r2, [r7, #8]
  4007fa:	693b      	ldr	r3, [r7, #16]
  4007fc:	4413      	add	r3, r2
  4007fe:	4619      	mov	r1, r3
  400800:	4812      	ldr	r0, [pc, #72]	; (40084c <RTT_init+0xac>)
  400802:	4b16      	ldr	r3, [pc, #88]	; (40085c <RTT_init+0xbc>)
  400804:	4798      	blx	r3
	}

	/* config NVIC */
	NVIC_DisableIRQ(RTT_IRQn);
  400806:	2003      	movs	r0, #3
  400808:	4b15      	ldr	r3, [pc, #84]	; (400860 <RTT_init+0xc0>)
  40080a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  40080c:	2003      	movs	r0, #3
  40080e:	4b15      	ldr	r3, [pc, #84]	; (400864 <RTT_init+0xc4>)
  400810:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 4);
  400812:	2104      	movs	r1, #4
  400814:	2003      	movs	r0, #3
  400816:	4b14      	ldr	r3, [pc, #80]	; (400868 <RTT_init+0xc8>)
  400818:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  40081a:	2003      	movs	r0, #3
  40081c:	4b13      	ldr	r3, [pc, #76]	; (40086c <RTT_init+0xcc>)
  40081e:	4798      	blx	r3

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  400820:	687b      	ldr	r3, [r7, #4]
  400822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  400826:	2b00      	cmp	r3, #0
  400828:	d004      	beq.n	400834 <RTT_init+0x94>
	rtt_enable_interrupt(RTT, rttIRQSource);
  40082a:	6879      	ldr	r1, [r7, #4]
  40082c:	4807      	ldr	r0, [pc, #28]	; (40084c <RTT_init+0xac>)
  40082e:	4b10      	ldr	r3, [pc, #64]	; (400870 <RTT_init+0xd0>)
  400830:	4798      	blx	r3
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
	
}
  400832:	e004      	b.n	40083e <RTT_init+0x9e>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  400834:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400838:	4804      	ldr	r0, [pc, #16]	; (40084c <RTT_init+0xac>)
  40083a:	4b0e      	ldr	r3, [pc, #56]	; (400874 <RTT_init+0xd4>)
  40083c:	4798      	blx	r3
}
  40083e:	bf00      	nop
  400840:	3718      	adds	r7, #24
  400842:	46bd      	mov	sp, r7
  400844:	bd80      	pop	{r7, pc}
  400846:	bf00      	nop
  400848:	47000000 	.word	0x47000000
  40084c:	400e1830 	.word	0x400e1830
  400850:	004001dd 	.word	0x004001dd
  400854:	004001ad 	.word	0x004001ad
  400858:	004002ad 	.word	0x004002ad
  40085c:	004002f5 	.word	0x004002f5
  400860:	004006e5 	.word	0x004006e5
  400864:	00400719 	.word	0x00400719
  400868:	0040074d 	.word	0x0040074d
  40086c:	004006b1 	.word	0x004006b1
  400870:	00400235 	.word	0x00400235
  400874:	0040026d 	.word	0x0040026d

00400878 <config_button>:

/************************************************************************/
/* configs                                                              */
/************************************************************************/

void config_button(Pio *p_pio, const uint32_t ul_mask, uint32_t ul_id, void (*p_handler) (uint32_t, uint32_t), int it_rise, int filter) {
  400878:	b590      	push	{r4, r7, lr}
  40087a:	b089      	sub	sp, #36	; 0x24
  40087c:	af02      	add	r7, sp, #8
  40087e:	60f8      	str	r0, [r7, #12]
  400880:	60b9      	str	r1, [r7, #8]
  400882:	607a      	str	r2, [r7, #4]
  400884:	603b      	str	r3, [r7, #0]
	pmc_enable_periph_clk(ul_id);
  400886:	6878      	ldr	r0, [r7, #4]
  400888:	4b1e      	ldr	r3, [pc, #120]	; (400904 <config_button+0x8c>)
  40088a:	4798      	blx	r3
	filter ? pio_configure(p_pio, PIO_INPUT, ul_mask, PIO_PULLUP | PIO_DEBOUNCE) : pio_configure(p_pio, PIO_INPUT, ul_mask, PIO_DEFAULT);
  40088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40088e:	2b00      	cmp	r3, #0
  400890:	d007      	beq.n	4008a2 <config_button+0x2a>
  400892:	2309      	movs	r3, #9
  400894:	68ba      	ldr	r2, [r7, #8]
  400896:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40089a:	68f8      	ldr	r0, [r7, #12]
  40089c:	4c1a      	ldr	r4, [pc, #104]	; (400908 <config_button+0x90>)
  40089e:	47a0      	blx	r4
  4008a0:	e006      	b.n	4008b0 <config_button+0x38>
  4008a2:	2300      	movs	r3, #0
  4008a4:	68ba      	ldr	r2, [r7, #8]
  4008a6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008aa:	68f8      	ldr	r0, [r7, #12]
  4008ac:	4c16      	ldr	r4, [pc, #88]	; (400908 <config_button+0x90>)
  4008ae:	47a0      	blx	r4

	pio_set_debounce_filter(p_pio, ul_mask, 60);
  4008b0:	223c      	movs	r2, #60	; 0x3c
  4008b2:	68b9      	ldr	r1, [r7, #8]
  4008b4:	68f8      	ldr	r0, [r7, #12]
  4008b6:	4b15      	ldr	r3, [pc, #84]	; (40090c <config_button+0x94>)
  4008b8:	4798      	blx	r3

	uint32_t but_attr = (it_rise ? PIO_IT_RISE_EDGE : PIO_IT_EDGE);
  4008ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4008bc:	2b00      	cmp	r3, #0
  4008be:	d001      	beq.n	4008c4 <config_button+0x4c>
  4008c0:	2370      	movs	r3, #112	; 0x70
  4008c2:	e000      	b.n	4008c6 <config_button+0x4e>
  4008c4:	2340      	movs	r3, #64	; 0x40
  4008c6:	617b      	str	r3, [r7, #20]
	pio_handler_set(p_pio,
  4008c8:	683b      	ldr	r3, [r7, #0]
  4008ca:	9300      	str	r3, [sp, #0]
  4008cc:	697b      	ldr	r3, [r7, #20]
  4008ce:	68ba      	ldr	r2, [r7, #8]
  4008d0:	6879      	ldr	r1, [r7, #4]
  4008d2:	68f8      	ldr	r0, [r7, #12]
  4008d4:	4c0e      	ldr	r4, [pc, #56]	; (400910 <config_button+0x98>)
  4008d6:	47a0      	blx	r4
	ul_id,
	ul_mask,
	but_attr,
	p_handler);

	pio_enable_interrupt(p_pio, ul_mask);
  4008d8:	68b9      	ldr	r1, [r7, #8]
  4008da:	68f8      	ldr	r0, [r7, #12]
  4008dc:	4b0d      	ldr	r3, [pc, #52]	; (400914 <config_button+0x9c>)
  4008de:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4008e0:	68f8      	ldr	r0, [r7, #12]
  4008e2:	4b0d      	ldr	r3, [pc, #52]	; (400918 <config_button+0xa0>)
  4008e4:	4798      	blx	r3
	
	NVIC_EnableIRQ(ul_id);
  4008e6:	687b      	ldr	r3, [r7, #4]
  4008e8:	b25b      	sxtb	r3, r3
  4008ea:	4618      	mov	r0, r3
  4008ec:	4b0b      	ldr	r3, [pc, #44]	; (40091c <config_button+0xa4>)
  4008ee:	4798      	blx	r3
	NVIC_SetPriority(ul_id, 4);
  4008f0:	687b      	ldr	r3, [r7, #4]
  4008f2:	b25b      	sxtb	r3, r3
  4008f4:	2104      	movs	r1, #4
  4008f6:	4618      	mov	r0, r3
  4008f8:	4b09      	ldr	r3, [pc, #36]	; (400920 <config_button+0xa8>)
  4008fa:	4798      	blx	r3
  4008fc:	bf00      	nop
  4008fe:	371c      	adds	r7, #28
  400900:	46bd      	mov	sp, r7
  400902:	bd90      	pop	{r4, r7, pc}
  400904:	0040286d 	.word	0x0040286d
  400908:	0040223d 	.word	0x0040223d
  40090c:	00401f91 	.word	0x00401f91
  400910:	00402491 	.word	0x00402491
  400914:	00402375 	.word	0x00402375
  400918:	004023ad 	.word	0x004023ad
  40091c:	004006b1 	.word	0x004006b1
  400920:	0040074d 	.word	0x0040074d

00400924 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  400924:	b480      	push	{r7}
  400926:	b083      	sub	sp, #12
  400928:	af00      	add	r7, sp, #0
  40092a:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  40092c:	4a04      	ldr	r2, [pc, #16]	; (400940 <gfx_mono_set_framebuffer+0x1c>)
  40092e:	687b      	ldr	r3, [r7, #4]
  400930:	6013      	str	r3, [r2, #0]
}
  400932:	bf00      	nop
  400934:	370c      	adds	r7, #12
  400936:	46bd      	mov	sp, r7
  400938:	f85d 7b04 	ldr.w	r7, [sp], #4
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop
  400940:	204009f0 	.word	0x204009f0

00400944 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  400944:	b480      	push	{r7}
  400946:	b083      	sub	sp, #12
  400948:	af00      	add	r7, sp, #0
  40094a:	4603      	mov	r3, r0
  40094c:	71fb      	strb	r3, [r7, #7]
  40094e:	460b      	mov	r3, r1
  400950:	71bb      	strb	r3, [r7, #6]
  400952:	4613      	mov	r3, r2
  400954:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400956:	4b08      	ldr	r3, [pc, #32]	; (400978 <gfx_mono_framebuffer_put_byte+0x34>)
  400958:	681a      	ldr	r2, [r3, #0]
  40095a:	79fb      	ldrb	r3, [r7, #7]
  40095c:	01db      	lsls	r3, r3, #7
  40095e:	4619      	mov	r1, r3
  400960:	79bb      	ldrb	r3, [r7, #6]
  400962:	440b      	add	r3, r1
  400964:	4413      	add	r3, r2
  400966:	797a      	ldrb	r2, [r7, #5]
  400968:	701a      	strb	r2, [r3, #0]
}
  40096a:	bf00      	nop
  40096c:	370c      	adds	r7, #12
  40096e:	46bd      	mov	sp, r7
  400970:	f85d 7b04 	ldr.w	r7, [sp], #4
  400974:	4770      	bx	lr
  400976:	bf00      	nop
  400978:	204009f0 	.word	0x204009f0

0040097c <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  40097c:	b480      	push	{r7}
  40097e:	b083      	sub	sp, #12
  400980:	af00      	add	r7, sp, #0
  400982:	4603      	mov	r3, r0
  400984:	460a      	mov	r2, r1
  400986:	71fb      	strb	r3, [r7, #7]
  400988:	4613      	mov	r3, r2
  40098a:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  40098c:	4b07      	ldr	r3, [pc, #28]	; (4009ac <gfx_mono_framebuffer_get_byte+0x30>)
  40098e:	681a      	ldr	r2, [r3, #0]
  400990:	79fb      	ldrb	r3, [r7, #7]
  400992:	01db      	lsls	r3, r3, #7
  400994:	4619      	mov	r1, r3
  400996:	79bb      	ldrb	r3, [r7, #6]
  400998:	440b      	add	r3, r1
  40099a:	4413      	add	r3, r2
  40099c:	781b      	ldrb	r3, [r3, #0]
}
  40099e:	4618      	mov	r0, r3
  4009a0:	370c      	adds	r7, #12
  4009a2:	46bd      	mov	sp, r7
  4009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009a8:	4770      	bx	lr
  4009aa:	bf00      	nop
  4009ac:	204009f0 	.word	0x204009f0

004009b0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4009b0:	b590      	push	{r4, r7, lr}
  4009b2:	b085      	sub	sp, #20
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	4604      	mov	r4, r0
  4009b8:	4608      	mov	r0, r1
  4009ba:	4611      	mov	r1, r2
  4009bc:	461a      	mov	r2, r3
  4009be:	4623      	mov	r3, r4
  4009c0:	71fb      	strb	r3, [r7, #7]
  4009c2:	4603      	mov	r3, r0
  4009c4:	71bb      	strb	r3, [r7, #6]
  4009c6:	460b      	mov	r3, r1
  4009c8:	717b      	strb	r3, [r7, #5]
  4009ca:	4613      	mov	r3, r2
  4009cc:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4009ce:	79fa      	ldrb	r2, [r7, #7]
  4009d0:	797b      	ldrb	r3, [r7, #5]
  4009d2:	4413      	add	r3, r2
  4009d4:	2b80      	cmp	r3, #128	; 0x80
  4009d6:	dd06      	ble.n	4009e6 <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  4009d8:	79fb      	ldrb	r3, [r7, #7]
  4009da:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  4009de:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  4009e2:	3380      	adds	r3, #128	; 0x80
  4009e4:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  4009e6:	79bb      	ldrb	r3, [r7, #6]
  4009e8:	08db      	lsrs	r3, r3, #3
  4009ea:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  4009ec:	79ba      	ldrb	r2, [r7, #6]
  4009ee:	7bfb      	ldrb	r3, [r7, #15]
  4009f0:	00db      	lsls	r3, r3, #3
  4009f2:	1ad3      	subs	r3, r2, r3
  4009f4:	2201      	movs	r2, #1
  4009f6:	fa02 f303 	lsl.w	r3, r2, r3
  4009fa:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  4009fc:	797b      	ldrb	r3, [r7, #5]
  4009fe:	2b00      	cmp	r3, #0
  400a00:	d066      	beq.n	400ad0 <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400a02:	793b      	ldrb	r3, [r7, #4]
  400a04:	2b01      	cmp	r3, #1
  400a06:	d01c      	beq.n	400a42 <gfx_mono_generic_draw_horizontal_line+0x92>
  400a08:	2b02      	cmp	r3, #2
  400a0a:	d05b      	beq.n	400ac4 <gfx_mono_generic_draw_horizontal_line+0x114>
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d03b      	beq.n	400a88 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  400a10:	e05f      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400a12:	79fa      	ldrb	r2, [r7, #7]
  400a14:	797b      	ldrb	r3, [r7, #5]
  400a16:	4413      	add	r3, r2
  400a18:	b2da      	uxtb	r2, r3
  400a1a:	7bfb      	ldrb	r3, [r7, #15]
  400a1c:	4611      	mov	r1, r2
  400a1e:	4618      	mov	r0, r3
  400a20:	4b2d      	ldr	r3, [pc, #180]	; (400ad8 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400a22:	4798      	blx	r3
  400a24:	4603      	mov	r3, r0
  400a26:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  400a28:	7b7a      	ldrb	r2, [r7, #13]
  400a2a:	7bbb      	ldrb	r3, [r7, #14]
  400a2c:	4313      	orrs	r3, r2
  400a2e:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400a30:	79fa      	ldrb	r2, [r7, #7]
  400a32:	797b      	ldrb	r3, [r7, #5]
  400a34:	4413      	add	r3, r2
  400a36:	b2d9      	uxtb	r1, r3
  400a38:	7b7a      	ldrb	r2, [r7, #13]
  400a3a:	7bf8      	ldrb	r0, [r7, #15]
  400a3c:	2300      	movs	r3, #0
  400a3e:	4c27      	ldr	r4, [pc, #156]	; (400adc <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400a40:	47a0      	blx	r4
		while (length-- > 0) {
  400a42:	797b      	ldrb	r3, [r7, #5]
  400a44:	1e5a      	subs	r2, r3, #1
  400a46:	717a      	strb	r2, [r7, #5]
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d1e2      	bne.n	400a12 <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  400a4c:	e041      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400a4e:	79fa      	ldrb	r2, [r7, #7]
  400a50:	797b      	ldrb	r3, [r7, #5]
  400a52:	4413      	add	r3, r2
  400a54:	b2da      	uxtb	r2, r3
  400a56:	7bfb      	ldrb	r3, [r7, #15]
  400a58:	4611      	mov	r1, r2
  400a5a:	4618      	mov	r0, r3
  400a5c:	4b1e      	ldr	r3, [pc, #120]	; (400ad8 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400a5e:	4798      	blx	r3
  400a60:	4603      	mov	r3, r0
  400a62:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  400a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400a68:	43db      	mvns	r3, r3
  400a6a:	b25a      	sxtb	r2, r3
  400a6c:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400a70:	4013      	ands	r3, r2
  400a72:	b25b      	sxtb	r3, r3
  400a74:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400a76:	79fa      	ldrb	r2, [r7, #7]
  400a78:	797b      	ldrb	r3, [r7, #5]
  400a7a:	4413      	add	r3, r2
  400a7c:	b2d9      	uxtb	r1, r3
  400a7e:	7b7a      	ldrb	r2, [r7, #13]
  400a80:	7bf8      	ldrb	r0, [r7, #15]
  400a82:	2300      	movs	r3, #0
  400a84:	4c15      	ldr	r4, [pc, #84]	; (400adc <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400a86:	47a0      	blx	r4
		while (length-- > 0) {
  400a88:	797b      	ldrb	r3, [r7, #5]
  400a8a:	1e5a      	subs	r2, r3, #1
  400a8c:	717a      	strb	r2, [r7, #5]
  400a8e:	2b00      	cmp	r3, #0
  400a90:	d1dd      	bne.n	400a4e <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  400a92:	e01e      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400a94:	79fa      	ldrb	r2, [r7, #7]
  400a96:	797b      	ldrb	r3, [r7, #5]
  400a98:	4413      	add	r3, r2
  400a9a:	b2da      	uxtb	r2, r3
  400a9c:	7bfb      	ldrb	r3, [r7, #15]
  400a9e:	4611      	mov	r1, r2
  400aa0:	4618      	mov	r0, r3
  400aa2:	4b0d      	ldr	r3, [pc, #52]	; (400ad8 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400aa4:	4798      	blx	r3
  400aa6:	4603      	mov	r3, r0
  400aa8:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400aaa:	7b7a      	ldrb	r2, [r7, #13]
  400aac:	7bbb      	ldrb	r3, [r7, #14]
  400aae:	4053      	eors	r3, r2
  400ab0:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400ab2:	79fa      	ldrb	r2, [r7, #7]
  400ab4:	797b      	ldrb	r3, [r7, #5]
  400ab6:	4413      	add	r3, r2
  400ab8:	b2d9      	uxtb	r1, r3
  400aba:	7b7a      	ldrb	r2, [r7, #13]
  400abc:	7bf8      	ldrb	r0, [r7, #15]
  400abe:	2300      	movs	r3, #0
  400ac0:	4c06      	ldr	r4, [pc, #24]	; (400adc <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400ac2:	47a0      	blx	r4
		while (length-- > 0) {
  400ac4:	797b      	ldrb	r3, [r7, #5]
  400ac6:	1e5a      	subs	r2, r3, #1
  400ac8:	717a      	strb	r2, [r7, #5]
  400aca:	2b00      	cmp	r3, #0
  400acc:	d1e2      	bne.n	400a94 <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  400ace:	e000      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  400ad0:	bf00      	nop
	}
}
  400ad2:	3714      	adds	r7, #20
  400ad4:	46bd      	mov	sp, r7
  400ad6:	bd90      	pop	{r4, r7, pc}
  400ad8:	00400eed 	.word	0x00400eed
  400adc:	00400e69 	.word	0x00400e69

00400ae0 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400ae0:	b590      	push	{r4, r7, lr}
  400ae2:	b083      	sub	sp, #12
  400ae4:	af00      	add	r7, sp, #0
  400ae6:	4604      	mov	r4, r0
  400ae8:	4608      	mov	r0, r1
  400aea:	4611      	mov	r1, r2
  400aec:	461a      	mov	r2, r3
  400aee:	4623      	mov	r3, r4
  400af0:	71fb      	strb	r3, [r7, #7]
  400af2:	4603      	mov	r3, r0
  400af4:	71bb      	strb	r3, [r7, #6]
  400af6:	460b      	mov	r3, r1
  400af8:	717b      	strb	r3, [r7, #5]
  400afa:	4613      	mov	r3, r2
  400afc:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  400afe:	793b      	ldrb	r3, [r7, #4]
  400b00:	2b00      	cmp	r3, #0
  400b02:	d00f      	beq.n	400b24 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400b04:	e008      	b.n	400b18 <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400b06:	79ba      	ldrb	r2, [r7, #6]
  400b08:	793b      	ldrb	r3, [r7, #4]
  400b0a:	4413      	add	r3, r2
  400b0c:	b2d9      	uxtb	r1, r3
  400b0e:	7e3b      	ldrb	r3, [r7, #24]
  400b10:	797a      	ldrb	r2, [r7, #5]
  400b12:	79f8      	ldrb	r0, [r7, #7]
  400b14:	4c05      	ldr	r4, [pc, #20]	; (400b2c <gfx_mono_generic_draw_filled_rect+0x4c>)
  400b16:	47a0      	blx	r4
	while (height-- > 0) {
  400b18:	793b      	ldrb	r3, [r7, #4]
  400b1a:	1e5a      	subs	r2, r3, #1
  400b1c:	713a      	strb	r2, [r7, #4]
  400b1e:	2b00      	cmp	r3, #0
  400b20:	d1f1      	bne.n	400b06 <gfx_mono_generic_draw_filled_rect+0x26>
  400b22:	e000      	b.n	400b26 <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  400b24:	bf00      	nop
	}
}
  400b26:	370c      	adds	r7, #12
  400b28:	46bd      	mov	sp, r7
  400b2a:	bd90      	pop	{r4, r7, pc}
  400b2c:	004009b1 	.word	0x004009b1

00400b30 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  400b30:	b580      	push	{r7, lr}
  400b32:	b086      	sub	sp, #24
  400b34:	af00      	add	r7, sp, #0
  400b36:	603b      	str	r3, [r7, #0]
  400b38:	4603      	mov	r3, r0
  400b3a:	71fb      	strb	r3, [r7, #7]
  400b3c:	460b      	mov	r3, r1
  400b3e:	71bb      	strb	r3, [r7, #6]
  400b40:	4613      	mov	r3, r2
  400b42:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  400b44:	79bb      	ldrb	r3, [r7, #6]
  400b46:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  400b48:	797b      	ldrb	r3, [r7, #5]
  400b4a:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400b4c:	683b      	ldr	r3, [r7, #0]
  400b4e:	7a1b      	ldrb	r3, [r3, #8]
  400b50:	08db      	lsrs	r3, r3, #3
  400b52:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400b54:	683b      	ldr	r3, [r7, #0]
  400b56:	7a1b      	ldrb	r3, [r3, #8]
  400b58:	f003 0307 	and.w	r3, r3, #7
  400b5c:	b2db      	uxtb	r3, r3
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d002      	beq.n	400b68 <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  400b62:	7cfb      	ldrb	r3, [r7, #19]
  400b64:	3301      	adds	r3, #1
  400b66:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  400b68:	7cfb      	ldrb	r3, [r7, #19]
  400b6a:	b29a      	uxth	r2, r3
  400b6c:	683b      	ldr	r3, [r7, #0]
  400b6e:	7a5b      	ldrb	r3, [r3, #9]
  400b70:	b29b      	uxth	r3, r3
  400b72:	fb12 f303 	smulbb	r3, r2, r3
  400b76:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400b78:	79fb      	ldrb	r3, [r7, #7]
  400b7a:	6839      	ldr	r1, [r7, #0]
  400b7c:	7a89      	ldrb	r1, [r1, #10]
  400b7e:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  400b80:	b29b      	uxth	r3, r3
  400b82:	fb12 f303 	smulbb	r3, r2, r3
  400b86:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400b88:	683b      	ldr	r3, [r7, #0]
  400b8a:	685a      	ldr	r2, [r3, #4]
  400b8c:	89bb      	ldrh	r3, [r7, #12]
  400b8e:	4413      	add	r3, r2
  400b90:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  400b92:	683b      	ldr	r3, [r7, #0]
  400b94:	7a5b      	ldrb	r3, [r3, #9]
  400b96:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400b98:	2300      	movs	r3, #0
  400b9a:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400b9c:	683b      	ldr	r3, [r7, #0]
  400b9e:	7a1b      	ldrb	r3, [r3, #8]
  400ba0:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  400ba2:	2300      	movs	r3, #0
  400ba4:	747b      	strb	r3, [r7, #17]
  400ba6:	e01e      	b.n	400be6 <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400ba8:	7c7b      	ldrb	r3, [r7, #17]
  400baa:	f003 0307 	and.w	r3, r3, #7
  400bae:	b2db      	uxtb	r3, r3
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d105      	bne.n	400bc0 <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400bb4:	697b      	ldr	r3, [r7, #20]
  400bb6:	781b      	ldrb	r3, [r3, #0]
  400bb8:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  400bba:	697b      	ldr	r3, [r7, #20]
  400bbc:	3301      	adds	r3, #1
  400bbe:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  400bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	da05      	bge.n	400bd4 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400bc8:	7bf9      	ldrb	r1, [r7, #15]
  400bca:	7c3b      	ldrb	r3, [r7, #16]
  400bcc:	2201      	movs	r2, #1
  400bce:	4618      	mov	r0, r3
  400bd0:	4b0e      	ldr	r3, [pc, #56]	; (400c0c <gfx_mono_draw_char_progmem+0xdc>)
  400bd2:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400bd4:	7c3b      	ldrb	r3, [r7, #16]
  400bd6:	3301      	adds	r3, #1
  400bd8:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  400bda:	7bbb      	ldrb	r3, [r7, #14]
  400bdc:	005b      	lsls	r3, r3, #1
  400bde:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  400be0:	7c7b      	ldrb	r3, [r7, #17]
  400be2:	3301      	adds	r3, #1
  400be4:	747b      	strb	r3, [r7, #17]
  400be6:	7c7a      	ldrb	r2, [r7, #17]
  400be8:	7afb      	ldrb	r3, [r7, #11]
  400bea:	429a      	cmp	r2, r3
  400bec:	d3dc      	bcc.n	400ba8 <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  400bee:	7bfb      	ldrb	r3, [r7, #15]
  400bf0:	3301      	adds	r3, #1
  400bf2:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400bf4:	79bb      	ldrb	r3, [r7, #6]
  400bf6:	743b      	strb	r3, [r7, #16]
		rows_left--;
  400bf8:	7cbb      	ldrb	r3, [r7, #18]
  400bfa:	3b01      	subs	r3, #1
  400bfc:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  400bfe:	7cbb      	ldrb	r3, [r7, #18]
  400c00:	2b00      	cmp	r3, #0
  400c02:	d1c9      	bne.n	400b98 <gfx_mono_draw_char_progmem+0x68>
}
  400c04:	bf00      	nop
  400c06:	3718      	adds	r7, #24
  400c08:	46bd      	mov	sp, r7
  400c0a:	bd80      	pop	{r7, pc}
  400c0c:	00400dcd 	.word	0x00400dcd

00400c10 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400c10:	b590      	push	{r4, r7, lr}
  400c12:	b085      	sub	sp, #20
  400c14:	af02      	add	r7, sp, #8
  400c16:	603b      	str	r3, [r7, #0]
  400c18:	4603      	mov	r3, r0
  400c1a:	71fb      	strb	r3, [r7, #7]
  400c1c:	460b      	mov	r3, r1
  400c1e:	71bb      	strb	r3, [r7, #6]
  400c20:	4613      	mov	r3, r2
  400c22:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400c24:	683b      	ldr	r3, [r7, #0]
  400c26:	7a1a      	ldrb	r2, [r3, #8]
  400c28:	683b      	ldr	r3, [r7, #0]
  400c2a:	7a5c      	ldrb	r4, [r3, #9]
  400c2c:	7979      	ldrb	r1, [r7, #5]
  400c2e:	79b8      	ldrb	r0, [r7, #6]
  400c30:	2300      	movs	r3, #0
  400c32:	9300      	str	r3, [sp, #0]
  400c34:	4623      	mov	r3, r4
  400c36:	4c09      	ldr	r4, [pc, #36]	; (400c5c <gfx_mono_draw_char+0x4c>)
  400c38:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  400c3a:	683b      	ldr	r3, [r7, #0]
  400c3c:	781b      	ldrb	r3, [r3, #0]
  400c3e:	2b00      	cmp	r3, #0
  400c40:	d000      	beq.n	400c44 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  400c42:	e006      	b.n	400c52 <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  400c44:	797a      	ldrb	r2, [r7, #5]
  400c46:	79b9      	ldrb	r1, [r7, #6]
  400c48:	79f8      	ldrb	r0, [r7, #7]
  400c4a:	683b      	ldr	r3, [r7, #0]
  400c4c:	4c04      	ldr	r4, [pc, #16]	; (400c60 <gfx_mono_draw_char+0x50>)
  400c4e:	47a0      	blx	r4
		break;
  400c50:	bf00      	nop
	}
}
  400c52:	bf00      	nop
  400c54:	370c      	adds	r7, #12
  400c56:	46bd      	mov	sp, r7
  400c58:	bd90      	pop	{r4, r7, pc}
  400c5a:	bf00      	nop
  400c5c:	00400ae1 	.word	0x00400ae1
  400c60:	00400b31 	.word	0x00400b31

00400c64 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400c64:	b590      	push	{r4, r7, lr}
  400c66:	b087      	sub	sp, #28
  400c68:	af00      	add	r7, sp, #0
  400c6a:	60f8      	str	r0, [r7, #12]
  400c6c:	607b      	str	r3, [r7, #4]
  400c6e:	460b      	mov	r3, r1
  400c70:	72fb      	strb	r3, [r7, #11]
  400c72:	4613      	mov	r3, r2
  400c74:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  400c76:	7afb      	ldrb	r3, [r7, #11]
  400c78:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400c7a:	68fb      	ldr	r3, [r7, #12]
  400c7c:	781b      	ldrb	r3, [r3, #0]
  400c7e:	2b0a      	cmp	r3, #10
  400c80:	d109      	bne.n	400c96 <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  400c82:	7dfb      	ldrb	r3, [r7, #23]
  400c84:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	7a5a      	ldrb	r2, [r3, #9]
  400c8a:	7abb      	ldrb	r3, [r7, #10]
  400c8c:	4413      	add	r3, r2
  400c8e:	b2db      	uxtb	r3, r3
  400c90:	3301      	adds	r3, #1
  400c92:	72bb      	strb	r3, [r7, #10]
  400c94:	e00f      	b.n	400cb6 <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  400c96:	68fb      	ldr	r3, [r7, #12]
  400c98:	781b      	ldrb	r3, [r3, #0]
  400c9a:	2b0d      	cmp	r3, #13
  400c9c:	d00b      	beq.n	400cb6 <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	7818      	ldrb	r0, [r3, #0]
  400ca2:	7aba      	ldrb	r2, [r7, #10]
  400ca4:	7af9      	ldrb	r1, [r7, #11]
  400ca6:	687b      	ldr	r3, [r7, #4]
  400ca8:	4c08      	ldr	r4, [pc, #32]	; (400ccc <gfx_mono_draw_string+0x68>)
  400caa:	47a0      	blx	r4
			x += font->width;
  400cac:	687b      	ldr	r3, [r7, #4]
  400cae:	7a1a      	ldrb	r2, [r3, #8]
  400cb0:	7afb      	ldrb	r3, [r7, #11]
  400cb2:	4413      	add	r3, r2
  400cb4:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  400cb6:	68fb      	ldr	r3, [r7, #12]
  400cb8:	3301      	adds	r3, #1
  400cba:	60fb      	str	r3, [r7, #12]
  400cbc:	68fb      	ldr	r3, [r7, #12]
  400cbe:	781b      	ldrb	r3, [r3, #0]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d1da      	bne.n	400c7a <gfx_mono_draw_string+0x16>
}
  400cc4:	bf00      	nop
  400cc6:	371c      	adds	r7, #28
  400cc8:	46bd      	mov	sp, r7
  400cca:	bd90      	pop	{r4, r7, pc}
  400ccc:	00400c11 	.word	0x00400c11

00400cd0 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b082      	sub	sp, #8
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	4603      	mov	r3, r0
  400cd8:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400cda:	79fb      	ldrb	r3, [r7, #7]
  400cdc:	f003 030f 	and.w	r3, r3, #15
  400ce0:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400ce2:	79fb      	ldrb	r3, [r7, #7]
  400ce4:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400ce8:	b2db      	uxtb	r3, r3
  400cea:	4618      	mov	r0, r3
  400cec:	4b02      	ldr	r3, [pc, #8]	; (400cf8 <ssd1306_set_page_address+0x28>)
  400cee:	4798      	blx	r3
	
}
  400cf0:	bf00      	nop
  400cf2:	3708      	adds	r7, #8
  400cf4:	46bd      	mov	sp, r7
  400cf6:	bd80      	pop	{r7, pc}
  400cf8:	004015d5 	.word	0x004015d5

00400cfc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	b082      	sub	sp, #8
  400d00:	af00      	add	r7, sp, #0
  400d02:	4603      	mov	r3, r0
  400d04:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400d06:	79fb      	ldrb	r3, [r7, #7]
  400d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400d0c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400d0e:	79fb      	ldrb	r3, [r7, #7]
  400d10:	091b      	lsrs	r3, r3, #4
  400d12:	b2db      	uxtb	r3, r3
  400d14:	f043 0310 	orr.w	r3, r3, #16
  400d18:	b2db      	uxtb	r3, r3
  400d1a:	4618      	mov	r0, r3
  400d1c:	4b06      	ldr	r3, [pc, #24]	; (400d38 <ssd1306_set_column_address+0x3c>)
  400d1e:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400d20:	79fb      	ldrb	r3, [r7, #7]
  400d22:	f003 030f 	and.w	r3, r3, #15
  400d26:	b2db      	uxtb	r3, r3
  400d28:	4618      	mov	r0, r3
  400d2a:	4b03      	ldr	r3, [pc, #12]	; (400d38 <ssd1306_set_column_address+0x3c>)
  400d2c:	4798      	blx	r3
}
  400d2e:	bf00      	nop
  400d30:	3708      	adds	r7, #8
  400d32:	46bd      	mov	sp, r7
  400d34:	bd80      	pop	{r7, pc}
  400d36:	bf00      	nop
  400d38:	004015d5 	.word	0x004015d5

00400d3c <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400d3c:	b580      	push	{r7, lr}
  400d3e:	b082      	sub	sp, #8
  400d40:	af00      	add	r7, sp, #0
  400d42:	4603      	mov	r3, r0
  400d44:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400d46:	79fb      	ldrb	r3, [r7, #7]
  400d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400d4c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400d4e:	79fb      	ldrb	r3, [r7, #7]
  400d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400d54:	b2db      	uxtb	r3, r3
  400d56:	4618      	mov	r0, r3
  400d58:	4b02      	ldr	r3, [pc, #8]	; (400d64 <ssd1306_set_display_start_line_address+0x28>)
  400d5a:	4798      	blx	r3
}
  400d5c:	bf00      	nop
  400d5e:	3708      	adds	r7, #8
  400d60:	46bd      	mov	sp, r7
  400d62:	bd80      	pop	{r7, pc}
  400d64:	004015d5 	.word	0x004015d5

00400d68 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400d68:	b590      	push	{r4, r7, lr}
  400d6a:	b083      	sub	sp, #12
  400d6c:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400d6e:	4812      	ldr	r0, [pc, #72]	; (400db8 <gfx_mono_ssd1306_init+0x50>)
  400d70:	4b12      	ldr	r3, [pc, #72]	; (400dbc <gfx_mono_ssd1306_init+0x54>)
  400d72:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400d74:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <gfx_mono_ssd1306_init+0x58>)
  400d76:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400d78:	2000      	movs	r0, #0
  400d7a:	4b12      	ldr	r3, [pc, #72]	; (400dc4 <gfx_mono_ssd1306_init+0x5c>)
  400d7c:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400d7e:	2300      	movs	r3, #0
  400d80:	71fb      	strb	r3, [r7, #7]
  400d82:	e012      	b.n	400daa <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400d84:	2300      	movs	r3, #0
  400d86:	71bb      	strb	r3, [r7, #6]
  400d88:	e008      	b.n	400d9c <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400d8a:	79b9      	ldrb	r1, [r7, #6]
  400d8c:	79f8      	ldrb	r0, [r7, #7]
  400d8e:	2301      	movs	r3, #1
  400d90:	2200      	movs	r2, #0
  400d92:	4c0d      	ldr	r4, [pc, #52]	; (400dc8 <gfx_mono_ssd1306_init+0x60>)
  400d94:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400d96:	79bb      	ldrb	r3, [r7, #6]
  400d98:	3301      	adds	r3, #1
  400d9a:	71bb      	strb	r3, [r7, #6]
  400d9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400da0:	2b00      	cmp	r3, #0
  400da2:	daf2      	bge.n	400d8a <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400da4:	79fb      	ldrb	r3, [r7, #7]
  400da6:	3301      	adds	r3, #1
  400da8:	71fb      	strb	r3, [r7, #7]
  400daa:	79fb      	ldrb	r3, [r7, #7]
  400dac:	2b03      	cmp	r3, #3
  400dae:	d9e9      	bls.n	400d84 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400db0:	bf00      	nop
  400db2:	370c      	adds	r7, #12
  400db4:	46bd      	mov	sp, r7
  400db6:	bd90      	pop	{r4, r7, pc}
  400db8:	204009f4 	.word	0x204009f4
  400dbc:	00400925 	.word	0x00400925
  400dc0:	00401525 	.word	0x00401525
  400dc4:	00400d3d 	.word	0x00400d3d
  400dc8:	00400e69 	.word	0x00400e69

00400dcc <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  400dcc:	b590      	push	{r4, r7, lr}
  400dce:	b085      	sub	sp, #20
  400dd0:	af00      	add	r7, sp, #0
  400dd2:	4603      	mov	r3, r0
  400dd4:	71fb      	strb	r3, [r7, #7]
  400dd6:	460b      	mov	r3, r1
  400dd8:	71bb      	strb	r3, [r7, #6]
  400dda:	4613      	mov	r3, r2
  400ddc:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400de2:	2b00      	cmp	r3, #0
  400de4:	db38      	blt.n	400e58 <gfx_mono_ssd1306_draw_pixel+0x8c>
  400de6:	79bb      	ldrb	r3, [r7, #6]
  400de8:	2b1f      	cmp	r3, #31
  400dea:	d835      	bhi.n	400e58 <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400dec:	79bb      	ldrb	r3, [r7, #6]
  400dee:	08db      	lsrs	r3, r3, #3
  400df0:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  400df2:	79ba      	ldrb	r2, [r7, #6]
  400df4:	7bbb      	ldrb	r3, [r7, #14]
  400df6:	00db      	lsls	r3, r3, #3
  400df8:	1ad3      	subs	r3, r2, r3
  400dfa:	2201      	movs	r2, #1
  400dfc:	fa02 f303 	lsl.w	r3, r2, r3
  400e00:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  400e02:	79fa      	ldrb	r2, [r7, #7]
  400e04:	7bbb      	ldrb	r3, [r7, #14]
  400e06:	4611      	mov	r1, r2
  400e08:	4618      	mov	r0, r3
  400e0a:	4b15      	ldr	r3, [pc, #84]	; (400e60 <gfx_mono_ssd1306_draw_pixel+0x94>)
  400e0c:	4798      	blx	r3
  400e0e:	4603      	mov	r3, r0
  400e10:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400e12:	797b      	ldrb	r3, [r7, #5]
  400e14:	2b01      	cmp	r3, #1
  400e16:	d004      	beq.n	400e22 <gfx_mono_ssd1306_draw_pixel+0x56>
  400e18:	2b02      	cmp	r3, #2
  400e1a:	d011      	beq.n	400e40 <gfx_mono_ssd1306_draw_pixel+0x74>
  400e1c:	2b00      	cmp	r3, #0
  400e1e:	d005      	beq.n	400e2c <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400e20:	e013      	b.n	400e4a <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400e22:	7bfa      	ldrb	r2, [r7, #15]
  400e24:	7b7b      	ldrb	r3, [r7, #13]
  400e26:	4313      	orrs	r3, r2
  400e28:	73fb      	strb	r3, [r7, #15]
		break;
  400e2a:	e00e      	b.n	400e4a <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400e2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400e30:	43db      	mvns	r3, r3
  400e32:	b25a      	sxtb	r2, r3
  400e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400e38:	4013      	ands	r3, r2
  400e3a:	b25b      	sxtb	r3, r3
  400e3c:	73fb      	strb	r3, [r7, #15]
		break;
  400e3e:	e004      	b.n	400e4a <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400e40:	7bfa      	ldrb	r2, [r7, #15]
  400e42:	7b7b      	ldrb	r3, [r7, #13]
  400e44:	4053      	eors	r3, r2
  400e46:	73fb      	strb	r3, [r7, #15]
		break;
  400e48:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400e4a:	7bfa      	ldrb	r2, [r7, #15]
  400e4c:	79f9      	ldrb	r1, [r7, #7]
  400e4e:	7bb8      	ldrb	r0, [r7, #14]
  400e50:	2300      	movs	r3, #0
  400e52:	4c04      	ldr	r4, [pc, #16]	; (400e64 <gfx_mono_ssd1306_draw_pixel+0x98>)
  400e54:	47a0      	blx	r4
  400e56:	e000      	b.n	400e5a <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400e58:	bf00      	nop
}
  400e5a:	3714      	adds	r7, #20
  400e5c:	46bd      	mov	sp, r7
  400e5e:	bd90      	pop	{r4, r7, pc}
  400e60:	00400eed 	.word	0x00400eed
  400e64:	00400e69 	.word	0x00400e69

00400e68 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400e68:	b590      	push	{r4, r7, lr}
  400e6a:	b083      	sub	sp, #12
  400e6c:	af00      	add	r7, sp, #0
  400e6e:	4604      	mov	r4, r0
  400e70:	4608      	mov	r0, r1
  400e72:	4611      	mov	r1, r2
  400e74:	461a      	mov	r2, r3
  400e76:	4623      	mov	r3, r4
  400e78:	71fb      	strb	r3, [r7, #7]
  400e7a:	4603      	mov	r3, r0
  400e7c:	71bb      	strb	r3, [r7, #6]
  400e7e:	460b      	mov	r3, r1
  400e80:	717b      	strb	r3, [r7, #5]
  400e82:	4613      	mov	r3, r2
  400e84:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400e86:	793b      	ldrb	r3, [r7, #4]
  400e88:	f083 0301 	eor.w	r3, r3, #1
  400e8c:	b2db      	uxtb	r3, r3
  400e8e:	2b00      	cmp	r3, #0
  400e90:	d00a      	beq.n	400ea8 <gfx_mono_ssd1306_put_byte+0x40>
  400e92:	79ba      	ldrb	r2, [r7, #6]
  400e94:	79fb      	ldrb	r3, [r7, #7]
  400e96:	4611      	mov	r1, r2
  400e98:	4618      	mov	r0, r3
  400e9a:	4b0f      	ldr	r3, [pc, #60]	; (400ed8 <gfx_mono_ssd1306_put_byte+0x70>)
  400e9c:	4798      	blx	r3
  400e9e:	4603      	mov	r3, r0
  400ea0:	461a      	mov	r2, r3
  400ea2:	797b      	ldrb	r3, [r7, #5]
  400ea4:	4293      	cmp	r3, r2
  400ea6:	d012      	beq.n	400ece <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400ea8:	797a      	ldrb	r2, [r7, #5]
  400eaa:	79b9      	ldrb	r1, [r7, #6]
  400eac:	79fb      	ldrb	r3, [r7, #7]
  400eae:	4618      	mov	r0, r3
  400eb0:	4b0a      	ldr	r3, [pc, #40]	; (400edc <gfx_mono_ssd1306_put_byte+0x74>)
  400eb2:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400eb4:	79fb      	ldrb	r3, [r7, #7]
  400eb6:	4618      	mov	r0, r3
  400eb8:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <gfx_mono_ssd1306_put_byte+0x78>)
  400eba:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400ebc:	79bb      	ldrb	r3, [r7, #6]
  400ebe:	4618      	mov	r0, r3
  400ec0:	4b08      	ldr	r3, [pc, #32]	; (400ee4 <gfx_mono_ssd1306_put_byte+0x7c>)
  400ec2:	4798      	blx	r3

	ssd1306_write_data(data);
  400ec4:	797b      	ldrb	r3, [r7, #5]
  400ec6:	4618      	mov	r0, r3
  400ec8:	4b07      	ldr	r3, [pc, #28]	; (400ee8 <gfx_mono_ssd1306_put_byte+0x80>)
  400eca:	4798      	blx	r3
  400ecc:	e000      	b.n	400ed0 <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400ece:	bf00      	nop
}
  400ed0:	370c      	adds	r7, #12
  400ed2:	46bd      	mov	sp, r7
  400ed4:	bd90      	pop	{r4, r7, pc}
  400ed6:	bf00      	nop
  400ed8:	0040097d 	.word	0x0040097d
  400edc:	00400945 	.word	0x00400945
  400ee0:	00400cd1 	.word	0x00400cd1
  400ee4:	00400cfd 	.word	0x00400cfd
  400ee8:	00401679 	.word	0x00401679

00400eec <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400eec:	b580      	push	{r7, lr}
  400eee:	b082      	sub	sp, #8
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	4603      	mov	r3, r0
  400ef4:	460a      	mov	r2, r1
  400ef6:	71fb      	strb	r3, [r7, #7]
  400ef8:	4613      	mov	r3, r2
  400efa:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400efc:	79ba      	ldrb	r2, [r7, #6]
  400efe:	79fb      	ldrb	r3, [r7, #7]
  400f00:	4611      	mov	r1, r2
  400f02:	4618      	mov	r0, r3
  400f04:	4b03      	ldr	r3, [pc, #12]	; (400f14 <gfx_mono_ssd1306_get_byte+0x28>)
  400f06:	4798      	blx	r3
  400f08:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400f0a:	4618      	mov	r0, r3
  400f0c:	3708      	adds	r7, #8
  400f0e:	46bd      	mov	sp, r7
  400f10:	bd80      	pop	{r7, pc}
  400f12:	bf00      	nop
  400f14:	0040097d 	.word	0x0040097d

00400f18 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400f18:	b480      	push	{r7}
  400f1a:	b083      	sub	sp, #12
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	2b07      	cmp	r3, #7
  400f24:	d825      	bhi.n	400f72 <osc_get_rate+0x5a>
  400f26:	a201      	add	r2, pc, #4	; (adr r2, 400f2c <osc_get_rate+0x14>)
  400f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f2c:	00400f4d 	.word	0x00400f4d
  400f30:	00400f53 	.word	0x00400f53
  400f34:	00400f59 	.word	0x00400f59
  400f38:	00400f5f 	.word	0x00400f5f
  400f3c:	00400f63 	.word	0x00400f63
  400f40:	00400f67 	.word	0x00400f67
  400f44:	00400f6b 	.word	0x00400f6b
  400f48:	00400f6f 	.word	0x00400f6f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400f4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f50:	e010      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f56:	e00d      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f5c:	e00a      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400f5e:	4b08      	ldr	r3, [pc, #32]	; (400f80 <osc_get_rate+0x68>)
  400f60:	e008      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400f62:	4b08      	ldr	r3, [pc, #32]	; (400f84 <osc_get_rate+0x6c>)
  400f64:	e006      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400f66:	4b08      	ldr	r3, [pc, #32]	; (400f88 <osc_get_rate+0x70>)
  400f68:	e004      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400f6a:	4b07      	ldr	r3, [pc, #28]	; (400f88 <osc_get_rate+0x70>)
  400f6c:	e002      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400f6e:	4b06      	ldr	r3, [pc, #24]	; (400f88 <osc_get_rate+0x70>)
  400f70:	e000      	b.n	400f74 <osc_get_rate+0x5c>
	}

	return 0;
  400f72:	2300      	movs	r3, #0
}
  400f74:	4618      	mov	r0, r3
  400f76:	370c      	adds	r7, #12
  400f78:	46bd      	mov	sp, r7
  400f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f7e:	4770      	bx	lr
  400f80:	003d0900 	.word	0x003d0900
  400f84:	007a1200 	.word	0x007a1200
  400f88:	00b71b00 	.word	0x00b71b00

00400f8c <sysclk_get_main_hz>:
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400f90:	2006      	movs	r0, #6
  400f92:	4b05      	ldr	r3, [pc, #20]	; (400fa8 <sysclk_get_main_hz+0x1c>)
  400f94:	4798      	blx	r3
  400f96:	4602      	mov	r2, r0
  400f98:	4613      	mov	r3, r2
  400f9a:	009b      	lsls	r3, r3, #2
  400f9c:	4413      	add	r3, r2
  400f9e:	009a      	lsls	r2, r3, #2
  400fa0:	4413      	add	r3, r2
}
  400fa2:	4618      	mov	r0, r3
  400fa4:	bd80      	pop	{r7, pc}
  400fa6:	bf00      	nop
  400fa8:	00400f19 	.word	0x00400f19

00400fac <sysclk_get_cpu_hz>:
{
  400fac:	b580      	push	{r7, lr}
  400fae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fb0:	4b02      	ldr	r3, [pc, #8]	; (400fbc <sysclk_get_cpu_hz+0x10>)
  400fb2:	4798      	blx	r3
  400fb4:	4603      	mov	r3, r0
}
  400fb6:	4618      	mov	r0, r3
  400fb8:	bd80      	pop	{r7, pc}
  400fba:	bf00      	nop
  400fbc:	00400f8d 	.word	0x00400f8d

00400fc0 <sysclk_get_peripheral_hz>:
{
  400fc0:	b580      	push	{r7, lr}
  400fc2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fc4:	4b02      	ldr	r3, [pc, #8]	; (400fd0 <sysclk_get_peripheral_hz+0x10>)
  400fc6:	4798      	blx	r3
  400fc8:	4603      	mov	r3, r0
  400fca:	085b      	lsrs	r3, r3, #1
}
  400fcc:	4618      	mov	r0, r3
  400fce:	bd80      	pop	{r7, pc}
  400fd0:	00400f8d 	.word	0x00400f8d

00400fd4 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400fd4:	b480      	push	{r7}
  400fd6:	b089      	sub	sp, #36	; 0x24
  400fd8:	af00      	add	r7, sp, #0
  400fda:	6078      	str	r0, [r7, #4]
  400fdc:	687b      	ldr	r3, [r7, #4]
  400fde:	61fb      	str	r3, [r7, #28]
  400fe0:	69fb      	ldr	r3, [r7, #28]
  400fe2:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400fe4:	69bb      	ldr	r3, [r7, #24]
  400fe6:	095a      	lsrs	r2, r3, #5
  400fe8:	69fb      	ldr	r3, [r7, #28]
  400fea:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400fec:	697b      	ldr	r3, [r7, #20]
  400fee:	f003 031f 	and.w	r3, r3, #31
  400ff2:	2101      	movs	r1, #1
  400ff4:	fa01 f303 	lsl.w	r3, r1, r3
  400ff8:	613a      	str	r2, [r7, #16]
  400ffa:	60fb      	str	r3, [r7, #12]
  400ffc:	693b      	ldr	r3, [r7, #16]
  400ffe:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401000:	68ba      	ldr	r2, [r7, #8]
  401002:	4b06      	ldr	r3, [pc, #24]	; (40101c <ioport_enable_pin+0x48>)
  401004:	4413      	add	r3, r2
  401006:	025b      	lsls	r3, r3, #9
  401008:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40100a:	68fb      	ldr	r3, [r7, #12]
  40100c:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  40100e:	bf00      	nop
  401010:	3724      	adds	r7, #36	; 0x24
  401012:	46bd      	mov	sp, r7
  401014:	f85d 7b04 	ldr.w	r7, [sp], #4
  401018:	4770      	bx	lr
  40101a:	bf00      	nop
  40101c:	00200707 	.word	0x00200707

00401020 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401020:	b480      	push	{r7}
  401022:	b08d      	sub	sp, #52	; 0x34
  401024:	af00      	add	r7, sp, #0
  401026:	6078      	str	r0, [r7, #4]
  401028:	6039      	str	r1, [r7, #0]
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40102e:	683b      	ldr	r3, [r7, #0]
  401030:	62bb      	str	r3, [r7, #40]	; 0x28
  401032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401034:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401038:	095a      	lsrs	r2, r3, #5
  40103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40103c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40103e:	6a3b      	ldr	r3, [r7, #32]
  401040:	f003 031f 	and.w	r3, r3, #31
  401044:	2101      	movs	r1, #1
  401046:	fa01 f303 	lsl.w	r3, r1, r3
  40104a:	61fa      	str	r2, [r7, #28]
  40104c:	61bb      	str	r3, [r7, #24]
  40104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401050:	617b      	str	r3, [r7, #20]
  401052:	69fb      	ldr	r3, [r7, #28]
  401054:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401056:	693a      	ldr	r2, [r7, #16]
  401058:	4b37      	ldr	r3, [pc, #220]	; (401138 <ioport_set_pin_mode+0x118>)
  40105a:	4413      	add	r3, r2
  40105c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40105e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401060:	697b      	ldr	r3, [r7, #20]
  401062:	f003 0308 	and.w	r3, r3, #8
  401066:	2b00      	cmp	r3, #0
  401068:	d003      	beq.n	401072 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40106a:	68fb      	ldr	r3, [r7, #12]
  40106c:	69ba      	ldr	r2, [r7, #24]
  40106e:	665a      	str	r2, [r3, #100]	; 0x64
  401070:	e002      	b.n	401078 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  401072:	68fb      	ldr	r3, [r7, #12]
  401074:	69ba      	ldr	r2, [r7, #24]
  401076:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401078:	697b      	ldr	r3, [r7, #20]
  40107a:	f003 0310 	and.w	r3, r3, #16
  40107e:	2b00      	cmp	r3, #0
  401080:	d004      	beq.n	40108c <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401082:	68fb      	ldr	r3, [r7, #12]
  401084:	69ba      	ldr	r2, [r7, #24]
  401086:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40108a:	e003      	b.n	401094 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  40108c:	68fb      	ldr	r3, [r7, #12]
  40108e:	69ba      	ldr	r2, [r7, #24]
  401090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401094:	697b      	ldr	r3, [r7, #20]
  401096:	f003 0320 	and.w	r3, r3, #32
  40109a:	2b00      	cmp	r3, #0
  40109c:	d003      	beq.n	4010a6 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40109e:	68fb      	ldr	r3, [r7, #12]
  4010a0:	69ba      	ldr	r2, [r7, #24]
  4010a2:	651a      	str	r2, [r3, #80]	; 0x50
  4010a4:	e002      	b.n	4010ac <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4010a6:	68fb      	ldr	r3, [r7, #12]
  4010a8:	69ba      	ldr	r2, [r7, #24]
  4010aa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4010ac:	697b      	ldr	r3, [r7, #20]
  4010ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d003      	beq.n	4010be <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4010b6:	68fb      	ldr	r3, [r7, #12]
  4010b8:	69ba      	ldr	r2, [r7, #24]
  4010ba:	621a      	str	r2, [r3, #32]
  4010bc:	e002      	b.n	4010c4 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4010be:	68fb      	ldr	r3, [r7, #12]
  4010c0:	69ba      	ldr	r2, [r7, #24]
  4010c2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4010c4:	697b      	ldr	r3, [r7, #20]
  4010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010ca:	2b00      	cmp	r3, #0
  4010cc:	d004      	beq.n	4010d8 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4010ce:	68fb      	ldr	r3, [r7, #12]
  4010d0:	69ba      	ldr	r2, [r7, #24]
  4010d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4010d6:	e003      	b.n	4010e0 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4010d8:	68fb      	ldr	r3, [r7, #12]
  4010da:	69ba      	ldr	r2, [r7, #24]
  4010dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4010e0:	697b      	ldr	r3, [r7, #20]
  4010e2:	f003 0301 	and.w	r3, r3, #1
  4010e6:	2b00      	cmp	r3, #0
  4010e8:	d006      	beq.n	4010f8 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4010ea:	68fb      	ldr	r3, [r7, #12]
  4010ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010ee:	69bb      	ldr	r3, [r7, #24]
  4010f0:	431a      	orrs	r2, r3
  4010f2:	68fb      	ldr	r3, [r7, #12]
  4010f4:	671a      	str	r2, [r3, #112]	; 0x70
  4010f6:	e006      	b.n	401106 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4010f8:	68fb      	ldr	r3, [r7, #12]
  4010fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010fc:	69bb      	ldr	r3, [r7, #24]
  4010fe:	43db      	mvns	r3, r3
  401100:	401a      	ands	r2, r3
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401106:	697b      	ldr	r3, [r7, #20]
  401108:	f003 0302 	and.w	r3, r3, #2
  40110c:	2b00      	cmp	r3, #0
  40110e:	d006      	beq.n	40111e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401110:	68fb      	ldr	r3, [r7, #12]
  401112:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401114:	69bb      	ldr	r3, [r7, #24]
  401116:	431a      	orrs	r2, r3
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40111c:	e006      	b.n	40112c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40111e:	68fb      	ldr	r3, [r7, #12]
  401120:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401122:	69bb      	ldr	r3, [r7, #24]
  401124:	43db      	mvns	r3, r3
  401126:	401a      	ands	r2, r3
  401128:	68fb      	ldr	r3, [r7, #12]
  40112a:	675a      	str	r2, [r3, #116]	; 0x74
  40112c:	bf00      	nop
  40112e:	3734      	adds	r7, #52	; 0x34
  401130:	46bd      	mov	sp, r7
  401132:	f85d 7b04 	ldr.w	r7, [sp], #4
  401136:	4770      	bx	lr
  401138:	00200707 	.word	0x00200707

0040113c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  40113c:	b480      	push	{r7}
  40113e:	b08d      	sub	sp, #52	; 0x34
  401140:	af00      	add	r7, sp, #0
  401142:	6078      	str	r0, [r7, #4]
  401144:	460b      	mov	r3, r1
  401146:	70fb      	strb	r3, [r7, #3]
  401148:	687b      	ldr	r3, [r7, #4]
  40114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40114c:	78fb      	ldrb	r3, [r7, #3]
  40114e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401154:	627b      	str	r3, [r7, #36]	; 0x24
  401156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401158:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40115a:	6a3b      	ldr	r3, [r7, #32]
  40115c:	095b      	lsrs	r3, r3, #5
  40115e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401160:	69fa      	ldr	r2, [r7, #28]
  401162:	4b17      	ldr	r3, [pc, #92]	; (4011c0 <ioport_set_pin_dir+0x84>)
  401164:	4413      	add	r3, r2
  401166:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401168:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40116a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40116e:	2b01      	cmp	r3, #1
  401170:	d109      	bne.n	401186 <ioport_set_pin_dir+0x4a>
  401172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401174:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401176:	697b      	ldr	r3, [r7, #20]
  401178:	f003 031f 	and.w	r3, r3, #31
  40117c:	2201      	movs	r2, #1
  40117e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401180:	69bb      	ldr	r3, [r7, #24]
  401182:	611a      	str	r2, [r3, #16]
  401184:	e00c      	b.n	4011a0 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40118a:	2b00      	cmp	r3, #0
  40118c:	d108      	bne.n	4011a0 <ioport_set_pin_dir+0x64>
  40118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401190:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401192:	693b      	ldr	r3, [r7, #16]
  401194:	f003 031f 	and.w	r3, r3, #31
  401198:	2201      	movs	r2, #1
  40119a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40119c:	69bb      	ldr	r3, [r7, #24]
  40119e:	615a      	str	r2, [r3, #20]
  4011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011a2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4011a4:	68fb      	ldr	r3, [r7, #12]
  4011a6:	f003 031f 	and.w	r3, r3, #31
  4011aa:	2201      	movs	r2, #1
  4011ac:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011ae:	69bb      	ldr	r3, [r7, #24]
  4011b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4011b4:	bf00      	nop
  4011b6:	3734      	adds	r7, #52	; 0x34
  4011b8:	46bd      	mov	sp, r7
  4011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011be:	4770      	bx	lr
  4011c0:	00200707 	.word	0x00200707

004011c4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b08b      	sub	sp, #44	; 0x2c
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
  4011cc:	460b      	mov	r3, r1
  4011ce:	70fb      	strb	r3, [r7, #3]
  4011d0:	687b      	ldr	r3, [r7, #4]
  4011d2:	627b      	str	r3, [r7, #36]	; 0x24
  4011d4:	78fb      	ldrb	r3, [r7, #3]
  4011d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011dc:	61fb      	str	r3, [r7, #28]
  4011de:	69fb      	ldr	r3, [r7, #28]
  4011e0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4011e2:	69bb      	ldr	r3, [r7, #24]
  4011e4:	095b      	lsrs	r3, r3, #5
  4011e6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4011e8:	697a      	ldr	r2, [r7, #20]
  4011ea:	4b10      	ldr	r3, [pc, #64]	; (40122c <ioport_set_pin_level+0x68>)
  4011ec:	4413      	add	r3, r2
  4011ee:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4011f0:	613b      	str	r3, [r7, #16]

	if (level) {
  4011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4011f6:	2b00      	cmp	r3, #0
  4011f8:	d009      	beq.n	40120e <ioport_set_pin_level+0x4a>
  4011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011fc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4011fe:	68fb      	ldr	r3, [r7, #12]
  401200:	f003 031f 	and.w	r3, r3, #31
  401204:	2201      	movs	r2, #1
  401206:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401208:	693b      	ldr	r3, [r7, #16]
  40120a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  40120c:	e008      	b.n	401220 <ioport_set_pin_level+0x5c>
  40120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401210:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401212:	68bb      	ldr	r3, [r7, #8]
  401214:	f003 031f 	and.w	r3, r3, #31
  401218:	2201      	movs	r2, #1
  40121a:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40121c:	693b      	ldr	r3, [r7, #16]
  40121e:	635a      	str	r2, [r3, #52]	; 0x34
  401220:	bf00      	nop
  401222:	372c      	adds	r7, #44	; 0x2c
  401224:	46bd      	mov	sp, r7
  401226:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122a:	4770      	bx	lr
  40122c:	00200707 	.word	0x00200707

00401230 <spi_reset>:
{
  401230:	b480      	push	{r7}
  401232:	b083      	sub	sp, #12
  401234:	af00      	add	r7, sp, #0
  401236:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401238:	687b      	ldr	r3, [r7, #4]
  40123a:	2280      	movs	r2, #128	; 0x80
  40123c:	601a      	str	r2, [r3, #0]
}
  40123e:	bf00      	nop
  401240:	370c      	adds	r7, #12
  401242:	46bd      	mov	sp, r7
  401244:	f85d 7b04 	ldr.w	r7, [sp], #4
  401248:	4770      	bx	lr

0040124a <spi_enable>:
{
  40124a:	b480      	push	{r7}
  40124c:	b083      	sub	sp, #12
  40124e:	af00      	add	r7, sp, #0
  401250:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401252:	687b      	ldr	r3, [r7, #4]
  401254:	2201      	movs	r2, #1
  401256:	601a      	str	r2, [r3, #0]
}
  401258:	bf00      	nop
  40125a:	370c      	adds	r7, #12
  40125c:	46bd      	mov	sp, r7
  40125e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401262:	4770      	bx	lr

00401264 <spi_disable>:
{
  401264:	b480      	push	{r7}
  401266:	b083      	sub	sp, #12
  401268:	af00      	add	r7, sp, #0
  40126a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40126c:	687b      	ldr	r3, [r7, #4]
  40126e:	2202      	movs	r2, #2
  401270:	601a      	str	r2, [r3, #0]
}
  401272:	bf00      	nop
  401274:	370c      	adds	r7, #12
  401276:	46bd      	mov	sp, r7
  401278:	f85d 7b04 	ldr.w	r7, [sp], #4
  40127c:	4770      	bx	lr

0040127e <spi_set_master_mode>:
{
  40127e:	b480      	push	{r7}
  401280:	b083      	sub	sp, #12
  401282:	af00      	add	r7, sp, #0
  401284:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401286:	687b      	ldr	r3, [r7, #4]
  401288:	685b      	ldr	r3, [r3, #4]
  40128a:	f043 0201 	orr.w	r2, r3, #1
  40128e:	687b      	ldr	r3, [r7, #4]
  401290:	605a      	str	r2, [r3, #4]
}
  401292:	bf00      	nop
  401294:	370c      	adds	r7, #12
  401296:	46bd      	mov	sp, r7
  401298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40129c:	4770      	bx	lr

0040129e <spi_set_fixed_peripheral_select>:
{
  40129e:	b480      	push	{r7}
  4012a0:	b083      	sub	sp, #12
  4012a2:	af00      	add	r7, sp, #0
  4012a4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	685b      	ldr	r3, [r3, #4]
  4012aa:	f023 0202 	bic.w	r2, r3, #2
  4012ae:	687b      	ldr	r3, [r7, #4]
  4012b0:	605a      	str	r2, [r3, #4]
}
  4012b2:	bf00      	nop
  4012b4:	370c      	adds	r7, #12
  4012b6:	46bd      	mov	sp, r7
  4012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012bc:	4770      	bx	lr

004012be <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4012be:	b480      	push	{r7}
  4012c0:	b083      	sub	sp, #12
  4012c2:	af00      	add	r7, sp, #0
  4012c4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4012c6:	687b      	ldr	r3, [r7, #4]
  4012c8:	685b      	ldr	r3, [r3, #4]
  4012ca:	f043 0210 	orr.w	r2, r3, #16
  4012ce:	687b      	ldr	r3, [r7, #4]
  4012d0:	605a      	str	r2, [r3, #4]
}
  4012d2:	bf00      	nop
  4012d4:	370c      	adds	r7, #12
  4012d6:	46bd      	mov	sp, r7
  4012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012dc:	4770      	bx	lr

004012de <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  4012de:	b480      	push	{r7}
  4012e0:	b083      	sub	sp, #12
  4012e2:	af00      	add	r7, sp, #0
  4012e4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4012e6:	687b      	ldr	r3, [r7, #4]
  4012e8:	685b      	ldr	r3, [r3, #4]
  4012ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  4012ee:	687b      	ldr	r3, [r7, #4]
  4012f0:	605a      	str	r2, [r3, #4]
}
  4012f2:	bf00      	nop
  4012f4:	370c      	adds	r7, #12
  4012f6:	46bd      	mov	sp, r7
  4012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012fc:	4770      	bx	lr
	...

00401300 <ssd1306_hard_reset>:
{
  401300:	b580      	push	{r7, lr}
  401302:	b082      	sub	sp, #8
  401304:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  401306:	4b0f      	ldr	r3, [pc, #60]	; (401344 <ssd1306_hard_reset+0x44>)
  401308:	4798      	blx	r3
  40130a:	4602      	mov	r2, r0
  40130c:	4b0e      	ldr	r3, [pc, #56]	; (401348 <ssd1306_hard_reset+0x48>)
  40130e:	fba3 2302 	umull	r2, r3, r3, r2
  401312:	0c9a      	lsrs	r2, r3, #18
  401314:	4613      	mov	r3, r2
  401316:	009b      	lsls	r3, r3, #2
  401318:	4413      	add	r3, r2
  40131a:	005b      	lsls	r3, r3, #1
  40131c:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  40131e:	2100      	movs	r1, #0
  401320:	2051      	movs	r0, #81	; 0x51
  401322:	4b0a      	ldr	r3, [pc, #40]	; (40134c <ssd1306_hard_reset+0x4c>)
  401324:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  401326:	6878      	ldr	r0, [r7, #4]
  401328:	4b09      	ldr	r3, [pc, #36]	; (401350 <ssd1306_hard_reset+0x50>)
  40132a:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  40132c:	2101      	movs	r1, #1
  40132e:	2051      	movs	r0, #81	; 0x51
  401330:	4b06      	ldr	r3, [pc, #24]	; (40134c <ssd1306_hard_reset+0x4c>)
  401332:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  401334:	6878      	ldr	r0, [r7, #4]
  401336:	4b06      	ldr	r3, [pc, #24]	; (401350 <ssd1306_hard_reset+0x50>)
  401338:	4798      	blx	r3
}
  40133a:	bf00      	nop
  40133c:	3708      	adds	r7, #8
  40133e:	46bd      	mov	sp, r7
  401340:	bd80      	pop	{r7, pc}
  401342:	bf00      	nop
  401344:	00400fad 	.word	0x00400fad
  401348:	431bde83 	.word	0x431bde83
  40134c:	004011c5 	.word	0x004011c5
  401350:	20400001 	.word	0x20400001

00401354 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  401354:	b580      	push	{r7, lr}
  401356:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  401358:	20af      	movs	r0, #175	; 0xaf
  40135a:	4b02      	ldr	r3, [pc, #8]	; (401364 <ssd1306_display_on+0x10>)
  40135c:	4798      	blx	r3
}
  40135e:	bf00      	nop
  401360:	bd80      	pop	{r7, pc}
  401362:	bf00      	nop
  401364:	004015d5 	.word	0x004015d5

00401368 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  401368:	b580      	push	{r7, lr}
  40136a:	b082      	sub	sp, #8
  40136c:	af00      	add	r7, sp, #0
  40136e:	4603      	mov	r3, r0
  401370:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  401372:	2081      	movs	r0, #129	; 0x81
  401374:	4b05      	ldr	r3, [pc, #20]	; (40138c <ssd1306_set_contrast+0x24>)
  401376:	4798      	blx	r3
	ssd1306_write_command(contrast);
  401378:	79fb      	ldrb	r3, [r7, #7]
  40137a:	4618      	mov	r0, r3
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <ssd1306_set_contrast+0x24>)
  40137e:	4798      	blx	r3
	return contrast;
  401380:	79fb      	ldrb	r3, [r7, #7]
}
  401382:	4618      	mov	r0, r3
  401384:	3708      	adds	r7, #8
  401386:	46bd      	mov	sp, r7
  401388:	bd80      	pop	{r7, pc}
  40138a:	bf00      	nop
  40138c:	004015d5 	.word	0x004015d5

00401390 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  401390:	b580      	push	{r7, lr}
  401392:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401394:	20a6      	movs	r0, #166	; 0xa6
  401396:	4b02      	ldr	r3, [pc, #8]	; (4013a0 <ssd1306_display_invert_disable+0x10>)
  401398:	4798      	blx	r3
}
  40139a:	bf00      	nop
  40139c:	bd80      	pop	{r7, pc}
  40139e:	bf00      	nop
  4013a0:	004015d5 	.word	0x004015d5

004013a4 <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  4013a4:	b590      	push	{r4, r7, lr}
  4013a6:	b083      	sub	sp, #12
  4013a8:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  4013aa:	2101      	movs	r1, #1
  4013ac:	2051      	movs	r0, #81	; 0x51
  4013ae:	4b46      	ldr	r3, [pc, #280]	; (4014c8 <ssd1306_interface_init+0x124>)
  4013b0:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  4013b2:	2101      	movs	r1, #1
  4013b4:	2023      	movs	r0, #35	; 0x23
  4013b6:	4b44      	ldr	r3, [pc, #272]	; (4014c8 <ssd1306_interface_init+0x124>)
  4013b8:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  4013ba:	2108      	movs	r1, #8
  4013bc:	2051      	movs	r0, #81	; 0x51
  4013be:	4b43      	ldr	r3, [pc, #268]	; (4014cc <ssd1306_interface_init+0x128>)
  4013c0:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  4013c2:	2108      	movs	r1, #8
  4013c4:	2023      	movs	r0, #35	; 0x23
  4013c6:	4b41      	ldr	r3, [pc, #260]	; (4014cc <ssd1306_interface_init+0x128>)
  4013c8:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  4013ca:	2023      	movs	r0, #35	; 0x23
  4013cc:	4b40      	ldr	r3, [pc, #256]	; (4014d0 <ssd1306_interface_init+0x12c>)
  4013ce:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  4013d0:	2051      	movs	r0, #81	; 0x51
  4013d2:	4b3f      	ldr	r3, [pc, #252]	; (4014d0 <ssd1306_interface_init+0x12c>)
  4013d4:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  4013d6:	2101      	movs	r1, #1
  4013d8:	2023      	movs	r0, #35	; 0x23
  4013da:	4b3e      	ldr	r3, [pc, #248]	; (4014d4 <ssd1306_interface_init+0x130>)
  4013dc:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4013de:	2101      	movs	r1, #1
  4013e0:	2051      	movs	r0, #81	; 0x51
  4013e2:	4b3c      	ldr	r3, [pc, #240]	; (4014d4 <ssd1306_interface_init+0x130>)
  4013e4:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4013e6:	2300      	movs	r3, #0
  4013e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4013ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013f0:	4839      	ldr	r0, [pc, #228]	; (4014d8 <ssd1306_interface_init+0x134>)
  4013f2:	4c3a      	ldr	r4, [pc, #232]	; (4014dc <ssd1306_interface_init+0x138>)
  4013f4:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4013f6:	2300      	movs	r3, #0
  4013f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4013fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401400:	4835      	ldr	r0, [pc, #212]	; (4014d8 <ssd1306_interface_init+0x134>)
  401402:	4c36      	ldr	r4, [pc, #216]	; (4014dc <ssd1306_interface_init+0x138>)
  401404:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401406:	2300      	movs	r3, #0
  401408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40140c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401410:	4831      	ldr	r0, [pc, #196]	; (4014d8 <ssd1306_interface_init+0x134>)
  401412:	4c32      	ldr	r4, [pc, #200]	; (4014dc <ssd1306_interface_init+0x138>)
  401414:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401416:	2300      	movs	r3, #0
  401418:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40141c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401420:	482d      	ldr	r0, [pc, #180]	; (4014d8 <ssd1306_interface_init+0x134>)
  401422:	4c2e      	ldr	r4, [pc, #184]	; (4014dc <ssd1306_interface_init+0x138>)
  401424:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401426:	2300      	movs	r3, #0
  401428:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40142c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401430:	4829      	ldr	r0, [pc, #164]	; (4014d8 <ssd1306_interface_init+0x134>)
  401432:	4c2a      	ldr	r4, [pc, #168]	; (4014dc <ssd1306_interface_init+0x138>)
  401434:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401436:	2300      	movs	r3, #0
  401438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40143c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401440:	4825      	ldr	r0, [pc, #148]	; (4014d8 <ssd1306_interface_init+0x134>)
  401442:	4c26      	ldr	r4, [pc, #152]	; (4014dc <ssd1306_interface_init+0x138>)
  401444:	47a0      	blx	r4
		
		spi_disable(SPI0);
  401446:	4826      	ldr	r0, [pc, #152]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401448:	4b26      	ldr	r3, [pc, #152]	; (4014e4 <ssd1306_interface_init+0x140>)
  40144a:	4798      	blx	r3
		spi_reset(SPI0);
  40144c:	4824      	ldr	r0, [pc, #144]	; (4014e0 <ssd1306_interface_init+0x13c>)
  40144e:	4b26      	ldr	r3, [pc, #152]	; (4014e8 <ssd1306_interface_init+0x144>)
  401450:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  401452:	4823      	ldr	r0, [pc, #140]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401454:	4b25      	ldr	r3, [pc, #148]	; (4014ec <ssd1306_interface_init+0x148>)
  401456:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  401458:	2208      	movs	r2, #8
  40145a:	2101      	movs	r1, #1
  40145c:	4820      	ldr	r0, [pc, #128]	; (4014e0 <ssd1306_interface_init+0x13c>)
  40145e:	4b24      	ldr	r3, [pc, #144]	; (4014f0 <ssd1306_interface_init+0x14c>)
  401460:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  401462:	2200      	movs	r2, #0
  401464:	2101      	movs	r1, #1
  401466:	481e      	ldr	r0, [pc, #120]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401468:	4b22      	ldr	r3, [pc, #136]	; (4014f4 <ssd1306_interface_init+0x150>)
  40146a:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40146c:	2200      	movs	r2, #0
  40146e:	2101      	movs	r1, #1
  401470:	481b      	ldr	r0, [pc, #108]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401472:	4b21      	ldr	r3, [pc, #132]	; (4014f8 <ssd1306_interface_init+0x154>)
  401474:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  401476:	481a      	ldr	r0, [pc, #104]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401478:	4b20      	ldr	r3, [pc, #128]	; (4014fc <ssd1306_interface_init+0x158>)
  40147a:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  40147c:	2200      	movs	r2, #0
  40147e:	2101      	movs	r1, #1
  401480:	4817      	ldr	r0, [pc, #92]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401482:	4b1f      	ldr	r3, [pc, #124]	; (401500 <ssd1306_interface_init+0x15c>)
  401484:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  401486:	4816      	ldr	r0, [pc, #88]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401488:	4b1e      	ldr	r3, [pc, #120]	; (401504 <ssd1306_interface_init+0x160>)
  40148a:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  40148c:	4814      	ldr	r0, [pc, #80]	; (4014e0 <ssd1306_interface_init+0x13c>)
  40148e:	4b1e      	ldr	r3, [pc, #120]	; (401508 <ssd1306_interface_init+0x164>)
  401490:	4798      	blx	r3
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  401492:	4b1e      	ldr	r3, [pc, #120]	; (40150c <ssd1306_interface_init+0x168>)
  401494:	4798      	blx	r3
  401496:	4603      	mov	r3, r0
  401498:	4619      	mov	r1, r3
  40149a:	481d      	ldr	r0, [pc, #116]	; (401510 <ssd1306_interface_init+0x16c>)
  40149c:	4b1d      	ldr	r3, [pc, #116]	; (401514 <ssd1306_interface_init+0x170>)
  40149e:	4798      	blx	r3
  4014a0:	4603      	mov	r3, r0
  4014a2:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  4014a4:	687b      	ldr	r3, [r7, #4]
  4014a6:	b2db      	uxtb	r3, r3
  4014a8:	461a      	mov	r2, r3
  4014aa:	2101      	movs	r1, #1
  4014ac:	480c      	ldr	r0, [pc, #48]	; (4014e0 <ssd1306_interface_init+0x13c>)
  4014ae:	4b1a      	ldr	r3, [pc, #104]	; (401518 <ssd1306_interface_init+0x174>)
  4014b0:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4014b2:	480b      	ldr	r0, [pc, #44]	; (4014e0 <ssd1306_interface_init+0x13c>)
  4014b4:	4b19      	ldr	r3, [pc, #100]	; (40151c <ssd1306_interface_init+0x178>)
  4014b6:	4798      	blx	r3
		
		spi_enable(SPI0);
  4014b8:	4809      	ldr	r0, [pc, #36]	; (4014e0 <ssd1306_interface_init+0x13c>)
  4014ba:	4b19      	ldr	r3, [pc, #100]	; (401520 <ssd1306_interface_init+0x17c>)
  4014bc:	4798      	blx	r3
}
  4014be:	bf00      	nop
  4014c0:	370c      	adds	r7, #12
  4014c2:	46bd      	mov	sp, r7
  4014c4:	bd90      	pop	{r4, r7, pc}
  4014c6:	bf00      	nop
  4014c8:	0040113d 	.word	0x0040113d
  4014cc:	00401021 	.word	0x00401021
  4014d0:	00400fd5 	.word	0x00400fd5
  4014d4:	004011c5 	.word	0x004011c5
  4014d8:	400e1400 	.word	0x400e1400
  4014dc:	0040223d 	.word	0x0040223d
  4014e0:	40008000 	.word	0x40008000
  4014e4:	00401265 	.word	0x00401265
  4014e8:	00401231 	.word	0x00401231
  4014ec:	0040127f 	.word	0x0040127f
  4014f0:	00400525 	.word	0x00400525
  4014f4:	00400485 	.word	0x00400485
  4014f8:	004004d5 	.word	0x004004d5
  4014fc:	0040129f 	.word	0x0040129f
  401500:	004005cb 	.word	0x004005cb
  401504:	004012df 	.word	0x004012df
  401508:	004012bf 	.word	0x004012bf
  40150c:	00400fc1 	.word	0x00400fc1
  401510:	001e8480 	.word	0x001e8480
  401514:	00400615 	.word	0x00400615
  401518:	00400651 	.word	0x00400651
  40151c:	00400395 	.word	0x00400395
  401520:	0040124b 	.word	0x0040124b

00401524 <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  401524:	b580      	push	{r7, lr}
  401526:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  401528:	4b23      	ldr	r3, [pc, #140]	; (4015b8 <ssd1306_init+0x94>)
  40152a:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  40152c:	4b23      	ldr	r3, [pc, #140]	; (4015bc <ssd1306_init+0x98>)
  40152e:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401530:	2101      	movs	r1, #1
  401532:	2051      	movs	r0, #81	; 0x51
  401534:	4b22      	ldr	r3, [pc, #136]	; (4015c0 <ssd1306_init+0x9c>)
  401536:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401538:	20a8      	movs	r0, #168	; 0xa8
  40153a:	4b22      	ldr	r3, [pc, #136]	; (4015c4 <ssd1306_init+0xa0>)
  40153c:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  40153e:	201f      	movs	r0, #31
  401540:	4b20      	ldr	r3, [pc, #128]	; (4015c4 <ssd1306_init+0xa0>)
  401542:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  401544:	20d3      	movs	r0, #211	; 0xd3
  401546:	4b1f      	ldr	r3, [pc, #124]	; (4015c4 <ssd1306_init+0xa0>)
  401548:	4798      	blx	r3
	ssd1306_write_command(0x00);
  40154a:	2000      	movs	r0, #0
  40154c:	4b1d      	ldr	r3, [pc, #116]	; (4015c4 <ssd1306_init+0xa0>)
  40154e:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401550:	2040      	movs	r0, #64	; 0x40
  401552:	4b1c      	ldr	r3, [pc, #112]	; (4015c4 <ssd1306_init+0xa0>)
  401554:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  401556:	20a1      	movs	r0, #161	; 0xa1
  401558:	4b1a      	ldr	r3, [pc, #104]	; (4015c4 <ssd1306_init+0xa0>)
  40155a:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40155c:	20c8      	movs	r0, #200	; 0xc8
  40155e:	4b19      	ldr	r3, [pc, #100]	; (4015c4 <ssd1306_init+0xa0>)
  401560:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  401562:	20da      	movs	r0, #218	; 0xda
  401564:	4b17      	ldr	r3, [pc, #92]	; (4015c4 <ssd1306_init+0xa0>)
  401566:	4798      	blx	r3
	ssd1306_write_command(0x02);
  401568:	2002      	movs	r0, #2
  40156a:	4b16      	ldr	r3, [pc, #88]	; (4015c4 <ssd1306_init+0xa0>)
  40156c:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  40156e:	208f      	movs	r0, #143	; 0x8f
  401570:	4b15      	ldr	r3, [pc, #84]	; (4015c8 <ssd1306_init+0xa4>)
  401572:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401574:	20a4      	movs	r0, #164	; 0xa4
  401576:	4b13      	ldr	r3, [pc, #76]	; (4015c4 <ssd1306_init+0xa0>)
  401578:	4798      	blx	r3

	ssd1306_display_invert_disable();
  40157a:	4b14      	ldr	r3, [pc, #80]	; (4015cc <ssd1306_init+0xa8>)
  40157c:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40157e:	20d5      	movs	r0, #213	; 0xd5
  401580:	4b10      	ldr	r3, [pc, #64]	; (4015c4 <ssd1306_init+0xa0>)
  401582:	4798      	blx	r3
	ssd1306_write_command(0x80);
  401584:	2080      	movs	r0, #128	; 0x80
  401586:	4b0f      	ldr	r3, [pc, #60]	; (4015c4 <ssd1306_init+0xa0>)
  401588:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40158a:	208d      	movs	r0, #141	; 0x8d
  40158c:	4b0d      	ldr	r3, [pc, #52]	; (4015c4 <ssd1306_init+0xa0>)
  40158e:	4798      	blx	r3
	ssd1306_write_command(0x14);
  401590:	2014      	movs	r0, #20
  401592:	4b0c      	ldr	r3, [pc, #48]	; (4015c4 <ssd1306_init+0xa0>)
  401594:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401596:	20db      	movs	r0, #219	; 0xdb
  401598:	4b0a      	ldr	r3, [pc, #40]	; (4015c4 <ssd1306_init+0xa0>)
  40159a:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40159c:	2040      	movs	r0, #64	; 0x40
  40159e:	4b09      	ldr	r3, [pc, #36]	; (4015c4 <ssd1306_init+0xa0>)
  4015a0:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4015a2:	20d9      	movs	r0, #217	; 0xd9
  4015a4:	4b07      	ldr	r3, [pc, #28]	; (4015c4 <ssd1306_init+0xa0>)
  4015a6:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  4015a8:	20f1      	movs	r0, #241	; 0xf1
  4015aa:	4b06      	ldr	r3, [pc, #24]	; (4015c4 <ssd1306_init+0xa0>)
  4015ac:	4798      	blx	r3

	
	ssd1306_display_on();
  4015ae:	4b08      	ldr	r3, [pc, #32]	; (4015d0 <ssd1306_init+0xac>)
  4015b0:	4798      	blx	r3
}
  4015b2:	bf00      	nop
  4015b4:	bd80      	pop	{r7, pc}
  4015b6:	bf00      	nop
  4015b8:	004013a5 	.word	0x004013a5
  4015bc:	00401301 	.word	0x00401301
  4015c0:	004011c5 	.word	0x004011c5
  4015c4:	004015d5 	.word	0x004015d5
  4015c8:	00401369 	.word	0x00401369
  4015cc:	00401391 	.word	0x00401391
  4015d0:	00401355 	.word	0x00401355

004015d4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015d6:	b083      	sub	sp, #12
  4015d8:	af00      	add	r7, sp, #0
  4015da:	4603      	mov	r3, r0
  4015dc:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  4015de:	2100      	movs	r1, #0
  4015e0:	2023      	movs	r0, #35	; 0x23
  4015e2:	4b1c      	ldr	r3, [pc, #112]	; (401654 <ssd1306_write_command+0x80>)
  4015e4:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4015e6:	2101      	movs	r1, #1
  4015e8:	481b      	ldr	r0, [pc, #108]	; (401658 <ssd1306_write_command+0x84>)
  4015ea:	4b1c      	ldr	r3, [pc, #112]	; (40165c <ssd1306_write_command+0x88>)
  4015ec:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4015ee:	79fb      	ldrb	r3, [r7, #7]
  4015f0:	b299      	uxth	r1, r3
  4015f2:	2301      	movs	r3, #1
  4015f4:	2201      	movs	r2, #1
  4015f6:	4818      	ldr	r0, [pc, #96]	; (401658 <ssd1306_write_command+0x84>)
  4015f8:	4c19      	ldr	r4, [pc, #100]	; (401660 <ssd1306_write_command+0x8c>)
  4015fa:	47a0      	blx	r4
	delay_us(10);
  4015fc:	4b19      	ldr	r3, [pc, #100]	; (401664 <ssd1306_write_command+0x90>)
  4015fe:	4798      	blx	r3
  401600:	4603      	mov	r3, r0
  401602:	4619      	mov	r1, r3
  401604:	f04f 0200 	mov.w	r2, #0
  401608:	460b      	mov	r3, r1
  40160a:	4614      	mov	r4, r2
  40160c:	00a6      	lsls	r6, r4, #2
  40160e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401612:	009d      	lsls	r5, r3, #2
  401614:	462b      	mov	r3, r5
  401616:	4634      	mov	r4, r6
  401618:	185b      	adds	r3, r3, r1
  40161a:	eb44 0402 	adc.w	r4, r4, r2
  40161e:	18db      	adds	r3, r3, r3
  401620:	eb44 0404 	adc.w	r4, r4, r4
  401624:	4619      	mov	r1, r3
  401626:	4622      	mov	r2, r4
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <ssd1306_write_command+0x94>)
  40162a:	f04f 0400 	mov.w	r4, #0
  40162e:	18cd      	adds	r5, r1, r3
  401630:	eb42 0604 	adc.w	r6, r2, r4
  401634:	4628      	mov	r0, r5
  401636:	4631      	mov	r1, r6
  401638:	4c0c      	ldr	r4, [pc, #48]	; (40166c <ssd1306_write_command+0x98>)
  40163a:	4a0d      	ldr	r2, [pc, #52]	; (401670 <ssd1306_write_command+0x9c>)
  40163c:	f04f 0300 	mov.w	r3, #0
  401640:	47a0      	blx	r4
  401642:	4603      	mov	r3, r0
  401644:	460c      	mov	r4, r1
  401646:	4618      	mov	r0, r3
  401648:	4b0a      	ldr	r3, [pc, #40]	; (401674 <ssd1306_write_command+0xa0>)
  40164a:	4798      	blx	r3
}
  40164c:	bf00      	nop
  40164e:	370c      	adds	r7, #12
  401650:	46bd      	mov	sp, r7
  401652:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401654:	004011c5 	.word	0x004011c5
  401658:	40008000 	.word	0x40008000
  40165c:	004003d1 	.word	0x004003d1
  401660:	00400405 	.word	0x00400405
  401664:	00400fad 	.word	0x00400fad
  401668:	005a83df 	.word	0x005a83df
  40166c:	0040384d 	.word	0x0040384d
  401670:	005a83e0 	.word	0x005a83e0
  401674:	20400001 	.word	0x20400001

00401678 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401678:	b5f0      	push	{r4, r5, r6, r7, lr}
  40167a:	b083      	sub	sp, #12
  40167c:	af00      	add	r7, sp, #0
  40167e:	4603      	mov	r3, r0
  401680:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  401682:	2101      	movs	r1, #1
  401684:	2023      	movs	r0, #35	; 0x23
  401686:	4b1c      	ldr	r3, [pc, #112]	; (4016f8 <ssd1306_write_data+0x80>)
  401688:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40168a:	2101      	movs	r1, #1
  40168c:	481b      	ldr	r0, [pc, #108]	; (4016fc <ssd1306_write_data+0x84>)
  40168e:	4b1c      	ldr	r3, [pc, #112]	; (401700 <ssd1306_write_data+0x88>)
  401690:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  401692:	79fb      	ldrb	r3, [r7, #7]
  401694:	b299      	uxth	r1, r3
  401696:	2301      	movs	r3, #1
  401698:	2201      	movs	r2, #1
  40169a:	4818      	ldr	r0, [pc, #96]	; (4016fc <ssd1306_write_data+0x84>)
  40169c:	4c19      	ldr	r4, [pc, #100]	; (401704 <ssd1306_write_data+0x8c>)
  40169e:	47a0      	blx	r4
	delay_us(10);
  4016a0:	4b19      	ldr	r3, [pc, #100]	; (401708 <ssd1306_write_data+0x90>)
  4016a2:	4798      	blx	r3
  4016a4:	4603      	mov	r3, r0
  4016a6:	4619      	mov	r1, r3
  4016a8:	f04f 0200 	mov.w	r2, #0
  4016ac:	460b      	mov	r3, r1
  4016ae:	4614      	mov	r4, r2
  4016b0:	00a6      	lsls	r6, r4, #2
  4016b2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4016b6:	009d      	lsls	r5, r3, #2
  4016b8:	462b      	mov	r3, r5
  4016ba:	4634      	mov	r4, r6
  4016bc:	185b      	adds	r3, r3, r1
  4016be:	eb44 0402 	adc.w	r4, r4, r2
  4016c2:	18db      	adds	r3, r3, r3
  4016c4:	eb44 0404 	adc.w	r4, r4, r4
  4016c8:	4619      	mov	r1, r3
  4016ca:	4622      	mov	r2, r4
  4016cc:	4b0f      	ldr	r3, [pc, #60]	; (40170c <ssd1306_write_data+0x94>)
  4016ce:	f04f 0400 	mov.w	r4, #0
  4016d2:	18cd      	adds	r5, r1, r3
  4016d4:	eb42 0604 	adc.w	r6, r2, r4
  4016d8:	4628      	mov	r0, r5
  4016da:	4631      	mov	r1, r6
  4016dc:	4c0c      	ldr	r4, [pc, #48]	; (401710 <ssd1306_write_data+0x98>)
  4016de:	4a0d      	ldr	r2, [pc, #52]	; (401714 <ssd1306_write_data+0x9c>)
  4016e0:	f04f 0300 	mov.w	r3, #0
  4016e4:	47a0      	blx	r4
  4016e6:	4603      	mov	r3, r0
  4016e8:	460c      	mov	r4, r1
  4016ea:	4618      	mov	r0, r3
  4016ec:	4b0a      	ldr	r3, [pc, #40]	; (401718 <ssd1306_write_data+0xa0>)
  4016ee:	4798      	blx	r3
}
  4016f0:	bf00      	nop
  4016f2:	370c      	adds	r7, #12
  4016f4:	46bd      	mov	sp, r7
  4016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016f8:	004011c5 	.word	0x004011c5
  4016fc:	40008000 	.word	0x40008000
  401700:	004003d1 	.word	0x004003d1
  401704:	00400405 	.word	0x00400405
  401708:	00400fad 	.word	0x00400fad
  40170c:	005a83df 	.word	0x005a83df
  401710:	0040384d 	.word	0x0040384d
  401714:	005a83e0 	.word	0x005a83e0
  401718:	20400001 	.word	0x20400001

0040171c <osc_enable>:
{
  40171c:	b580      	push	{r7, lr}
  40171e:	b082      	sub	sp, #8
  401720:	af00      	add	r7, sp, #0
  401722:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401724:	687b      	ldr	r3, [r7, #4]
  401726:	2b07      	cmp	r3, #7
  401728:	d831      	bhi.n	40178e <osc_enable+0x72>
  40172a:	a201      	add	r2, pc, #4	; (adr r2, 401730 <osc_enable+0x14>)
  40172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401730:	0040178d 	.word	0x0040178d
  401734:	00401751 	.word	0x00401751
  401738:	00401759 	.word	0x00401759
  40173c:	00401761 	.word	0x00401761
  401740:	00401769 	.word	0x00401769
  401744:	00401771 	.word	0x00401771
  401748:	00401779 	.word	0x00401779
  40174c:	00401783 	.word	0x00401783
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401750:	2000      	movs	r0, #0
  401752:	4b11      	ldr	r3, [pc, #68]	; (401798 <osc_enable+0x7c>)
  401754:	4798      	blx	r3
		break;
  401756:	e01a      	b.n	40178e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401758:	2001      	movs	r0, #1
  40175a:	4b0f      	ldr	r3, [pc, #60]	; (401798 <osc_enable+0x7c>)
  40175c:	4798      	blx	r3
		break;
  40175e:	e016      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401760:	2000      	movs	r0, #0
  401762:	4b0e      	ldr	r3, [pc, #56]	; (40179c <osc_enable+0x80>)
  401764:	4798      	blx	r3
		break;
  401766:	e012      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401768:	2010      	movs	r0, #16
  40176a:	4b0c      	ldr	r3, [pc, #48]	; (40179c <osc_enable+0x80>)
  40176c:	4798      	blx	r3
		break;
  40176e:	e00e      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401770:	2020      	movs	r0, #32
  401772:	4b0a      	ldr	r3, [pc, #40]	; (40179c <osc_enable+0x80>)
  401774:	4798      	blx	r3
		break;
  401776:	e00a      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401778:	213e      	movs	r1, #62	; 0x3e
  40177a:	2000      	movs	r0, #0
  40177c:	4b08      	ldr	r3, [pc, #32]	; (4017a0 <osc_enable+0x84>)
  40177e:	4798      	blx	r3
		break;
  401780:	e005      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401782:	213e      	movs	r1, #62	; 0x3e
  401784:	2001      	movs	r0, #1
  401786:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <osc_enable+0x84>)
  401788:	4798      	blx	r3
		break;
  40178a:	e000      	b.n	40178e <osc_enable+0x72>
		break;
  40178c:	bf00      	nop
}
  40178e:	bf00      	nop
  401790:	3708      	adds	r7, #8
  401792:	46bd      	mov	sp, r7
  401794:	bd80      	pop	{r7, pc}
  401796:	bf00      	nop
  401798:	004026a9 	.word	0x004026a9
  40179c:	00402715 	.word	0x00402715
  4017a0:	00402785 	.word	0x00402785

004017a4 <osc_is_ready>:
{
  4017a4:	b580      	push	{r7, lr}
  4017a6:	b082      	sub	sp, #8
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017ac:	687b      	ldr	r3, [r7, #4]
  4017ae:	2b07      	cmp	r3, #7
  4017b0:	d826      	bhi.n	401800 <osc_is_ready+0x5c>
  4017b2:	a201      	add	r2, pc, #4	; (adr r2, 4017b8 <osc_is_ready+0x14>)
  4017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017b8:	004017d9 	.word	0x004017d9
  4017bc:	004017dd 	.word	0x004017dd
  4017c0:	004017dd 	.word	0x004017dd
  4017c4:	004017ef 	.word	0x004017ef
  4017c8:	004017ef 	.word	0x004017ef
  4017cc:	004017ef 	.word	0x004017ef
  4017d0:	004017ef 	.word	0x004017ef
  4017d4:	004017ef 	.word	0x004017ef
		return 1;
  4017d8:	2301      	movs	r3, #1
  4017da:	e012      	b.n	401802 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4017dc:	4b0b      	ldr	r3, [pc, #44]	; (40180c <osc_is_ready+0x68>)
  4017de:	4798      	blx	r3
  4017e0:	4603      	mov	r3, r0
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	bf14      	ite	ne
  4017e6:	2301      	movne	r3, #1
  4017e8:	2300      	moveq	r3, #0
  4017ea:	b2db      	uxtb	r3, r3
  4017ec:	e009      	b.n	401802 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4017ee:	4b08      	ldr	r3, [pc, #32]	; (401810 <osc_is_ready+0x6c>)
  4017f0:	4798      	blx	r3
  4017f2:	4603      	mov	r3, r0
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	bf14      	ite	ne
  4017f8:	2301      	movne	r3, #1
  4017fa:	2300      	moveq	r3, #0
  4017fc:	b2db      	uxtb	r3, r3
  4017fe:	e000      	b.n	401802 <osc_is_ready+0x5e>
	return 0;
  401800:	2300      	movs	r3, #0
}
  401802:	4618      	mov	r0, r3
  401804:	3708      	adds	r7, #8
  401806:	46bd      	mov	sp, r7
  401808:	bd80      	pop	{r7, pc}
  40180a:	bf00      	nop
  40180c:	004026e1 	.word	0x004026e1
  401810:	004027fd 	.word	0x004027fd

00401814 <osc_get_rate>:
{
  401814:	b480      	push	{r7}
  401816:	b083      	sub	sp, #12
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	2b07      	cmp	r3, #7
  401820:	d825      	bhi.n	40186e <osc_get_rate+0x5a>
  401822:	a201      	add	r2, pc, #4	; (adr r2, 401828 <osc_get_rate+0x14>)
  401824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401828:	00401849 	.word	0x00401849
  40182c:	0040184f 	.word	0x0040184f
  401830:	00401855 	.word	0x00401855
  401834:	0040185b 	.word	0x0040185b
  401838:	0040185f 	.word	0x0040185f
  40183c:	00401863 	.word	0x00401863
  401840:	00401867 	.word	0x00401867
  401844:	0040186b 	.word	0x0040186b
		return OSC_SLCK_32K_RC_HZ;
  401848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40184c:	e010      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401852:	e00d      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401858:	e00a      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40185a:	4b08      	ldr	r3, [pc, #32]	; (40187c <osc_get_rate+0x68>)
  40185c:	e008      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40185e:	4b08      	ldr	r3, [pc, #32]	; (401880 <osc_get_rate+0x6c>)
  401860:	e006      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401862:	4b08      	ldr	r3, [pc, #32]	; (401884 <osc_get_rate+0x70>)
  401864:	e004      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <osc_get_rate+0x70>)
  401868:	e002      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <osc_get_rate+0x70>)
  40186c:	e000      	b.n	401870 <osc_get_rate+0x5c>
	return 0;
  40186e:	2300      	movs	r3, #0
}
  401870:	4618      	mov	r0, r3
  401872:	370c      	adds	r7, #12
  401874:	46bd      	mov	sp, r7
  401876:	f85d 7b04 	ldr.w	r7, [sp], #4
  40187a:	4770      	bx	lr
  40187c:	003d0900 	.word	0x003d0900
  401880:	007a1200 	.word	0x007a1200
  401884:	00b71b00 	.word	0x00b71b00

00401888 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401888:	b580      	push	{r7, lr}
  40188a:	b082      	sub	sp, #8
  40188c:	af00      	add	r7, sp, #0
  40188e:	4603      	mov	r3, r0
  401890:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401892:	bf00      	nop
  401894:	79fb      	ldrb	r3, [r7, #7]
  401896:	4618      	mov	r0, r3
  401898:	4b05      	ldr	r3, [pc, #20]	; (4018b0 <osc_wait_ready+0x28>)
  40189a:	4798      	blx	r3
  40189c:	4603      	mov	r3, r0
  40189e:	f083 0301 	eor.w	r3, r3, #1
  4018a2:	b2db      	uxtb	r3, r3
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d1f5      	bne.n	401894 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4018a8:	bf00      	nop
  4018aa:	3708      	adds	r7, #8
  4018ac:	46bd      	mov	sp, r7
  4018ae:	bd80      	pop	{r7, pc}
  4018b0:	004017a5 	.word	0x004017a5

004018b4 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4018b4:	b580      	push	{r7, lr}
  4018b6:	b086      	sub	sp, #24
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	60f8      	str	r0, [r7, #12]
  4018bc:	607a      	str	r2, [r7, #4]
  4018be:	603b      	str	r3, [r7, #0]
  4018c0:	460b      	mov	r3, r1
  4018c2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4018c4:	687b      	ldr	r3, [r7, #4]
  4018c6:	2b00      	cmp	r3, #0
  4018c8:	d107      	bne.n	4018da <pll_config_init+0x26>
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	d104      	bne.n	4018da <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4018d0:	68fb      	ldr	r3, [r7, #12]
  4018d2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4018d6:	601a      	str	r2, [r3, #0]
  4018d8:	e019      	b.n	40190e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4018da:	7afb      	ldrb	r3, [r7, #11]
  4018dc:	4618      	mov	r0, r3
  4018de:	4b0e      	ldr	r3, [pc, #56]	; (401918 <pll_config_init+0x64>)
  4018e0:	4798      	blx	r3
  4018e2:	4602      	mov	r2, r0
  4018e4:	687b      	ldr	r3, [r7, #4]
  4018e6:	fbb2 f3f3 	udiv	r3, r2, r3
  4018ea:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4018ec:	697b      	ldr	r3, [r7, #20]
  4018ee:	683a      	ldr	r2, [r7, #0]
  4018f0:	fb02 f303 	mul.w	r3, r2, r3
  4018f4:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4018f6:	683b      	ldr	r3, [r7, #0]
  4018f8:	3b01      	subs	r3, #1
  4018fa:	041a      	lsls	r2, r3, #16
  4018fc:	4b07      	ldr	r3, [pc, #28]	; (40191c <pll_config_init+0x68>)
  4018fe:	4013      	ands	r3, r2
  401900:	687a      	ldr	r2, [r7, #4]
  401902:	b2d2      	uxtb	r2, r2
  401904:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401906:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40190a:	68fb      	ldr	r3, [r7, #12]
  40190c:	601a      	str	r2, [r3, #0]
	}
}
  40190e:	bf00      	nop
  401910:	3718      	adds	r7, #24
  401912:	46bd      	mov	sp, r7
  401914:	bd80      	pop	{r7, pc}
  401916:	bf00      	nop
  401918:	00401815 	.word	0x00401815
  40191c:	07ff0000 	.word	0x07ff0000

00401920 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401920:	b580      	push	{r7, lr}
  401922:	b082      	sub	sp, #8
  401924:	af00      	add	r7, sp, #0
  401926:	6078      	str	r0, [r7, #4]
  401928:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40192a:	683b      	ldr	r3, [r7, #0]
  40192c:	2b00      	cmp	r3, #0
  40192e:	d108      	bne.n	401942 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401930:	4b09      	ldr	r3, [pc, #36]	; (401958 <pll_enable+0x38>)
  401932:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401934:	4a09      	ldr	r2, [pc, #36]	; (40195c <pll_enable+0x3c>)
  401936:	687b      	ldr	r3, [r7, #4]
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40193e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401940:	e005      	b.n	40194e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  401942:	4a06      	ldr	r2, [pc, #24]	; (40195c <pll_enable+0x3c>)
  401944:	687b      	ldr	r3, [r7, #4]
  401946:	681b      	ldr	r3, [r3, #0]
  401948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40194c:	61d3      	str	r3, [r2, #28]
}
  40194e:	bf00      	nop
  401950:	3708      	adds	r7, #8
  401952:	46bd      	mov	sp, r7
  401954:	bd80      	pop	{r7, pc}
  401956:	bf00      	nop
  401958:	00402819 	.word	0x00402819
  40195c:	400e0600 	.word	0x400e0600

00401960 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401960:	b580      	push	{r7, lr}
  401962:	b082      	sub	sp, #8
  401964:	af00      	add	r7, sp, #0
  401966:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401968:	687b      	ldr	r3, [r7, #4]
  40196a:	2b00      	cmp	r3, #0
  40196c:	d103      	bne.n	401976 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  40196e:	4b05      	ldr	r3, [pc, #20]	; (401984 <pll_is_locked+0x24>)
  401970:	4798      	blx	r3
  401972:	4603      	mov	r3, r0
  401974:	e002      	b.n	40197c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  401976:	4b04      	ldr	r3, [pc, #16]	; (401988 <pll_is_locked+0x28>)
  401978:	4798      	blx	r3
  40197a:	4603      	mov	r3, r0
	}
}
  40197c:	4618      	mov	r0, r3
  40197e:	3708      	adds	r7, #8
  401980:	46bd      	mov	sp, r7
  401982:	bd80      	pop	{r7, pc}
  401984:	00402835 	.word	0x00402835
  401988:	00402851 	.word	0x00402851

0040198c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40198c:	b580      	push	{r7, lr}
  40198e:	b082      	sub	sp, #8
  401990:	af00      	add	r7, sp, #0
  401992:	4603      	mov	r3, r0
  401994:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401996:	79fb      	ldrb	r3, [r7, #7]
  401998:	3b03      	subs	r3, #3
  40199a:	2b04      	cmp	r3, #4
  40199c:	d808      	bhi.n	4019b0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40199e:	79fb      	ldrb	r3, [r7, #7]
  4019a0:	4618      	mov	r0, r3
  4019a2:	4b06      	ldr	r3, [pc, #24]	; (4019bc <pll_enable_source+0x30>)
  4019a4:	4798      	blx	r3
		osc_wait_ready(e_src);
  4019a6:	79fb      	ldrb	r3, [r7, #7]
  4019a8:	4618      	mov	r0, r3
  4019aa:	4b05      	ldr	r3, [pc, #20]	; (4019c0 <pll_enable_source+0x34>)
  4019ac:	4798      	blx	r3
		break;
  4019ae:	e000      	b.n	4019b2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4019b0:	bf00      	nop
	}
}
  4019b2:	bf00      	nop
  4019b4:	3708      	adds	r7, #8
  4019b6:	46bd      	mov	sp, r7
  4019b8:	bd80      	pop	{r7, pc}
  4019ba:	bf00      	nop
  4019bc:	0040171d 	.word	0x0040171d
  4019c0:	00401889 	.word	0x00401889

004019c4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4019c4:	b580      	push	{r7, lr}
  4019c6:	b082      	sub	sp, #8
  4019c8:	af00      	add	r7, sp, #0
  4019ca:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4019cc:	bf00      	nop
  4019ce:	6878      	ldr	r0, [r7, #4]
  4019d0:	4b04      	ldr	r3, [pc, #16]	; (4019e4 <pll_wait_for_lock+0x20>)
  4019d2:	4798      	blx	r3
  4019d4:	4603      	mov	r3, r0
  4019d6:	2b00      	cmp	r3, #0
  4019d8:	d0f9      	beq.n	4019ce <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4019da:	2300      	movs	r3, #0
}
  4019dc:	4618      	mov	r0, r3
  4019de:	3708      	adds	r7, #8
  4019e0:	46bd      	mov	sp, r7
  4019e2:	bd80      	pop	{r7, pc}
  4019e4:	00401961 	.word	0x00401961

004019e8 <sysclk_get_main_hz>:
{
  4019e8:	b580      	push	{r7, lr}
  4019ea:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4019ec:	2006      	movs	r0, #6
  4019ee:	4b05      	ldr	r3, [pc, #20]	; (401a04 <sysclk_get_main_hz+0x1c>)
  4019f0:	4798      	blx	r3
  4019f2:	4602      	mov	r2, r0
  4019f4:	4613      	mov	r3, r2
  4019f6:	009b      	lsls	r3, r3, #2
  4019f8:	4413      	add	r3, r2
  4019fa:	009a      	lsls	r2, r3, #2
  4019fc:	4413      	add	r3, r2
}
  4019fe:	4618      	mov	r0, r3
  401a00:	bd80      	pop	{r7, pc}
  401a02:	bf00      	nop
  401a04:	00401815 	.word	0x00401815

00401a08 <sysclk_get_cpu_hz>:
{
  401a08:	b580      	push	{r7, lr}
  401a0a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a0c:	4b02      	ldr	r3, [pc, #8]	; (401a18 <sysclk_get_cpu_hz+0x10>)
  401a0e:	4798      	blx	r3
  401a10:	4603      	mov	r3, r0
}
  401a12:	4618      	mov	r0, r3
  401a14:	bd80      	pop	{r7, pc}
  401a16:	bf00      	nop
  401a18:	004019e9 	.word	0x004019e9

00401a1c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401a1c:	b590      	push	{r4, r7, lr}
  401a1e:	b083      	sub	sp, #12
  401a20:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401a22:	4813      	ldr	r0, [pc, #76]	; (401a70 <sysclk_init+0x54>)
  401a24:	4b13      	ldr	r3, [pc, #76]	; (401a74 <sysclk_init+0x58>)
  401a26:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401a28:	2006      	movs	r0, #6
  401a2a:	4b13      	ldr	r3, [pc, #76]	; (401a78 <sysclk_init+0x5c>)
  401a2c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401a2e:	1d38      	adds	r0, r7, #4
  401a30:	2319      	movs	r3, #25
  401a32:	2201      	movs	r2, #1
  401a34:	2106      	movs	r1, #6
  401a36:	4c11      	ldr	r4, [pc, #68]	; (401a7c <sysclk_init+0x60>)
  401a38:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401a3a:	1d3b      	adds	r3, r7, #4
  401a3c:	2100      	movs	r1, #0
  401a3e:	4618      	mov	r0, r3
  401a40:	4b0f      	ldr	r3, [pc, #60]	; (401a80 <sysclk_init+0x64>)
  401a42:	4798      	blx	r3
		pll_wait_for_lock(0);
  401a44:	2000      	movs	r0, #0
  401a46:	4b0f      	ldr	r3, [pc, #60]	; (401a84 <sysclk_init+0x68>)
  401a48:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401a4a:	2002      	movs	r0, #2
  401a4c:	4b0e      	ldr	r3, [pc, #56]	; (401a88 <sysclk_init+0x6c>)
  401a4e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401a50:	2000      	movs	r0, #0
  401a52:	4b0e      	ldr	r3, [pc, #56]	; (401a8c <sysclk_init+0x70>)
  401a54:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401a56:	4b0e      	ldr	r3, [pc, #56]	; (401a90 <sysclk_init+0x74>)
  401a58:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401a5a:	4b0e      	ldr	r3, [pc, #56]	; (401a94 <sysclk_init+0x78>)
  401a5c:	4798      	blx	r3
  401a5e:	4603      	mov	r3, r0
  401a60:	4618      	mov	r0, r3
  401a62:	4b04      	ldr	r3, [pc, #16]	; (401a74 <sysclk_init+0x58>)
  401a64:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401a66:	bf00      	nop
  401a68:	370c      	adds	r7, #12
  401a6a:	46bd      	mov	sp, r7
  401a6c:	bd90      	pop	{r4, r7, pc}
  401a6e:	bf00      	nop
  401a70:	11e1a300 	.word	0x11e1a300
  401a74:	00402b99 	.word	0x00402b99
  401a78:	0040198d 	.word	0x0040198d
  401a7c:	004018b5 	.word	0x004018b5
  401a80:	00401921 	.word	0x00401921
  401a84:	004019c5 	.word	0x004019c5
  401a88:	004025a9 	.word	0x004025a9
  401a8c:	00402625 	.word	0x00402625
  401a90:	00402a31 	.word	0x00402a31
  401a94:	00401a09 	.word	0x00401a09

00401a98 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401a98:	b480      	push	{r7}
  401a9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401aa0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401aa4:	4b09      	ldr	r3, [pc, #36]	; (401acc <SCB_EnableICache+0x34>)
  401aa6:	2200      	movs	r2, #0
  401aa8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401aac:	4a07      	ldr	r2, [pc, #28]	; (401acc <SCB_EnableICache+0x34>)
  401aae:	4b07      	ldr	r3, [pc, #28]	; (401acc <SCB_EnableICache+0x34>)
  401ab0:	695b      	ldr	r3, [r3, #20]
  401ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401ab6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401abc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  401ac0:	bf00      	nop
  401ac2:	46bd      	mov	sp, r7
  401ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac8:	4770      	bx	lr
  401aca:	bf00      	nop
  401acc:	e000ed00 	.word	0xe000ed00

00401ad0 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  401ad0:	b480      	push	{r7}
  401ad2:	b08b      	sub	sp, #44	; 0x2c
  401ad4:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401ad6:	4b26      	ldr	r3, [pc, #152]	; (401b70 <SCB_EnableDCache+0xa0>)
  401ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401adc:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  401ade:	69fb      	ldr	r3, [r7, #28]
  401ae0:	0b5b      	lsrs	r3, r3, #13
  401ae2:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401ae6:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401ae8:	69fb      	ldr	r3, [r7, #28]
  401aea:	f003 0307 	and.w	r3, r3, #7
  401aee:	3304      	adds	r3, #4
  401af0:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  401af2:	69fb      	ldr	r3, [r7, #28]
  401af4:	08db      	lsrs	r3, r3, #3
  401af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401afa:	617b      	str	r3, [r7, #20]
  401afc:	697b      	ldr	r3, [r7, #20]
  401afe:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401b00:	68bb      	ldr	r3, [r7, #8]
  401b02:	fab3 f383 	clz	r3, r3
  401b06:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401b08:	687b      	ldr	r3, [r7, #4]
  401b0a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401b0c:	f003 031f 	and.w	r3, r3, #31
  401b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  401b12:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  401b16:	697b      	ldr	r3, [r7, #20]
  401b18:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401b1a:	6a3a      	ldr	r2, [r7, #32]
  401b1c:	693b      	ldr	r3, [r7, #16]
  401b1e:	fa02 f303 	lsl.w	r3, r2, r3
  401b22:	4619      	mov	r1, r3
  401b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401b26:	69bb      	ldr	r3, [r7, #24]
  401b28:	fa02 f303 	lsl.w	r3, r2, r3
  401b2c:	430b      	orrs	r3, r1
  401b2e:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  401b30:	4a0f      	ldr	r2, [pc, #60]	; (401b70 <SCB_EnableDCache+0xa0>)
  401b32:	68fb      	ldr	r3, [r7, #12]
  401b34:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401b38:	6a3b      	ldr	r3, [r7, #32]
  401b3a:	1e5a      	subs	r2, r3, #1
  401b3c:	623a      	str	r2, [r7, #32]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d1eb      	bne.n	401b1a <SCB_EnableDCache+0x4a>
        } while(sets--);
  401b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b44:	1e5a      	subs	r2, r3, #1
  401b46:	627a      	str	r2, [r7, #36]	; 0x24
  401b48:	2b00      	cmp	r3, #0
  401b4a:	d1e4      	bne.n	401b16 <SCB_EnableDCache+0x46>
  401b4c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401b50:	4a07      	ldr	r2, [pc, #28]	; (401b70 <SCB_EnableDCache+0xa0>)
  401b52:	4b07      	ldr	r3, [pc, #28]	; (401b70 <SCB_EnableDCache+0xa0>)
  401b54:	695b      	ldr	r3, [r3, #20]
  401b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401b5a:	6153      	str	r3, [r2, #20]
  401b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b60:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  401b64:	bf00      	nop
  401b66:	372c      	adds	r7, #44	; 0x2c
  401b68:	46bd      	mov	sp, r7
  401b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6e:	4770      	bx	lr
  401b70:	e000ed00 	.word	0xe000ed00

00401b74 <sysclk_enable_peripheral_clock>:
{
  401b74:	b580      	push	{r7, lr}
  401b76:	b082      	sub	sp, #8
  401b78:	af00      	add	r7, sp, #0
  401b7a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401b7c:	6878      	ldr	r0, [r7, #4]
  401b7e:	4b03      	ldr	r3, [pc, #12]	; (401b8c <sysclk_enable_peripheral_clock+0x18>)
  401b80:	4798      	blx	r3
}
  401b82:	bf00      	nop
  401b84:	3708      	adds	r7, #8
  401b86:	46bd      	mov	sp, r7
  401b88:	bd80      	pop	{r7, pc}
  401b8a:	bf00      	nop
  401b8c:	0040286d 	.word	0x0040286d

00401b90 <ioport_init>:
{
  401b90:	b580      	push	{r7, lr}
  401b92:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401b94:	200a      	movs	r0, #10
  401b96:	4b08      	ldr	r3, [pc, #32]	; (401bb8 <ioport_init+0x28>)
  401b98:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401b9a:	200b      	movs	r0, #11
  401b9c:	4b06      	ldr	r3, [pc, #24]	; (401bb8 <ioport_init+0x28>)
  401b9e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  401ba0:	200c      	movs	r0, #12
  401ba2:	4b05      	ldr	r3, [pc, #20]	; (401bb8 <ioport_init+0x28>)
  401ba4:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  401ba6:	2010      	movs	r0, #16
  401ba8:	4b03      	ldr	r3, [pc, #12]	; (401bb8 <ioport_init+0x28>)
  401baa:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401bac:	2011      	movs	r0, #17
  401bae:	4b02      	ldr	r3, [pc, #8]	; (401bb8 <ioport_init+0x28>)
  401bb0:	4798      	blx	r3
}
  401bb2:	bf00      	nop
  401bb4:	bd80      	pop	{r7, pc}
  401bb6:	bf00      	nop
  401bb8:	00401b75 	.word	0x00401b75

00401bbc <ioport_set_pin_mode>:
{
  401bbc:	b480      	push	{r7}
  401bbe:	b08d      	sub	sp, #52	; 0x34
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	6078      	str	r0, [r7, #4]
  401bc4:	6039      	str	r1, [r7, #0]
  401bc6:	687b      	ldr	r3, [r7, #4]
  401bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  401bca:	683b      	ldr	r3, [r7, #0]
  401bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  401bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bd0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bd4:	095a      	lsrs	r2, r3, #5
  401bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bd8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401bda:	6a3b      	ldr	r3, [r7, #32]
  401bdc:	f003 031f 	and.w	r3, r3, #31
  401be0:	2101      	movs	r1, #1
  401be2:	fa01 f303 	lsl.w	r3, r1, r3
  401be6:	61fa      	str	r2, [r7, #28]
  401be8:	61bb      	str	r3, [r7, #24]
  401bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401bec:	617b      	str	r3, [r7, #20]
  401bee:	69fb      	ldr	r3, [r7, #28]
  401bf0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bf2:	693a      	ldr	r2, [r7, #16]
  401bf4:	4b37      	ldr	r3, [pc, #220]	; (401cd4 <ioport_set_pin_mode+0x118>)
  401bf6:	4413      	add	r3, r2
  401bf8:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401bfa:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401bfc:	697b      	ldr	r3, [r7, #20]
  401bfe:	f003 0308 	and.w	r3, r3, #8
  401c02:	2b00      	cmp	r3, #0
  401c04:	d003      	beq.n	401c0e <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401c06:	68fb      	ldr	r3, [r7, #12]
  401c08:	69ba      	ldr	r2, [r7, #24]
  401c0a:	665a      	str	r2, [r3, #100]	; 0x64
  401c0c:	e002      	b.n	401c14 <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  401c14:	697b      	ldr	r3, [r7, #20]
  401c16:	f003 0310 	and.w	r3, r3, #16
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d004      	beq.n	401c28 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401c1e:	68fb      	ldr	r3, [r7, #12]
  401c20:	69ba      	ldr	r2, [r7, #24]
  401c22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401c26:	e003      	b.n	401c30 <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  401c28:	68fb      	ldr	r3, [r7, #12]
  401c2a:	69ba      	ldr	r2, [r7, #24]
  401c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401c30:	697b      	ldr	r3, [r7, #20]
  401c32:	f003 0320 	and.w	r3, r3, #32
  401c36:	2b00      	cmp	r3, #0
  401c38:	d003      	beq.n	401c42 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401c3a:	68fb      	ldr	r3, [r7, #12]
  401c3c:	69ba      	ldr	r2, [r7, #24]
  401c3e:	651a      	str	r2, [r3, #80]	; 0x50
  401c40:	e002      	b.n	401c48 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	69ba      	ldr	r2, [r7, #24]
  401c46:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401c48:	697b      	ldr	r3, [r7, #20]
  401c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401c4e:	2b00      	cmp	r3, #0
  401c50:	d003      	beq.n	401c5a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  401c52:	68fb      	ldr	r3, [r7, #12]
  401c54:	69ba      	ldr	r2, [r7, #24]
  401c56:	621a      	str	r2, [r3, #32]
  401c58:	e002      	b.n	401c60 <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	69ba      	ldr	r2, [r7, #24]
  401c5e:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401c60:	697b      	ldr	r3, [r7, #20]
  401c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c66:	2b00      	cmp	r3, #0
  401c68:	d004      	beq.n	401c74 <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  401c6a:	68fb      	ldr	r3, [r7, #12]
  401c6c:	69ba      	ldr	r2, [r7, #24]
  401c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401c72:	e003      	b.n	401c7c <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401c74:	68fb      	ldr	r3, [r7, #12]
  401c76:	69ba      	ldr	r2, [r7, #24]
  401c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401c7c:	697b      	ldr	r3, [r7, #20]
  401c7e:	f003 0301 	and.w	r3, r3, #1
  401c82:	2b00      	cmp	r3, #0
  401c84:	d006      	beq.n	401c94 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401c86:	68fb      	ldr	r3, [r7, #12]
  401c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c8a:	69bb      	ldr	r3, [r7, #24]
  401c8c:	431a      	orrs	r2, r3
  401c8e:	68fb      	ldr	r3, [r7, #12]
  401c90:	671a      	str	r2, [r3, #112]	; 0x70
  401c92:	e006      	b.n	401ca2 <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401c94:	68fb      	ldr	r3, [r7, #12]
  401c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c98:	69bb      	ldr	r3, [r7, #24]
  401c9a:	43db      	mvns	r3, r3
  401c9c:	401a      	ands	r2, r3
  401c9e:	68fb      	ldr	r3, [r7, #12]
  401ca0:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401ca2:	697b      	ldr	r3, [r7, #20]
  401ca4:	f003 0302 	and.w	r3, r3, #2
  401ca8:	2b00      	cmp	r3, #0
  401caa:	d006      	beq.n	401cba <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401cb0:	69bb      	ldr	r3, [r7, #24]
  401cb2:	431a      	orrs	r2, r3
  401cb4:	68fb      	ldr	r3, [r7, #12]
  401cb6:	675a      	str	r2, [r3, #116]	; 0x74
}
  401cb8:	e006      	b.n	401cc8 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401cbe:	69bb      	ldr	r3, [r7, #24]
  401cc0:	43db      	mvns	r3, r3
  401cc2:	401a      	ands	r2, r3
  401cc4:	68fb      	ldr	r3, [r7, #12]
  401cc6:	675a      	str	r2, [r3, #116]	; 0x74
  401cc8:	bf00      	nop
  401cca:	3734      	adds	r7, #52	; 0x34
  401ccc:	46bd      	mov	sp, r7
  401cce:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cd2:	4770      	bx	lr
  401cd4:	00200707 	.word	0x00200707

00401cd8 <ioport_set_pin_dir>:
{
  401cd8:	b480      	push	{r7}
  401cda:	b08d      	sub	sp, #52	; 0x34
  401cdc:	af00      	add	r7, sp, #0
  401cde:	6078      	str	r0, [r7, #4]
  401ce0:	460b      	mov	r3, r1
  401ce2:	70fb      	strb	r3, [r7, #3]
  401ce4:	687b      	ldr	r3, [r7, #4]
  401ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ce8:	78fb      	ldrb	r3, [r7, #3]
  401cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cf0:	627b      	str	r3, [r7, #36]	; 0x24
  401cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401cf4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401cf6:	6a3b      	ldr	r3, [r7, #32]
  401cf8:	095b      	lsrs	r3, r3, #5
  401cfa:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401cfc:	69fa      	ldr	r2, [r7, #28]
  401cfe:	4b17      	ldr	r3, [pc, #92]	; (401d5c <ioport_set_pin_dir+0x84>)
  401d00:	4413      	add	r3, r2
  401d02:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401d04:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401d0a:	2b01      	cmp	r3, #1
  401d0c:	d109      	bne.n	401d22 <ioport_set_pin_dir+0x4a>
  401d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d10:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401d12:	697b      	ldr	r3, [r7, #20]
  401d14:	f003 031f 	and.w	r3, r3, #31
  401d18:	2201      	movs	r2, #1
  401d1a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d1c:	69bb      	ldr	r3, [r7, #24]
  401d1e:	611a      	str	r2, [r3, #16]
  401d20:	e00c      	b.n	401d3c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401d26:	2b00      	cmp	r3, #0
  401d28:	d108      	bne.n	401d3c <ioport_set_pin_dir+0x64>
  401d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d2c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401d2e:	693b      	ldr	r3, [r7, #16]
  401d30:	f003 031f 	and.w	r3, r3, #31
  401d34:	2201      	movs	r2, #1
  401d36:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d38:	69bb      	ldr	r3, [r7, #24]
  401d3a:	615a      	str	r2, [r3, #20]
  401d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d3e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401d40:	68fb      	ldr	r3, [r7, #12]
  401d42:	f003 031f 	and.w	r3, r3, #31
  401d46:	2201      	movs	r2, #1
  401d48:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d4a:	69bb      	ldr	r3, [r7, #24]
  401d4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401d50:	bf00      	nop
  401d52:	3734      	adds	r7, #52	; 0x34
  401d54:	46bd      	mov	sp, r7
  401d56:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d5a:	4770      	bx	lr
  401d5c:	00200707 	.word	0x00200707

00401d60 <ioport_set_pin_level>:
{
  401d60:	b480      	push	{r7}
  401d62:	b08b      	sub	sp, #44	; 0x2c
  401d64:	af00      	add	r7, sp, #0
  401d66:	6078      	str	r0, [r7, #4]
  401d68:	460b      	mov	r3, r1
  401d6a:	70fb      	strb	r3, [r7, #3]
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	627b      	str	r3, [r7, #36]	; 0x24
  401d70:	78fb      	ldrb	r3, [r7, #3]
  401d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d78:	61fb      	str	r3, [r7, #28]
  401d7a:	69fb      	ldr	r3, [r7, #28]
  401d7c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401d7e:	69bb      	ldr	r3, [r7, #24]
  401d80:	095b      	lsrs	r3, r3, #5
  401d82:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d84:	697a      	ldr	r2, [r7, #20]
  401d86:	4b10      	ldr	r3, [pc, #64]	; (401dc8 <ioport_set_pin_level+0x68>)
  401d88:	4413      	add	r3, r2
  401d8a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401d8c:	613b      	str	r3, [r7, #16]
	if (level) {
  401d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401d92:	2b00      	cmp	r3, #0
  401d94:	d009      	beq.n	401daa <ioport_set_pin_level+0x4a>
  401d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d98:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401d9a:	68fb      	ldr	r3, [r7, #12]
  401d9c:	f003 031f 	and.w	r3, r3, #31
  401da0:	2201      	movs	r2, #1
  401da2:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401da4:	693b      	ldr	r3, [r7, #16]
  401da6:	631a      	str	r2, [r3, #48]	; 0x30
}
  401da8:	e008      	b.n	401dbc <ioport_set_pin_level+0x5c>
  401daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401dac:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401dae:	68bb      	ldr	r3, [r7, #8]
  401db0:	f003 031f 	and.w	r3, r3, #31
  401db4:	2201      	movs	r2, #1
  401db6:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401db8:	693b      	ldr	r3, [r7, #16]
  401dba:	635a      	str	r2, [r3, #52]	; 0x34
  401dbc:	bf00      	nop
  401dbe:	372c      	adds	r7, #44	; 0x2c
  401dc0:	46bd      	mov	sp, r7
  401dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dc6:	4770      	bx	lr
  401dc8:	00200707 	.word	0x00200707

00401dcc <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401dcc:	b480      	push	{r7}
  401dce:	b08d      	sub	sp, #52	; 0x34
  401dd0:	af00      	add	r7, sp, #0
  401dd2:	6078      	str	r0, [r7, #4]
  401dd4:	460b      	mov	r3, r1
  401dd6:	70fb      	strb	r3, [r7, #3]
  401dd8:	687b      	ldr	r3, [r7, #4]
  401dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ddc:	78fb      	ldrb	r3, [r7, #3]
  401dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401de4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401de8:	095a      	lsrs	r2, r3, #5
  401dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401dec:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401dee:	6a3b      	ldr	r3, [r7, #32]
  401df0:	f003 031f 	and.w	r3, r3, #31
  401df4:	2101      	movs	r1, #1
  401df6:	fa01 f303 	lsl.w	r3, r1, r3
  401dfa:	61fa      	str	r2, [r7, #28]
  401dfc:	61bb      	str	r3, [r7, #24]
  401dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401e02:	75fb      	strb	r3, [r7, #23]
  401e04:	69fb      	ldr	r3, [r7, #28]
  401e06:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401e08:	693a      	ldr	r2, [r7, #16]
  401e0a:	4b23      	ldr	r3, [pc, #140]	; (401e98 <ioport_set_pin_sense_mode+0xcc>)
  401e0c:	4413      	add	r3, r2
  401e0e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401e10:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401e12:	7dfb      	ldrb	r3, [r7, #23]
  401e14:	3b01      	subs	r3, #1
  401e16:	2b03      	cmp	r3, #3
  401e18:	d82e      	bhi.n	401e78 <ioport_set_pin_sense_mode+0xac>
  401e1a:	a201      	add	r2, pc, #4	; (adr r2, 401e20 <ioport_set_pin_sense_mode+0x54>)
  401e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401e20:	00401e55 	.word	0x00401e55
  401e24:	00401e67 	.word	0x00401e67
  401e28:	00401e31 	.word	0x00401e31
  401e2c:	00401e43 	.word	0x00401e43
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401e30:	68fb      	ldr	r3, [r7, #12]
  401e32:	69ba      	ldr	r2, [r7, #24]
  401e34:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401e38:	68fb      	ldr	r3, [r7, #12]
  401e3a:	69ba      	ldr	r2, [r7, #24]
  401e3c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401e40:	e01f      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	69ba      	ldr	r2, [r7, #24]
  401e46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	69ba      	ldr	r2, [r7, #24]
  401e4e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401e52:	e016      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401e54:	68fb      	ldr	r3, [r7, #12]
  401e56:	69ba      	ldr	r2, [r7, #24]
  401e58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401e5c:	68fb      	ldr	r3, [r7, #12]
  401e5e:	69ba      	ldr	r2, [r7, #24]
  401e60:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401e64:	e00d      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401e66:	68fb      	ldr	r3, [r7, #12]
  401e68:	69ba      	ldr	r2, [r7, #24]
  401e6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401e6e:	68fb      	ldr	r3, [r7, #12]
  401e70:	69ba      	ldr	r2, [r7, #24]
  401e72:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401e76:	e004      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401e78:	68fb      	ldr	r3, [r7, #12]
  401e7a:	69ba      	ldr	r2, [r7, #24]
  401e7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401e80:	e003      	b.n	401e8a <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401e82:	68fb      	ldr	r3, [r7, #12]
  401e84:	69ba      	ldr	r2, [r7, #24]
  401e86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401e8a:	bf00      	nop
  401e8c:	3734      	adds	r7, #52	; 0x34
  401e8e:	46bd      	mov	sp, r7
  401e90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e94:	4770      	bx	lr
  401e96:	bf00      	nop
  401e98:	00200707 	.word	0x00200707

00401e9c <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401e9c:	b480      	push	{r7}
  401e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401ea0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ea4:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401ea8:	4a0c      	ldr	r2, [pc, #48]	; (401edc <tcm_disable+0x40>)
  401eaa:	4b0c      	ldr	r3, [pc, #48]	; (401edc <tcm_disable+0x40>)
  401eac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401eb0:	f023 0301 	bic.w	r3, r3, #1
  401eb4:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401eb8:	4a08      	ldr	r2, [pc, #32]	; (401edc <tcm_disable+0x40>)
  401eba:	4b08      	ldr	r3, [pc, #32]	; (401edc <tcm_disable+0x40>)
  401ebc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401ec0:	f023 0301 	bic.w	r3, r3, #1
  401ec4:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401ec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ecc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401ed0:	bf00      	nop
  401ed2:	46bd      	mov	sp, r7
  401ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ed8:	4770      	bx	lr
  401eda:	bf00      	nop
  401edc:	e000ed00 	.word	0xe000ed00

00401ee0 <board_init>:
#endif

void board_init(void)
{
  401ee0:	b580      	push	{r7, lr}
  401ee2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401ee4:	4b13      	ldr	r3, [pc, #76]	; (401f34 <board_init+0x54>)
  401ee6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401eea:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401eec:	4b12      	ldr	r3, [pc, #72]	; (401f38 <board_init+0x58>)
  401eee:	4798      	blx	r3
	SCB_EnableDCache();
  401ef0:	4b12      	ldr	r3, [pc, #72]	; (401f3c <board_init+0x5c>)
  401ef2:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ef4:	4b12      	ldr	r3, [pc, #72]	; (401f40 <board_init+0x60>)
  401ef6:	4a13      	ldr	r2, [pc, #76]	; (401f44 <board_init+0x64>)
  401ef8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401efa:	4b11      	ldr	r3, [pc, #68]	; (401f40 <board_init+0x60>)
  401efc:	4a12      	ldr	r2, [pc, #72]	; (401f48 <board_init+0x68>)
  401efe:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401f00:	4b12      	ldr	r3, [pc, #72]	; (401f4c <board_init+0x6c>)
  401f02:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401f04:	4b12      	ldr	r3, [pc, #72]	; (401f50 <board_init+0x70>)
  401f06:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401f08:	2101      	movs	r1, #1
  401f0a:	2048      	movs	r0, #72	; 0x48
  401f0c:	4b11      	ldr	r3, [pc, #68]	; (401f54 <board_init+0x74>)
  401f0e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401f10:	2101      	movs	r1, #1
  401f12:	2048      	movs	r0, #72	; 0x48
  401f14:	4b10      	ldr	r3, [pc, #64]	; (401f58 <board_init+0x78>)
  401f16:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401f18:	2100      	movs	r1, #0
  401f1a:	200b      	movs	r0, #11
  401f1c:	4b0d      	ldr	r3, [pc, #52]	; (401f54 <board_init+0x74>)
  401f1e:	4798      	blx	r3
  401f20:	2188      	movs	r1, #136	; 0x88
  401f22:	200b      	movs	r0, #11
  401f24:	4b0d      	ldr	r3, [pc, #52]	; (401f5c <board_init+0x7c>)
  401f26:	4798      	blx	r3
  401f28:	2102      	movs	r1, #2
  401f2a:	200b      	movs	r0, #11
  401f2c:	4b0c      	ldr	r3, [pc, #48]	; (401f60 <board_init+0x80>)
  401f2e:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401f30:	bf00      	nop
  401f32:	bd80      	pop	{r7, pc}
  401f34:	400e1850 	.word	0x400e1850
  401f38:	00401a99 	.word	0x00401a99
  401f3c:	00401ad1 	.word	0x00401ad1
  401f40:	400e0c00 	.word	0x400e0c00
  401f44:	5a00080c 	.word	0x5a00080c
  401f48:	5a00070c 	.word	0x5a00070c
  401f4c:	00401e9d 	.word	0x00401e9d
  401f50:	00401b91 	.word	0x00401b91
  401f54:	00401cd9 	.word	0x00401cd9
  401f58:	00401d61 	.word	0x00401d61
  401f5c:	00401bbd 	.word	0x00401bbd
  401f60:	00401dcd 	.word	0x00401dcd

00401f64 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401f64:	b480      	push	{r7}
  401f66:	b085      	sub	sp, #20
  401f68:	af00      	add	r7, sp, #0
  401f6a:	60f8      	str	r0, [r7, #12]
  401f6c:	60b9      	str	r1, [r7, #8]
  401f6e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401f70:	687b      	ldr	r3, [r7, #4]
  401f72:	2b00      	cmp	r3, #0
  401f74:	d003      	beq.n	401f7e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401f76:	68fb      	ldr	r3, [r7, #12]
  401f78:	68ba      	ldr	r2, [r7, #8]
  401f7a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401f7c:	e002      	b.n	401f84 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401f7e:	68fb      	ldr	r3, [r7, #12]
  401f80:	68ba      	ldr	r2, [r7, #8]
  401f82:	661a      	str	r2, [r3, #96]	; 0x60
}
  401f84:	bf00      	nop
  401f86:	3714      	adds	r7, #20
  401f88:	46bd      	mov	sp, r7
  401f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f8e:	4770      	bx	lr

00401f90 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401f90:	b480      	push	{r7}
  401f92:	b085      	sub	sp, #20
  401f94:	af00      	add	r7, sp, #0
  401f96:	60f8      	str	r0, [r7, #12]
  401f98:	60b9      	str	r1, [r7, #8]
  401f9a:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401f9c:	68fb      	ldr	r3, [r7, #12]
  401f9e:	68ba      	ldr	r2, [r7, #8]
  401fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401fa4:	687b      	ldr	r3, [r7, #4]
  401fa6:	005b      	lsls	r3, r3, #1
  401fa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401fac:	fbb2 f3f3 	udiv	r3, r2, r3
  401fb0:	3b01      	subs	r3, #1
  401fb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401fb6:	68fb      	ldr	r3, [r7, #12]
  401fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401fbc:	bf00      	nop
  401fbe:	3714      	adds	r7, #20
  401fc0:	46bd      	mov	sp, r7
  401fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fc6:	4770      	bx	lr

00401fc8 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401fc8:	b480      	push	{r7}
  401fca:	b083      	sub	sp, #12
  401fcc:	af00      	add	r7, sp, #0
  401fce:	6078      	str	r0, [r7, #4]
  401fd0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401fd2:	687b      	ldr	r3, [r7, #4]
  401fd4:	683a      	ldr	r2, [r7, #0]
  401fd6:	631a      	str	r2, [r3, #48]	; 0x30
}
  401fd8:	bf00      	nop
  401fda:	370c      	adds	r7, #12
  401fdc:	46bd      	mov	sp, r7
  401fde:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fe2:	4770      	bx	lr

00401fe4 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401fe4:	b480      	push	{r7}
  401fe6:	b083      	sub	sp, #12
  401fe8:	af00      	add	r7, sp, #0
  401fea:	6078      	str	r0, [r7, #4]
  401fec:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401fee:	687b      	ldr	r3, [r7, #4]
  401ff0:	683a      	ldr	r2, [r7, #0]
  401ff2:	635a      	str	r2, [r3, #52]	; 0x34
}
  401ff4:	bf00      	nop
  401ff6:	370c      	adds	r7, #12
  401ff8:	46bd      	mov	sp, r7
  401ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ffe:	4770      	bx	lr

00402000 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402000:	b480      	push	{r7}
  402002:	b087      	sub	sp, #28
  402004:	af00      	add	r7, sp, #0
  402006:	60f8      	str	r0, [r7, #12]
  402008:	60b9      	str	r1, [r7, #8]
  40200a:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40200c:	68bb      	ldr	r3, [r7, #8]
  40200e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402012:	d003      	beq.n	40201c <pio_get+0x1c>
  402014:	68bb      	ldr	r3, [r7, #8]
  402016:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40201a:	d103      	bne.n	402024 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  40201c:	68fb      	ldr	r3, [r7, #12]
  40201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402020:	617b      	str	r3, [r7, #20]
  402022:	e002      	b.n	40202a <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  402024:	68fb      	ldr	r3, [r7, #12]
  402026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402028:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  40202a:	697a      	ldr	r2, [r7, #20]
  40202c:	687b      	ldr	r3, [r7, #4]
  40202e:	4013      	ands	r3, r2
  402030:	2b00      	cmp	r3, #0
  402032:	d101      	bne.n	402038 <pio_get+0x38>
		return 0;
  402034:	2300      	movs	r3, #0
  402036:	e000      	b.n	40203a <pio_get+0x3a>
	} else {
		return 1;
  402038:	2301      	movs	r3, #1
	}
}
  40203a:	4618      	mov	r0, r3
  40203c:	371c      	adds	r7, #28
  40203e:	46bd      	mov	sp, r7
  402040:	f85d 7b04 	ldr.w	r7, [sp], #4
  402044:	4770      	bx	lr

00402046 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402046:	b480      	push	{r7}
  402048:	b087      	sub	sp, #28
  40204a:	af00      	add	r7, sp, #0
  40204c:	60f8      	str	r0, [r7, #12]
  40204e:	60b9      	str	r1, [r7, #8]
  402050:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402052:	68fb      	ldr	r3, [r7, #12]
  402054:	687a      	ldr	r2, [r7, #4]
  402056:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402058:	68bb      	ldr	r3, [r7, #8]
  40205a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40205e:	d04a      	beq.n	4020f6 <pio_set_peripheral+0xb0>
  402060:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402064:	d808      	bhi.n	402078 <pio_set_peripheral+0x32>
  402066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40206a:	d016      	beq.n	40209a <pio_set_peripheral+0x54>
  40206c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402070:	d02c      	beq.n	4020cc <pio_set_peripheral+0x86>
  402072:	2b00      	cmp	r3, #0
  402074:	d069      	beq.n	40214a <pio_set_peripheral+0x104>
  402076:	e064      	b.n	402142 <pio_set_peripheral+0xfc>
  402078:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40207c:	d065      	beq.n	40214a <pio_set_peripheral+0x104>
  40207e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402082:	d803      	bhi.n	40208c <pio_set_peripheral+0x46>
  402084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402088:	d04a      	beq.n	402120 <pio_set_peripheral+0xda>
  40208a:	e05a      	b.n	402142 <pio_set_peripheral+0xfc>
  40208c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402090:	d05b      	beq.n	40214a <pio_set_peripheral+0x104>
  402092:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402096:	d058      	beq.n	40214a <pio_set_peripheral+0x104>
  402098:	e053      	b.n	402142 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40209a:	68fb      	ldr	r3, [r7, #12]
  40209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40209e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4020a0:	68fb      	ldr	r3, [r7, #12]
  4020a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4020a4:	687b      	ldr	r3, [r7, #4]
  4020a6:	43d9      	mvns	r1, r3
  4020a8:	697b      	ldr	r3, [r7, #20]
  4020aa:	400b      	ands	r3, r1
  4020ac:	401a      	ands	r2, r3
  4020ae:	68fb      	ldr	r3, [r7, #12]
  4020b0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4020b2:	68fb      	ldr	r3, [r7, #12]
  4020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4020b6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4020b8:	68fb      	ldr	r3, [r7, #12]
  4020ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4020bc:	687b      	ldr	r3, [r7, #4]
  4020be:	43d9      	mvns	r1, r3
  4020c0:	697b      	ldr	r3, [r7, #20]
  4020c2:	400b      	ands	r3, r1
  4020c4:	401a      	ands	r2, r3
  4020c6:	68fb      	ldr	r3, [r7, #12]
  4020c8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4020ca:	e03a      	b.n	402142 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4020cc:	68fb      	ldr	r3, [r7, #12]
  4020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4020d0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4020d2:	687a      	ldr	r2, [r7, #4]
  4020d4:	697b      	ldr	r3, [r7, #20]
  4020d6:	431a      	orrs	r2, r3
  4020d8:	68fb      	ldr	r3, [r7, #12]
  4020da:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4020dc:	68fb      	ldr	r3, [r7, #12]
  4020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4020e0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4020e2:	68fb      	ldr	r3, [r7, #12]
  4020e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4020e6:	687b      	ldr	r3, [r7, #4]
  4020e8:	43d9      	mvns	r1, r3
  4020ea:	697b      	ldr	r3, [r7, #20]
  4020ec:	400b      	ands	r3, r1
  4020ee:	401a      	ands	r2, r3
  4020f0:	68fb      	ldr	r3, [r7, #12]
  4020f2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4020f4:	e025      	b.n	402142 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4020f6:	68fb      	ldr	r3, [r7, #12]
  4020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4020fa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4020fc:	68fb      	ldr	r3, [r7, #12]
  4020fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402100:	687b      	ldr	r3, [r7, #4]
  402102:	43d9      	mvns	r1, r3
  402104:	697b      	ldr	r3, [r7, #20]
  402106:	400b      	ands	r3, r1
  402108:	401a      	ands	r2, r3
  40210a:	68fb      	ldr	r3, [r7, #12]
  40210c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40210e:	68fb      	ldr	r3, [r7, #12]
  402110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402112:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402114:	687a      	ldr	r2, [r7, #4]
  402116:	697b      	ldr	r3, [r7, #20]
  402118:	431a      	orrs	r2, r3
  40211a:	68fb      	ldr	r3, [r7, #12]
  40211c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40211e:	e010      	b.n	402142 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402120:	68fb      	ldr	r3, [r7, #12]
  402122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402124:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402126:	687a      	ldr	r2, [r7, #4]
  402128:	697b      	ldr	r3, [r7, #20]
  40212a:	431a      	orrs	r2, r3
  40212c:	68fb      	ldr	r3, [r7, #12]
  40212e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402130:	68fb      	ldr	r3, [r7, #12]
  402132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402134:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402136:	687a      	ldr	r2, [r7, #4]
  402138:	697b      	ldr	r3, [r7, #20]
  40213a:	431a      	orrs	r2, r3
  40213c:	68fb      	ldr	r3, [r7, #12]
  40213e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402140:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402142:	68fb      	ldr	r3, [r7, #12]
  402144:	687a      	ldr	r2, [r7, #4]
  402146:	605a      	str	r2, [r3, #4]
  402148:	e000      	b.n	40214c <pio_set_peripheral+0x106>
		return;
  40214a:	bf00      	nop
}
  40214c:	371c      	adds	r7, #28
  40214e:	46bd      	mov	sp, r7
  402150:	f85d 7b04 	ldr.w	r7, [sp], #4
  402154:	4770      	bx	lr
	...

00402158 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  402158:	b580      	push	{r7, lr}
  40215a:	b084      	sub	sp, #16
  40215c:	af00      	add	r7, sp, #0
  40215e:	60f8      	str	r0, [r7, #12]
  402160:	60b9      	str	r1, [r7, #8]
  402162:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402164:	68b9      	ldr	r1, [r7, #8]
  402166:	68f8      	ldr	r0, [r7, #12]
  402168:	4b19      	ldr	r3, [pc, #100]	; (4021d0 <pio_set_input+0x78>)
  40216a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40216c:	687b      	ldr	r3, [r7, #4]
  40216e:	f003 0301 	and.w	r3, r3, #1
  402172:	461a      	mov	r2, r3
  402174:	68b9      	ldr	r1, [r7, #8]
  402176:	68f8      	ldr	r0, [r7, #12]
  402178:	4b16      	ldr	r3, [pc, #88]	; (4021d4 <pio_set_input+0x7c>)
  40217a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40217c:	687b      	ldr	r3, [r7, #4]
  40217e:	f003 030a 	and.w	r3, r3, #10
  402182:	2b00      	cmp	r3, #0
  402184:	d003      	beq.n	40218e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  402186:	68fb      	ldr	r3, [r7, #12]
  402188:	68ba      	ldr	r2, [r7, #8]
  40218a:	621a      	str	r2, [r3, #32]
  40218c:	e002      	b.n	402194 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40218e:	68fb      	ldr	r3, [r7, #12]
  402190:	68ba      	ldr	r2, [r7, #8]
  402192:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402194:	687b      	ldr	r3, [r7, #4]
  402196:	f003 0302 	and.w	r3, r3, #2
  40219a:	2b00      	cmp	r3, #0
  40219c:	d004      	beq.n	4021a8 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40219e:	68fb      	ldr	r3, [r7, #12]
  4021a0:	68ba      	ldr	r2, [r7, #8]
  4021a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4021a6:	e008      	b.n	4021ba <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	f003 0308 	and.w	r3, r3, #8
  4021ae:	2b00      	cmp	r3, #0
  4021b0:	d003      	beq.n	4021ba <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4021b2:	68fb      	ldr	r3, [r7, #12]
  4021b4:	68ba      	ldr	r2, [r7, #8]
  4021b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4021ba:	68fb      	ldr	r3, [r7, #12]
  4021bc:	68ba      	ldr	r2, [r7, #8]
  4021be:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4021c0:	68fb      	ldr	r3, [r7, #12]
  4021c2:	68ba      	ldr	r2, [r7, #8]
  4021c4:	601a      	str	r2, [r3, #0]
}
  4021c6:	bf00      	nop
  4021c8:	3710      	adds	r7, #16
  4021ca:	46bd      	mov	sp, r7
  4021cc:	bd80      	pop	{r7, pc}
  4021ce:	bf00      	nop
  4021d0:	00402391 	.word	0x00402391
  4021d4:	00401f65 	.word	0x00401f65

004021d8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4021d8:	b580      	push	{r7, lr}
  4021da:	b084      	sub	sp, #16
  4021dc:	af00      	add	r7, sp, #0
  4021de:	60f8      	str	r0, [r7, #12]
  4021e0:	60b9      	str	r1, [r7, #8]
  4021e2:	607a      	str	r2, [r7, #4]
  4021e4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4021e6:	68b9      	ldr	r1, [r7, #8]
  4021e8:	68f8      	ldr	r0, [r7, #12]
  4021ea:	4b12      	ldr	r3, [pc, #72]	; (402234 <pio_set_output+0x5c>)
  4021ec:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4021ee:	69ba      	ldr	r2, [r7, #24]
  4021f0:	68b9      	ldr	r1, [r7, #8]
  4021f2:	68f8      	ldr	r0, [r7, #12]
  4021f4:	4b10      	ldr	r3, [pc, #64]	; (402238 <pio_set_output+0x60>)
  4021f6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4021f8:	683b      	ldr	r3, [r7, #0]
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d003      	beq.n	402206 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4021fe:	68fb      	ldr	r3, [r7, #12]
  402200:	68ba      	ldr	r2, [r7, #8]
  402202:	651a      	str	r2, [r3, #80]	; 0x50
  402204:	e002      	b.n	40220c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402206:	68fb      	ldr	r3, [r7, #12]
  402208:	68ba      	ldr	r2, [r7, #8]
  40220a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	2b00      	cmp	r3, #0
  402210:	d003      	beq.n	40221a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  402212:	68fb      	ldr	r3, [r7, #12]
  402214:	68ba      	ldr	r2, [r7, #8]
  402216:	631a      	str	r2, [r3, #48]	; 0x30
  402218:	e002      	b.n	402220 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40221a:	68fb      	ldr	r3, [r7, #12]
  40221c:	68ba      	ldr	r2, [r7, #8]
  40221e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402220:	68fb      	ldr	r3, [r7, #12]
  402222:	68ba      	ldr	r2, [r7, #8]
  402224:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  402226:	68fb      	ldr	r3, [r7, #12]
  402228:	68ba      	ldr	r2, [r7, #8]
  40222a:	601a      	str	r2, [r3, #0]
}
  40222c:	bf00      	nop
  40222e:	3710      	adds	r7, #16
  402230:	46bd      	mov	sp, r7
  402232:	bd80      	pop	{r7, pc}
  402234:	00402391 	.word	0x00402391
  402238:	00401f65 	.word	0x00401f65

0040223c <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  40223c:	b590      	push	{r4, r7, lr}
  40223e:	b087      	sub	sp, #28
  402240:	af02      	add	r7, sp, #8
  402242:	60f8      	str	r0, [r7, #12]
  402244:	60b9      	str	r1, [r7, #8]
  402246:	607a      	str	r2, [r7, #4]
  402248:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40224a:	68bb      	ldr	r3, [r7, #8]
  40224c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402250:	d016      	beq.n	402280 <pio_configure+0x44>
  402252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402256:	d809      	bhi.n	40226c <pio_configure+0x30>
  402258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40225c:	d010      	beq.n	402280 <pio_configure+0x44>
  40225e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402262:	d00d      	beq.n	402280 <pio_configure+0x44>
  402264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402268:	d00a      	beq.n	402280 <pio_configure+0x44>
  40226a:	e03d      	b.n	4022e8 <pio_configure+0xac>
  40226c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402270:	d01a      	beq.n	4022a8 <pio_configure+0x6c>
  402272:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402276:	d017      	beq.n	4022a8 <pio_configure+0x6c>
  402278:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40227c:	d00e      	beq.n	40229c <pio_configure+0x60>
  40227e:	e033      	b.n	4022e8 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402280:	687a      	ldr	r2, [r7, #4]
  402282:	68b9      	ldr	r1, [r7, #8]
  402284:	68f8      	ldr	r0, [r7, #12]
  402286:	4b1c      	ldr	r3, [pc, #112]	; (4022f8 <pio_configure+0xbc>)
  402288:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40228a:	683b      	ldr	r3, [r7, #0]
  40228c:	f003 0301 	and.w	r3, r3, #1
  402290:	461a      	mov	r2, r3
  402292:	6879      	ldr	r1, [r7, #4]
  402294:	68f8      	ldr	r0, [r7, #12]
  402296:	4b19      	ldr	r3, [pc, #100]	; (4022fc <pio_configure+0xc0>)
  402298:	4798      	blx	r3
		break;
  40229a:	e027      	b.n	4022ec <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40229c:	683a      	ldr	r2, [r7, #0]
  40229e:	6879      	ldr	r1, [r7, #4]
  4022a0:	68f8      	ldr	r0, [r7, #12]
  4022a2:	4b17      	ldr	r3, [pc, #92]	; (402300 <pio_configure+0xc4>)
  4022a4:	4798      	blx	r3
		break;
  4022a6:	e021      	b.n	4022ec <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022a8:	68bb      	ldr	r3, [r7, #8]
  4022aa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4022ae:	bf0c      	ite	eq
  4022b0:	2301      	moveq	r3, #1
  4022b2:	2300      	movne	r3, #0
  4022b4:	b2db      	uxtb	r3, r3
  4022b6:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4022b8:	683b      	ldr	r3, [r7, #0]
  4022ba:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022be:	2b00      	cmp	r3, #0
  4022c0:	bf14      	ite	ne
  4022c2:	2301      	movne	r3, #1
  4022c4:	2300      	moveq	r3, #0
  4022c6:	b2db      	uxtb	r3, r3
  4022c8:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  4022ca:	683b      	ldr	r3, [r7, #0]
  4022cc:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022d0:	2b00      	cmp	r3, #0
  4022d2:	bf14      	ite	ne
  4022d4:	2301      	movne	r3, #1
  4022d6:	2300      	moveq	r3, #0
  4022d8:	b2db      	uxtb	r3, r3
  4022da:	9300      	str	r3, [sp, #0]
  4022dc:	460b      	mov	r3, r1
  4022de:	6879      	ldr	r1, [r7, #4]
  4022e0:	68f8      	ldr	r0, [r7, #12]
  4022e2:	4c08      	ldr	r4, [pc, #32]	; (402304 <pio_configure+0xc8>)
  4022e4:	47a0      	blx	r4
		break;
  4022e6:	e001      	b.n	4022ec <pio_configure+0xb0>

	default:
		return 0;
  4022e8:	2300      	movs	r3, #0
  4022ea:	e000      	b.n	4022ee <pio_configure+0xb2>
	}

	return 1;
  4022ec:	2301      	movs	r3, #1
}
  4022ee:	4618      	mov	r0, r3
  4022f0:	3714      	adds	r7, #20
  4022f2:	46bd      	mov	sp, r7
  4022f4:	bd90      	pop	{r4, r7, pc}
  4022f6:	bf00      	nop
  4022f8:	00402047 	.word	0x00402047
  4022fc:	00401f65 	.word	0x00401f65
  402300:	00402159 	.word	0x00402159
  402304:	004021d9 	.word	0x004021d9

00402308 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402308:	b480      	push	{r7}
  40230a:	b085      	sub	sp, #20
  40230c:	af00      	add	r7, sp, #0
  40230e:	60f8      	str	r0, [r7, #12]
  402310:	60b9      	str	r1, [r7, #8]
  402312:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402314:	687b      	ldr	r3, [r7, #4]
  402316:	f003 0310 	and.w	r3, r3, #16
  40231a:	2b00      	cmp	r3, #0
  40231c:	d020      	beq.n	402360 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40231e:	68fb      	ldr	r3, [r7, #12]
  402320:	68ba      	ldr	r2, [r7, #8]
  402322:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402326:	687b      	ldr	r3, [r7, #4]
  402328:	f003 0320 	and.w	r3, r3, #32
  40232c:	2b00      	cmp	r3, #0
  40232e:	d004      	beq.n	40233a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402330:	68fb      	ldr	r3, [r7, #12]
  402332:	68ba      	ldr	r2, [r7, #8]
  402334:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402338:	e003      	b.n	402342 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40233a:	68fb      	ldr	r3, [r7, #12]
  40233c:	68ba      	ldr	r2, [r7, #8]
  40233e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402348:	2b00      	cmp	r3, #0
  40234a:	d004      	beq.n	402356 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40234c:	68fb      	ldr	r3, [r7, #12]
  40234e:	68ba      	ldr	r2, [r7, #8]
  402350:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402354:	e008      	b.n	402368 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402356:	68fb      	ldr	r3, [r7, #12]
  402358:	68ba      	ldr	r2, [r7, #8]
  40235a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40235e:	e003      	b.n	402368 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  402360:	68fb      	ldr	r3, [r7, #12]
  402362:	68ba      	ldr	r2, [r7, #8]
  402364:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  402368:	bf00      	nop
  40236a:	3714      	adds	r7, #20
  40236c:	46bd      	mov	sp, r7
  40236e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402372:	4770      	bx	lr

00402374 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402374:	b480      	push	{r7}
  402376:	b083      	sub	sp, #12
  402378:	af00      	add	r7, sp, #0
  40237a:	6078      	str	r0, [r7, #4]
  40237c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40237e:	687b      	ldr	r3, [r7, #4]
  402380:	683a      	ldr	r2, [r7, #0]
  402382:	641a      	str	r2, [r3, #64]	; 0x40
}
  402384:	bf00      	nop
  402386:	370c      	adds	r7, #12
  402388:	46bd      	mov	sp, r7
  40238a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40238e:	4770      	bx	lr

00402390 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402390:	b480      	push	{r7}
  402392:	b083      	sub	sp, #12
  402394:	af00      	add	r7, sp, #0
  402396:	6078      	str	r0, [r7, #4]
  402398:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40239a:	687b      	ldr	r3, [r7, #4]
  40239c:	683a      	ldr	r2, [r7, #0]
  40239e:	645a      	str	r2, [r3, #68]	; 0x44
}
  4023a0:	bf00      	nop
  4023a2:	370c      	adds	r7, #12
  4023a4:	46bd      	mov	sp, r7
  4023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023aa:	4770      	bx	lr

004023ac <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4023ac:	b480      	push	{r7}
  4023ae:	b083      	sub	sp, #12
  4023b0:	af00      	add	r7, sp, #0
  4023b2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4023b4:	687b      	ldr	r3, [r7, #4]
  4023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4023b8:	4618      	mov	r0, r3
  4023ba:	370c      	adds	r7, #12
  4023bc:	46bd      	mov	sp, r7
  4023be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023c2:	4770      	bx	lr

004023c4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4023c4:	b480      	push	{r7}
  4023c6:	b083      	sub	sp, #12
  4023c8:	af00      	add	r7, sp, #0
  4023ca:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4023cc:	687b      	ldr	r3, [r7, #4]
  4023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4023d0:	4618      	mov	r0, r3
  4023d2:	370c      	adds	r7, #12
  4023d4:	46bd      	mov	sp, r7
  4023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023da:	4770      	bx	lr

004023dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4023dc:	b580      	push	{r7, lr}
  4023de:	b084      	sub	sp, #16
  4023e0:	af00      	add	r7, sp, #0
  4023e2:	6078      	str	r0, [r7, #4]
  4023e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4023e6:	6878      	ldr	r0, [r7, #4]
  4023e8:	4b26      	ldr	r3, [pc, #152]	; (402484 <pio_handler_process+0xa8>)
  4023ea:	4798      	blx	r3
  4023ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4023ee:	6878      	ldr	r0, [r7, #4]
  4023f0:	4b25      	ldr	r3, [pc, #148]	; (402488 <pio_handler_process+0xac>)
  4023f2:	4798      	blx	r3
  4023f4:	4602      	mov	r2, r0
  4023f6:	68fb      	ldr	r3, [r7, #12]
  4023f8:	4013      	ands	r3, r2
  4023fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4023fc:	68fb      	ldr	r3, [r7, #12]
  4023fe:	2b00      	cmp	r3, #0
  402400:	d03c      	beq.n	40247c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402402:	2300      	movs	r3, #0
  402404:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402406:	e034      	b.n	402472 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402408:	4a20      	ldr	r2, [pc, #128]	; (40248c <pio_handler_process+0xb0>)
  40240a:	68bb      	ldr	r3, [r7, #8]
  40240c:	011b      	lsls	r3, r3, #4
  40240e:	4413      	add	r3, r2
  402410:	681a      	ldr	r2, [r3, #0]
  402412:	683b      	ldr	r3, [r7, #0]
  402414:	429a      	cmp	r2, r3
  402416:	d126      	bne.n	402466 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402418:	4a1c      	ldr	r2, [pc, #112]	; (40248c <pio_handler_process+0xb0>)
  40241a:	68bb      	ldr	r3, [r7, #8]
  40241c:	011b      	lsls	r3, r3, #4
  40241e:	4413      	add	r3, r2
  402420:	3304      	adds	r3, #4
  402422:	681a      	ldr	r2, [r3, #0]
  402424:	68fb      	ldr	r3, [r7, #12]
  402426:	4013      	ands	r3, r2
  402428:	2b00      	cmp	r3, #0
  40242a:	d01c      	beq.n	402466 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40242c:	4a17      	ldr	r2, [pc, #92]	; (40248c <pio_handler_process+0xb0>)
  40242e:	68bb      	ldr	r3, [r7, #8]
  402430:	011b      	lsls	r3, r3, #4
  402432:	4413      	add	r3, r2
  402434:	330c      	adds	r3, #12
  402436:	681b      	ldr	r3, [r3, #0]
  402438:	4914      	ldr	r1, [pc, #80]	; (40248c <pio_handler_process+0xb0>)
  40243a:	68ba      	ldr	r2, [r7, #8]
  40243c:	0112      	lsls	r2, r2, #4
  40243e:	440a      	add	r2, r1
  402440:	6810      	ldr	r0, [r2, #0]
  402442:	4912      	ldr	r1, [pc, #72]	; (40248c <pio_handler_process+0xb0>)
  402444:	68ba      	ldr	r2, [r7, #8]
  402446:	0112      	lsls	r2, r2, #4
  402448:	440a      	add	r2, r1
  40244a:	3204      	adds	r2, #4
  40244c:	6812      	ldr	r2, [r2, #0]
  40244e:	4611      	mov	r1, r2
  402450:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402452:	4a0e      	ldr	r2, [pc, #56]	; (40248c <pio_handler_process+0xb0>)
  402454:	68bb      	ldr	r3, [r7, #8]
  402456:	011b      	lsls	r3, r3, #4
  402458:	4413      	add	r3, r2
  40245a:	3304      	adds	r3, #4
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	43db      	mvns	r3, r3
  402460:	68fa      	ldr	r2, [r7, #12]
  402462:	4013      	ands	r3, r2
  402464:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  402466:	68bb      	ldr	r3, [r7, #8]
  402468:	3301      	adds	r3, #1
  40246a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40246c:	68bb      	ldr	r3, [r7, #8]
  40246e:	2b06      	cmp	r3, #6
  402470:	d803      	bhi.n	40247a <pio_handler_process+0x9e>
		while (status != 0) {
  402472:	68fb      	ldr	r3, [r7, #12]
  402474:	2b00      	cmp	r3, #0
  402476:	d1c7      	bne.n	402408 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402478:	e000      	b.n	40247c <pio_handler_process+0xa0>
				break;
  40247a:	bf00      	nop
}
  40247c:	bf00      	nop
  40247e:	3710      	adds	r7, #16
  402480:	46bd      	mov	sp, r7
  402482:	bd80      	pop	{r7, pc}
  402484:	004023ad 	.word	0x004023ad
  402488:	004023c5 	.word	0x004023c5
  40248c:	20400bf4 	.word	0x20400bf4

00402490 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402490:	b580      	push	{r7, lr}
  402492:	b086      	sub	sp, #24
  402494:	af00      	add	r7, sp, #0
  402496:	60f8      	str	r0, [r7, #12]
  402498:	60b9      	str	r1, [r7, #8]
  40249a:	607a      	str	r2, [r7, #4]
  40249c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40249e:	4b21      	ldr	r3, [pc, #132]	; (402524 <pio_handler_set+0x94>)
  4024a0:	681b      	ldr	r3, [r3, #0]
  4024a2:	2b06      	cmp	r3, #6
  4024a4:	d901      	bls.n	4024aa <pio_handler_set+0x1a>
		return 1;
  4024a6:	2301      	movs	r3, #1
  4024a8:	e038      	b.n	40251c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4024aa:	2300      	movs	r3, #0
  4024ac:	75fb      	strb	r3, [r7, #23]
  4024ae:	e011      	b.n	4024d4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4024b0:	7dfb      	ldrb	r3, [r7, #23]
  4024b2:	011b      	lsls	r3, r3, #4
  4024b4:	4a1c      	ldr	r2, [pc, #112]	; (402528 <pio_handler_set+0x98>)
  4024b6:	4413      	add	r3, r2
  4024b8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4024ba:	693b      	ldr	r3, [r7, #16]
  4024bc:	681a      	ldr	r2, [r3, #0]
  4024be:	68bb      	ldr	r3, [r7, #8]
  4024c0:	429a      	cmp	r2, r3
  4024c2:	d104      	bne.n	4024ce <pio_handler_set+0x3e>
  4024c4:	693b      	ldr	r3, [r7, #16]
  4024c6:	685a      	ldr	r2, [r3, #4]
  4024c8:	687b      	ldr	r3, [r7, #4]
  4024ca:	429a      	cmp	r2, r3
  4024cc:	d008      	beq.n	4024e0 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4024ce:	7dfb      	ldrb	r3, [r7, #23]
  4024d0:	3301      	adds	r3, #1
  4024d2:	75fb      	strb	r3, [r7, #23]
  4024d4:	7dfa      	ldrb	r2, [r7, #23]
  4024d6:	4b13      	ldr	r3, [pc, #76]	; (402524 <pio_handler_set+0x94>)
  4024d8:	681b      	ldr	r3, [r3, #0]
  4024da:	429a      	cmp	r2, r3
  4024dc:	d9e8      	bls.n	4024b0 <pio_handler_set+0x20>
  4024de:	e000      	b.n	4024e2 <pio_handler_set+0x52>
			break;
  4024e0:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4024e2:	693b      	ldr	r3, [r7, #16]
  4024e4:	68ba      	ldr	r2, [r7, #8]
  4024e6:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4024e8:	693b      	ldr	r3, [r7, #16]
  4024ea:	687a      	ldr	r2, [r7, #4]
  4024ec:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4024ee:	693b      	ldr	r3, [r7, #16]
  4024f0:	683a      	ldr	r2, [r7, #0]
  4024f2:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4024f4:	693b      	ldr	r3, [r7, #16]
  4024f6:	6a3a      	ldr	r2, [r7, #32]
  4024f8:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4024fa:	7dfa      	ldrb	r2, [r7, #23]
  4024fc:	4b09      	ldr	r3, [pc, #36]	; (402524 <pio_handler_set+0x94>)
  4024fe:	681b      	ldr	r3, [r3, #0]
  402500:	3301      	adds	r3, #1
  402502:	429a      	cmp	r2, r3
  402504:	d104      	bne.n	402510 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  402506:	4b07      	ldr	r3, [pc, #28]	; (402524 <pio_handler_set+0x94>)
  402508:	681b      	ldr	r3, [r3, #0]
  40250a:	3301      	adds	r3, #1
  40250c:	4a05      	ldr	r2, [pc, #20]	; (402524 <pio_handler_set+0x94>)
  40250e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402510:	683a      	ldr	r2, [r7, #0]
  402512:	6879      	ldr	r1, [r7, #4]
  402514:	68f8      	ldr	r0, [r7, #12]
  402516:	4b05      	ldr	r3, [pc, #20]	; (40252c <pio_handler_set+0x9c>)
  402518:	4798      	blx	r3

	return 0;
  40251a:	2300      	movs	r3, #0
}
  40251c:	4618      	mov	r0, r3
  40251e:	3718      	adds	r7, #24
  402520:	46bd      	mov	sp, r7
  402522:	bd80      	pop	{r7, pc}
  402524:	20400c64 	.word	0x20400c64
  402528:	20400bf4 	.word	0x20400bf4
  40252c:	00402309 	.word	0x00402309

00402530 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402530:	b580      	push	{r7, lr}
  402532:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402534:	210a      	movs	r1, #10
  402536:	4802      	ldr	r0, [pc, #8]	; (402540 <PIOA_Handler+0x10>)
  402538:	4b02      	ldr	r3, [pc, #8]	; (402544 <PIOA_Handler+0x14>)
  40253a:	4798      	blx	r3
}
  40253c:	bf00      	nop
  40253e:	bd80      	pop	{r7, pc}
  402540:	400e0e00 	.word	0x400e0e00
  402544:	004023dd 	.word	0x004023dd

00402548 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402548:	b580      	push	{r7, lr}
  40254a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40254c:	210b      	movs	r1, #11
  40254e:	4802      	ldr	r0, [pc, #8]	; (402558 <PIOB_Handler+0x10>)
  402550:	4b02      	ldr	r3, [pc, #8]	; (40255c <PIOB_Handler+0x14>)
  402552:	4798      	blx	r3
}
  402554:	bf00      	nop
  402556:	bd80      	pop	{r7, pc}
  402558:	400e1000 	.word	0x400e1000
  40255c:	004023dd 	.word	0x004023dd

00402560 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402560:	b580      	push	{r7, lr}
  402562:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  402564:	210c      	movs	r1, #12
  402566:	4802      	ldr	r0, [pc, #8]	; (402570 <PIOC_Handler+0x10>)
  402568:	4b02      	ldr	r3, [pc, #8]	; (402574 <PIOC_Handler+0x14>)
  40256a:	4798      	blx	r3
}
  40256c:	bf00      	nop
  40256e:	bd80      	pop	{r7, pc}
  402570:	400e1200 	.word	0x400e1200
  402574:	004023dd 	.word	0x004023dd

00402578 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402578:	b580      	push	{r7, lr}
  40257a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40257c:	2110      	movs	r1, #16
  40257e:	4802      	ldr	r0, [pc, #8]	; (402588 <PIOD_Handler+0x10>)
  402580:	4b02      	ldr	r3, [pc, #8]	; (40258c <PIOD_Handler+0x14>)
  402582:	4798      	blx	r3
}
  402584:	bf00      	nop
  402586:	bd80      	pop	{r7, pc}
  402588:	400e1400 	.word	0x400e1400
  40258c:	004023dd 	.word	0x004023dd

00402590 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402590:	b580      	push	{r7, lr}
  402592:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  402594:	2111      	movs	r1, #17
  402596:	4802      	ldr	r0, [pc, #8]	; (4025a0 <PIOE_Handler+0x10>)
  402598:	4b02      	ldr	r3, [pc, #8]	; (4025a4 <PIOE_Handler+0x14>)
  40259a:	4798      	blx	r3
}
  40259c:	bf00      	nop
  40259e:	bd80      	pop	{r7, pc}
  4025a0:	400e1600 	.word	0x400e1600
  4025a4:	004023dd 	.word	0x004023dd

004025a8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4025a8:	b480      	push	{r7}
  4025aa:	b083      	sub	sp, #12
  4025ac:	af00      	add	r7, sp, #0
  4025ae:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4025b0:	687b      	ldr	r3, [r7, #4]
  4025b2:	3b01      	subs	r3, #1
  4025b4:	2b03      	cmp	r3, #3
  4025b6:	d81a      	bhi.n	4025ee <pmc_mck_set_division+0x46>
  4025b8:	a201      	add	r2, pc, #4	; (adr r2, 4025c0 <pmc_mck_set_division+0x18>)
  4025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025be:	bf00      	nop
  4025c0:	004025d1 	.word	0x004025d1
  4025c4:	004025d7 	.word	0x004025d7
  4025c8:	004025df 	.word	0x004025df
  4025cc:	004025e7 	.word	0x004025e7
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025d0:	2300      	movs	r3, #0
  4025d2:	607b      	str	r3, [r7, #4]
			break;
  4025d4:	e00e      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4025d6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4025da:	607b      	str	r3, [r7, #4]
			break;
  4025dc:	e00a      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4025de:	f44f 7340 	mov.w	r3, #768	; 0x300
  4025e2:	607b      	str	r3, [r7, #4]
			break;
  4025e4:	e006      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4025e6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4025ea:	607b      	str	r3, [r7, #4]
			break;
  4025ec:	e002      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025ee:	2300      	movs	r3, #0
  4025f0:	607b      	str	r3, [r7, #4]
			break;
  4025f2:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4025f4:	490a      	ldr	r1, [pc, #40]	; (402620 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4025f6:	4b0a      	ldr	r3, [pc, #40]	; (402620 <pmc_mck_set_division+0x78>)
  4025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4025fe:	687b      	ldr	r3, [r7, #4]
  402600:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  402602:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402604:	bf00      	nop
  402606:	4b06      	ldr	r3, [pc, #24]	; (402620 <pmc_mck_set_division+0x78>)
  402608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40260a:	f003 0308 	and.w	r3, r3, #8
  40260e:	2b00      	cmp	r3, #0
  402610:	d0f9      	beq.n	402606 <pmc_mck_set_division+0x5e>
}
  402612:	bf00      	nop
  402614:	370c      	adds	r7, #12
  402616:	46bd      	mov	sp, r7
  402618:	f85d 7b04 	ldr.w	r7, [sp], #4
  40261c:	4770      	bx	lr
  40261e:	bf00      	nop
  402620:	400e0600 	.word	0x400e0600

00402624 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402624:	b480      	push	{r7}
  402626:	b085      	sub	sp, #20
  402628:	af00      	add	r7, sp, #0
  40262a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40262c:	491d      	ldr	r1, [pc, #116]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  40262e:	4b1d      	ldr	r3, [pc, #116]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402636:	687b      	ldr	r3, [r7, #4]
  402638:	4313      	orrs	r3, r2
  40263a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40263c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402640:	60fb      	str	r3, [r7, #12]
  402642:	e007      	b.n	402654 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402644:	68fb      	ldr	r3, [r7, #12]
  402646:	2b00      	cmp	r3, #0
  402648:	d101      	bne.n	40264e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40264a:	2301      	movs	r3, #1
  40264c:	e023      	b.n	402696 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40264e:	68fb      	ldr	r3, [r7, #12]
  402650:	3b01      	subs	r3, #1
  402652:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402654:	4b13      	ldr	r3, [pc, #76]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402658:	f003 0308 	and.w	r3, r3, #8
  40265c:	2b00      	cmp	r3, #0
  40265e:	d0f1      	beq.n	402644 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402660:	4a10      	ldr	r2, [pc, #64]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402662:	4b10      	ldr	r3, [pc, #64]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402666:	f023 0303 	bic.w	r3, r3, #3
  40266a:	f043 0302 	orr.w	r3, r3, #2
  40266e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402674:	60fb      	str	r3, [r7, #12]
  402676:	e007      	b.n	402688 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402678:	68fb      	ldr	r3, [r7, #12]
  40267a:	2b00      	cmp	r3, #0
  40267c:	d101      	bne.n	402682 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40267e:	2301      	movs	r3, #1
  402680:	e009      	b.n	402696 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402682:	68fb      	ldr	r3, [r7, #12]
  402684:	3b01      	subs	r3, #1
  402686:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402688:	4b06      	ldr	r3, [pc, #24]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  40268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40268c:	f003 0308 	and.w	r3, r3, #8
  402690:	2b00      	cmp	r3, #0
  402692:	d0f1      	beq.n	402678 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402694:	2300      	movs	r3, #0
}
  402696:	4618      	mov	r0, r3
  402698:	3714      	adds	r7, #20
  40269a:	46bd      	mov	sp, r7
  40269c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026a0:	4770      	bx	lr
  4026a2:	bf00      	nop
  4026a4:	400e0600 	.word	0x400e0600

004026a8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4026a8:	b480      	push	{r7}
  4026aa:	b083      	sub	sp, #12
  4026ac:	af00      	add	r7, sp, #0
  4026ae:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4026b0:	687b      	ldr	r3, [r7, #4]
  4026b2:	2b01      	cmp	r3, #1
  4026b4:	d105      	bne.n	4026c2 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4026b6:	4907      	ldr	r1, [pc, #28]	; (4026d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4026b8:	4b06      	ldr	r3, [pc, #24]	; (4026d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4026ba:	689a      	ldr	r2, [r3, #8]
  4026bc:	4b06      	ldr	r3, [pc, #24]	; (4026d8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4026be:	4313      	orrs	r3, r2
  4026c0:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4026c2:	4b04      	ldr	r3, [pc, #16]	; (4026d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4026c4:	4a05      	ldr	r2, [pc, #20]	; (4026dc <pmc_switch_sclk_to_32kxtal+0x34>)
  4026c6:	601a      	str	r2, [r3, #0]
}
  4026c8:	bf00      	nop
  4026ca:	370c      	adds	r7, #12
  4026cc:	46bd      	mov	sp, r7
  4026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026d2:	4770      	bx	lr
  4026d4:	400e1810 	.word	0x400e1810
  4026d8:	a5100000 	.word	0xa5100000
  4026dc:	a5000008 	.word	0xa5000008

004026e0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4026e0:	b480      	push	{r7}
  4026e2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4026e4:	4b09      	ldr	r3, [pc, #36]	; (40270c <pmc_osc_is_ready_32kxtal+0x2c>)
  4026e6:	695b      	ldr	r3, [r3, #20]
  4026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d007      	beq.n	402700 <pmc_osc_is_ready_32kxtal+0x20>
  4026f0:	4b07      	ldr	r3, [pc, #28]	; (402710 <pmc_osc_is_ready_32kxtal+0x30>)
  4026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4026f8:	2b00      	cmp	r3, #0
  4026fa:	d001      	beq.n	402700 <pmc_osc_is_ready_32kxtal+0x20>
  4026fc:	2301      	movs	r3, #1
  4026fe:	e000      	b.n	402702 <pmc_osc_is_ready_32kxtal+0x22>
  402700:	2300      	movs	r3, #0
}
  402702:	4618      	mov	r0, r3
  402704:	46bd      	mov	sp, r7
  402706:	f85d 7b04 	ldr.w	r7, [sp], #4
  40270a:	4770      	bx	lr
  40270c:	400e1810 	.word	0x400e1810
  402710:	400e0600 	.word	0x400e0600

00402714 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402714:	b480      	push	{r7}
  402716:	b083      	sub	sp, #12
  402718:	af00      	add	r7, sp, #0
  40271a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40271c:	4915      	ldr	r1, [pc, #84]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40271e:	4b15      	ldr	r3, [pc, #84]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  402720:	6a1a      	ldr	r2, [r3, #32]
  402722:	4b15      	ldr	r3, [pc, #84]	; (402778 <pmc_switch_mainck_to_fastrc+0x64>)
  402724:	4313      	orrs	r3, r2
  402726:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402728:	bf00      	nop
  40272a:	4b12      	ldr	r3, [pc, #72]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40272c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402732:	2b00      	cmp	r3, #0
  402734:	d0f9      	beq.n	40272a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402736:	490f      	ldr	r1, [pc, #60]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  402738:	4b0e      	ldr	r3, [pc, #56]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40273a:	6a1a      	ldr	r2, [r3, #32]
  40273c:	4b0f      	ldr	r3, [pc, #60]	; (40277c <pmc_switch_mainck_to_fastrc+0x68>)
  40273e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402740:	687a      	ldr	r2, [r7, #4]
  402742:	4313      	orrs	r3, r2
  402744:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402748:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40274a:	bf00      	nop
  40274c:	4b09      	ldr	r3, [pc, #36]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40274e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402754:	2b00      	cmp	r3, #0
  402756:	d0f9      	beq.n	40274c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402758:	4906      	ldr	r1, [pc, #24]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40275a:	4b06      	ldr	r3, [pc, #24]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40275c:	6a1a      	ldr	r2, [r3, #32]
  40275e:	4b08      	ldr	r3, [pc, #32]	; (402780 <pmc_switch_mainck_to_fastrc+0x6c>)
  402760:	4013      	ands	r3, r2
  402762:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402766:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402768:	bf00      	nop
  40276a:	370c      	adds	r7, #12
  40276c:	46bd      	mov	sp, r7
  40276e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402772:	4770      	bx	lr
  402774:	400e0600 	.word	0x400e0600
  402778:	00370008 	.word	0x00370008
  40277c:	ffc8ff8f 	.word	0xffc8ff8f
  402780:	fec8ffff 	.word	0xfec8ffff

00402784 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402784:	b480      	push	{r7}
  402786:	b083      	sub	sp, #12
  402788:	af00      	add	r7, sp, #0
  40278a:	6078      	str	r0, [r7, #4]
  40278c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40278e:	687b      	ldr	r3, [r7, #4]
  402790:	2b00      	cmp	r3, #0
  402792:	d008      	beq.n	4027a6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402794:	4913      	ldr	r1, [pc, #76]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  402796:	4b13      	ldr	r3, [pc, #76]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  402798:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40279a:	4a13      	ldr	r2, [pc, #76]	; (4027e8 <pmc_switch_mainck_to_xtal+0x64>)
  40279c:	401a      	ands	r2, r3
  40279e:	4b13      	ldr	r3, [pc, #76]	; (4027ec <pmc_switch_mainck_to_xtal+0x68>)
  4027a0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4027a2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4027a4:	e018      	b.n	4027d8 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4027a6:	490f      	ldr	r1, [pc, #60]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027a8:	4b0e      	ldr	r3, [pc, #56]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027aa:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4027ac:	4b10      	ldr	r3, [pc, #64]	; (4027f0 <pmc_switch_mainck_to_xtal+0x6c>)
  4027ae:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4027b0:	683a      	ldr	r2, [r7, #0]
  4027b2:	0212      	lsls	r2, r2, #8
  4027b4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4027b6:	431a      	orrs	r2, r3
  4027b8:	4b0e      	ldr	r3, [pc, #56]	; (4027f4 <pmc_switch_mainck_to_xtal+0x70>)
  4027ba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4027bc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4027be:	bf00      	nop
  4027c0:	4b08      	ldr	r3, [pc, #32]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4027c4:	f003 0301 	and.w	r3, r3, #1
  4027c8:	2b00      	cmp	r3, #0
  4027ca:	d0f9      	beq.n	4027c0 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4027cc:	4905      	ldr	r1, [pc, #20]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027ce:	4b05      	ldr	r3, [pc, #20]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027d0:	6a1a      	ldr	r2, [r3, #32]
  4027d2:	4b09      	ldr	r3, [pc, #36]	; (4027f8 <pmc_switch_mainck_to_xtal+0x74>)
  4027d4:	4313      	orrs	r3, r2
  4027d6:	620b      	str	r3, [r1, #32]
}
  4027d8:	bf00      	nop
  4027da:	370c      	adds	r7, #12
  4027dc:	46bd      	mov	sp, r7
  4027de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027e2:	4770      	bx	lr
  4027e4:	400e0600 	.word	0x400e0600
  4027e8:	fec8fffc 	.word	0xfec8fffc
  4027ec:	01370002 	.word	0x01370002
  4027f0:	ffc8fffc 	.word	0xffc8fffc
  4027f4:	00370001 	.word	0x00370001
  4027f8:	01370000 	.word	0x01370000

004027fc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4027fc:	b480      	push	{r7}
  4027fe:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402800:	4b04      	ldr	r3, [pc, #16]	; (402814 <pmc_osc_is_ready_mainck+0x18>)
  402802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402808:	4618      	mov	r0, r3
  40280a:	46bd      	mov	sp, r7
  40280c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402810:	4770      	bx	lr
  402812:	bf00      	nop
  402814:	400e0600 	.word	0x400e0600

00402818 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402818:	b480      	push	{r7}
  40281a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40281c:	4b04      	ldr	r3, [pc, #16]	; (402830 <pmc_disable_pllack+0x18>)
  40281e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402822:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402824:	bf00      	nop
  402826:	46bd      	mov	sp, r7
  402828:	f85d 7b04 	ldr.w	r7, [sp], #4
  40282c:	4770      	bx	lr
  40282e:	bf00      	nop
  402830:	400e0600 	.word	0x400e0600

00402834 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402834:	b480      	push	{r7}
  402836:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402838:	4b04      	ldr	r3, [pc, #16]	; (40284c <pmc_is_locked_pllack+0x18>)
  40283a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40283c:	f003 0302 	and.w	r3, r3, #2
}
  402840:	4618      	mov	r0, r3
  402842:	46bd      	mov	sp, r7
  402844:	f85d 7b04 	ldr.w	r7, [sp], #4
  402848:	4770      	bx	lr
  40284a:	bf00      	nop
  40284c:	400e0600 	.word	0x400e0600

00402850 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  402850:	b480      	push	{r7}
  402852:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402854:	4b04      	ldr	r3, [pc, #16]	; (402868 <pmc_is_locked_upll+0x18>)
  402856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402858:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  40285c:	4618      	mov	r0, r3
  40285e:	46bd      	mov	sp, r7
  402860:	f85d 7b04 	ldr.w	r7, [sp], #4
  402864:	4770      	bx	lr
  402866:	bf00      	nop
  402868:	400e0600 	.word	0x400e0600

0040286c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40286c:	b480      	push	{r7}
  40286e:	b083      	sub	sp, #12
  402870:	af00      	add	r7, sp, #0
  402872:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402874:	687b      	ldr	r3, [r7, #4]
  402876:	2b3f      	cmp	r3, #63	; 0x3f
  402878:	d901      	bls.n	40287e <pmc_enable_periph_clk+0x12>
		return 1;
  40287a:	2301      	movs	r3, #1
  40287c:	e02f      	b.n	4028de <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40287e:	687b      	ldr	r3, [r7, #4]
  402880:	2b1f      	cmp	r3, #31
  402882:	d813      	bhi.n	4028ac <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402884:	4b19      	ldr	r3, [pc, #100]	; (4028ec <pmc_enable_periph_clk+0x80>)
  402886:	699a      	ldr	r2, [r3, #24]
  402888:	2101      	movs	r1, #1
  40288a:	687b      	ldr	r3, [r7, #4]
  40288c:	fa01 f303 	lsl.w	r3, r1, r3
  402890:	401a      	ands	r2, r3
  402892:	2101      	movs	r1, #1
  402894:	687b      	ldr	r3, [r7, #4]
  402896:	fa01 f303 	lsl.w	r3, r1, r3
  40289a:	429a      	cmp	r2, r3
  40289c:	d01e      	beq.n	4028dc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40289e:	4a13      	ldr	r2, [pc, #76]	; (4028ec <pmc_enable_periph_clk+0x80>)
  4028a0:	2101      	movs	r1, #1
  4028a2:	687b      	ldr	r3, [r7, #4]
  4028a4:	fa01 f303 	lsl.w	r3, r1, r3
  4028a8:	6113      	str	r3, [r2, #16]
  4028aa:	e017      	b.n	4028dc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	3b20      	subs	r3, #32
  4028b0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4028b2:	4b0e      	ldr	r3, [pc, #56]	; (4028ec <pmc_enable_periph_clk+0x80>)
  4028b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4028b8:	2101      	movs	r1, #1
  4028ba:	687b      	ldr	r3, [r7, #4]
  4028bc:	fa01 f303 	lsl.w	r3, r1, r3
  4028c0:	401a      	ands	r2, r3
  4028c2:	2101      	movs	r1, #1
  4028c4:	687b      	ldr	r3, [r7, #4]
  4028c6:	fa01 f303 	lsl.w	r3, r1, r3
  4028ca:	429a      	cmp	r2, r3
  4028cc:	d006      	beq.n	4028dc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4028ce:	4a07      	ldr	r2, [pc, #28]	; (4028ec <pmc_enable_periph_clk+0x80>)
  4028d0:	2101      	movs	r1, #1
  4028d2:	687b      	ldr	r3, [r7, #4]
  4028d4:	fa01 f303 	lsl.w	r3, r1, r3
  4028d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4028dc:	2300      	movs	r3, #0
}
  4028de:	4618      	mov	r0, r3
  4028e0:	370c      	adds	r7, #12
  4028e2:	46bd      	mov	sp, r7
  4028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028e8:	4770      	bx	lr
  4028ea:	bf00      	nop
  4028ec:	400e0600 	.word	0x400e0600

004028f0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4028f0:	b480      	push	{r7}
  4028f2:	b083      	sub	sp, #12
  4028f4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028f6:	f3ef 8310 	mrs	r3, PRIMASK
  4028fa:	607b      	str	r3, [r7, #4]
  return(result);
  4028fc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4028fe:	2b00      	cmp	r3, #0
  402900:	bf0c      	ite	eq
  402902:	2301      	moveq	r3, #1
  402904:	2300      	movne	r3, #0
  402906:	b2db      	uxtb	r3, r3
  402908:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40290a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40290c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402910:	4b04      	ldr	r3, [pc, #16]	; (402924 <cpu_irq_save+0x34>)
  402912:	2200      	movs	r2, #0
  402914:	701a      	strb	r2, [r3, #0]
	return flags;
  402916:	683b      	ldr	r3, [r7, #0]
}
  402918:	4618      	mov	r0, r3
  40291a:	370c      	adds	r7, #12
  40291c:	46bd      	mov	sp, r7
  40291e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402922:	4770      	bx	lr
  402924:	20400018 	.word	0x20400018

00402928 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402928:	b480      	push	{r7}
  40292a:	b083      	sub	sp, #12
  40292c:	af00      	add	r7, sp, #0
  40292e:	6078      	str	r0, [r7, #4]
	return (flags);
  402930:	687b      	ldr	r3, [r7, #4]
  402932:	2b00      	cmp	r3, #0
  402934:	bf14      	ite	ne
  402936:	2301      	movne	r3, #1
  402938:	2300      	moveq	r3, #0
  40293a:	b2db      	uxtb	r3, r3
}
  40293c:	4618      	mov	r0, r3
  40293e:	370c      	adds	r7, #12
  402940:	46bd      	mov	sp, r7
  402942:	f85d 7b04 	ldr.w	r7, [sp], #4
  402946:	4770      	bx	lr

00402948 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402948:	b580      	push	{r7, lr}
  40294a:	b082      	sub	sp, #8
  40294c:	af00      	add	r7, sp, #0
  40294e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  402950:	6878      	ldr	r0, [r7, #4]
  402952:	4b07      	ldr	r3, [pc, #28]	; (402970 <cpu_irq_restore+0x28>)
  402954:	4798      	blx	r3
  402956:	4603      	mov	r3, r0
  402958:	2b00      	cmp	r3, #0
  40295a:	d005      	beq.n	402968 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40295c:	4b05      	ldr	r3, [pc, #20]	; (402974 <cpu_irq_restore+0x2c>)
  40295e:	2201      	movs	r2, #1
  402960:	701a      	strb	r2, [r3, #0]
  402962:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402966:	b662      	cpsie	i
}
  402968:	bf00      	nop
  40296a:	3708      	adds	r7, #8
  40296c:	46bd      	mov	sp, r7
  40296e:	bd80      	pop	{r7, pc}
  402970:	00402929 	.word	0x00402929
  402974:	20400018 	.word	0x20400018

00402978 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402978:	b580      	push	{r7, lr}
  40297a:	b084      	sub	sp, #16
  40297c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40297e:	4b1e      	ldr	r3, [pc, #120]	; (4029f8 <Reset_Handler+0x80>)
  402980:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  402982:	4b1e      	ldr	r3, [pc, #120]	; (4029fc <Reset_Handler+0x84>)
  402984:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402986:	68fa      	ldr	r2, [r7, #12]
  402988:	68bb      	ldr	r3, [r7, #8]
  40298a:	429a      	cmp	r2, r3
  40298c:	d00c      	beq.n	4029a8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40298e:	e007      	b.n	4029a0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  402990:	68bb      	ldr	r3, [r7, #8]
  402992:	1d1a      	adds	r2, r3, #4
  402994:	60ba      	str	r2, [r7, #8]
  402996:	68fa      	ldr	r2, [r7, #12]
  402998:	1d11      	adds	r1, r2, #4
  40299a:	60f9      	str	r1, [r7, #12]
  40299c:	6812      	ldr	r2, [r2, #0]
  40299e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4029a0:	68bb      	ldr	r3, [r7, #8]
  4029a2:	4a17      	ldr	r2, [pc, #92]	; (402a00 <Reset_Handler+0x88>)
  4029a4:	4293      	cmp	r3, r2
  4029a6:	d3f3      	bcc.n	402990 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4029a8:	4b16      	ldr	r3, [pc, #88]	; (402a04 <Reset_Handler+0x8c>)
  4029aa:	60bb      	str	r3, [r7, #8]
  4029ac:	e004      	b.n	4029b8 <Reset_Handler+0x40>
                *pDest++ = 0;
  4029ae:	68bb      	ldr	r3, [r7, #8]
  4029b0:	1d1a      	adds	r2, r3, #4
  4029b2:	60ba      	str	r2, [r7, #8]
  4029b4:	2200      	movs	r2, #0
  4029b6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4029b8:	68bb      	ldr	r3, [r7, #8]
  4029ba:	4a13      	ldr	r2, [pc, #76]	; (402a08 <Reset_Handler+0x90>)
  4029bc:	4293      	cmp	r3, r2
  4029be:	d3f6      	bcc.n	4029ae <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4029c0:	4b12      	ldr	r3, [pc, #72]	; (402a0c <Reset_Handler+0x94>)
  4029c2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4029c4:	4a12      	ldr	r2, [pc, #72]	; (402a10 <Reset_Handler+0x98>)
  4029c6:	68fb      	ldr	r3, [r7, #12]
  4029c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4029cc:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4029ce:	4b11      	ldr	r3, [pc, #68]	; (402a14 <Reset_Handler+0x9c>)
  4029d0:	4798      	blx	r3
  4029d2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4029d4:	4a10      	ldr	r2, [pc, #64]	; (402a18 <Reset_Handler+0xa0>)
  4029d6:	4b10      	ldr	r3, [pc, #64]	; (402a18 <Reset_Handler+0xa0>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4029de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4029e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4029e4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4029e8:	6878      	ldr	r0, [r7, #4]
  4029ea:	4b0c      	ldr	r3, [pc, #48]	; (402a1c <Reset_Handler+0xa4>)
  4029ec:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4029ee:	4b0c      	ldr	r3, [pc, #48]	; (402a20 <Reset_Handler+0xa8>)
  4029f0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4029f2:	4b0c      	ldr	r3, [pc, #48]	; (402a24 <Reset_Handler+0xac>)
  4029f4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4029f6:	e7fe      	b.n	4029f6 <Reset_Handler+0x7e>
  4029f8:	004086e4 	.word	0x004086e4
  4029fc:	20400000 	.word	0x20400000
  402a00:	204009d0 	.word	0x204009d0
  402a04:	204009d0 	.word	0x204009d0
  402a08:	20400cd8 	.word	0x20400cd8
  402a0c:	00400000 	.word	0x00400000
  402a10:	e000ed00 	.word	0xe000ed00
  402a14:	004028f1 	.word	0x004028f1
  402a18:	e000ed88 	.word	0xe000ed88
  402a1c:	00402949 	.word	0x00402949
  402a20:	00403b5d 	.word	0x00403b5d
  402a24:	00402ef5 	.word	0x00402ef5

00402a28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402a28:	b480      	push	{r7}
  402a2a:	af00      	add	r7, sp, #0
        while (1) {
  402a2c:	e7fe      	b.n	402a2c <Dummy_Handler+0x4>
	...

00402a30 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402a30:	b480      	push	{r7}
  402a32:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402a34:	4b52      	ldr	r3, [pc, #328]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a38:	f003 0303 	and.w	r3, r3, #3
  402a3c:	2b01      	cmp	r3, #1
  402a3e:	d014      	beq.n	402a6a <SystemCoreClockUpdate+0x3a>
  402a40:	2b01      	cmp	r3, #1
  402a42:	d302      	bcc.n	402a4a <SystemCoreClockUpdate+0x1a>
  402a44:	2b02      	cmp	r3, #2
  402a46:	d038      	beq.n	402aba <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402a48:	e07a      	b.n	402b40 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402a4a:	4b4e      	ldr	r3, [pc, #312]	; (402b84 <SystemCoreClockUpdate+0x154>)
  402a4c:	695b      	ldr	r3, [r3, #20]
  402a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402a52:	2b00      	cmp	r3, #0
  402a54:	d004      	beq.n	402a60 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402a56:	4b4c      	ldr	r3, [pc, #304]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402a5c:	601a      	str	r2, [r3, #0]
    break;
  402a5e:	e06f      	b.n	402b40 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402a60:	4b49      	ldr	r3, [pc, #292]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a62:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402a66:	601a      	str	r2, [r3, #0]
    break;
  402a68:	e06a      	b.n	402b40 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402a6a:	4b45      	ldr	r3, [pc, #276]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402a6c:	6a1b      	ldr	r3, [r3, #32]
  402a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402a72:	2b00      	cmp	r3, #0
  402a74:	d003      	beq.n	402a7e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402a76:	4b44      	ldr	r3, [pc, #272]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a78:	4a44      	ldr	r2, [pc, #272]	; (402b8c <SystemCoreClockUpdate+0x15c>)
  402a7a:	601a      	str	r2, [r3, #0]
    break;
  402a7c:	e060      	b.n	402b40 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a7e:	4b42      	ldr	r3, [pc, #264]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a80:	4a43      	ldr	r2, [pc, #268]	; (402b90 <SystemCoreClockUpdate+0x160>)
  402a82:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402a84:	4b3e      	ldr	r3, [pc, #248]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402a86:	6a1b      	ldr	r3, [r3, #32]
  402a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a8c:	2b10      	cmp	r3, #16
  402a8e:	d004      	beq.n	402a9a <SystemCoreClockUpdate+0x6a>
  402a90:	2b20      	cmp	r3, #32
  402a92:	d008      	beq.n	402aa6 <SystemCoreClockUpdate+0x76>
  402a94:	2b00      	cmp	r3, #0
  402a96:	d00e      	beq.n	402ab6 <SystemCoreClockUpdate+0x86>
          break;
  402a98:	e00e      	b.n	402ab8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402a9a:	4b3b      	ldr	r3, [pc, #236]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a9c:	681b      	ldr	r3, [r3, #0]
  402a9e:	005b      	lsls	r3, r3, #1
  402aa0:	4a39      	ldr	r2, [pc, #228]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402aa2:	6013      	str	r3, [r2, #0]
          break;
  402aa4:	e008      	b.n	402ab8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402aa6:	4b38      	ldr	r3, [pc, #224]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402aa8:	681a      	ldr	r2, [r3, #0]
  402aaa:	4613      	mov	r3, r2
  402aac:	005b      	lsls	r3, r3, #1
  402aae:	4413      	add	r3, r2
  402ab0:	4a35      	ldr	r2, [pc, #212]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402ab2:	6013      	str	r3, [r2, #0]
          break;
  402ab4:	e000      	b.n	402ab8 <SystemCoreClockUpdate+0x88>
          break;
  402ab6:	bf00      	nop
    break;
  402ab8:	e042      	b.n	402b40 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402aba:	4b31      	ldr	r3, [pc, #196]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402abc:	6a1b      	ldr	r3, [r3, #32]
  402abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402ac2:	2b00      	cmp	r3, #0
  402ac4:	d003      	beq.n	402ace <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402ac6:	4b30      	ldr	r3, [pc, #192]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402ac8:	4a30      	ldr	r2, [pc, #192]	; (402b8c <SystemCoreClockUpdate+0x15c>)
  402aca:	601a      	str	r2, [r3, #0]
  402acc:	e01c      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402ace:	4b2e      	ldr	r3, [pc, #184]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402ad0:	4a2f      	ldr	r2, [pc, #188]	; (402b90 <SystemCoreClockUpdate+0x160>)
  402ad2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402ad4:	4b2a      	ldr	r3, [pc, #168]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402ad6:	6a1b      	ldr	r3, [r3, #32]
  402ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402adc:	2b10      	cmp	r3, #16
  402ade:	d004      	beq.n	402aea <SystemCoreClockUpdate+0xba>
  402ae0:	2b20      	cmp	r3, #32
  402ae2:	d008      	beq.n	402af6 <SystemCoreClockUpdate+0xc6>
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	d00e      	beq.n	402b06 <SystemCoreClockUpdate+0xd6>
          break;
  402ae8:	e00e      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402aea:	4b27      	ldr	r3, [pc, #156]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402aec:	681b      	ldr	r3, [r3, #0]
  402aee:	005b      	lsls	r3, r3, #1
  402af0:	4a25      	ldr	r2, [pc, #148]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402af2:	6013      	str	r3, [r2, #0]
          break;
  402af4:	e008      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402af6:	4b24      	ldr	r3, [pc, #144]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402af8:	681a      	ldr	r2, [r3, #0]
  402afa:	4613      	mov	r3, r2
  402afc:	005b      	lsls	r3, r3, #1
  402afe:	4413      	add	r3, r2
  402b00:	4a21      	ldr	r2, [pc, #132]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b02:	6013      	str	r3, [r2, #0]
          break;
  402b04:	e000      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
          break;
  402b06:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402b08:	4b1d      	ldr	r3, [pc, #116]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b0c:	f003 0303 	and.w	r3, r3, #3
  402b10:	2b02      	cmp	r3, #2
  402b12:	d114      	bne.n	402b3e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402b14:	4b1a      	ldr	r3, [pc, #104]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402b18:	0c1b      	lsrs	r3, r3, #16
  402b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402b1e:	3301      	adds	r3, #1
  402b20:	4a19      	ldr	r2, [pc, #100]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b22:	6812      	ldr	r2, [r2, #0]
  402b24:	fb02 f303 	mul.w	r3, r2, r3
  402b28:	4a17      	ldr	r2, [pc, #92]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b2a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402b2c:	4b14      	ldr	r3, [pc, #80]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402b30:	b2db      	uxtb	r3, r3
  402b32:	4a15      	ldr	r2, [pc, #84]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b34:	6812      	ldr	r2, [r2, #0]
  402b36:	fbb2 f3f3 	udiv	r3, r2, r3
  402b3a:	4a13      	ldr	r2, [pc, #76]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b3c:	6013      	str	r3, [r2, #0]
    break;
  402b3e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402b40:	4b0f      	ldr	r3, [pc, #60]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b48:	2b70      	cmp	r3, #112	; 0x70
  402b4a:	d108      	bne.n	402b5e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402b4c:	4b0e      	ldr	r3, [pc, #56]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b4e:	681b      	ldr	r3, [r3, #0]
  402b50:	4a10      	ldr	r2, [pc, #64]	; (402b94 <SystemCoreClockUpdate+0x164>)
  402b52:	fba2 2303 	umull	r2, r3, r2, r3
  402b56:	085b      	lsrs	r3, r3, #1
  402b58:	4a0b      	ldr	r2, [pc, #44]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b5a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402b5c:	e00a      	b.n	402b74 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402b5e:	4b08      	ldr	r3, [pc, #32]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b62:	091b      	lsrs	r3, r3, #4
  402b64:	f003 0307 	and.w	r3, r3, #7
  402b68:	4a07      	ldr	r2, [pc, #28]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b6a:	6812      	ldr	r2, [r2, #0]
  402b6c:	fa22 f303 	lsr.w	r3, r2, r3
  402b70:	4a05      	ldr	r2, [pc, #20]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b72:	6013      	str	r3, [r2, #0]
}
  402b74:	bf00      	nop
  402b76:	46bd      	mov	sp, r7
  402b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b7c:	4770      	bx	lr
  402b7e:	bf00      	nop
  402b80:	400e0600 	.word	0x400e0600
  402b84:	400e1810 	.word	0x400e1810
  402b88:	2040001c 	.word	0x2040001c
  402b8c:	00b71b00 	.word	0x00b71b00
  402b90:	003d0900 	.word	0x003d0900
  402b94:	aaaaaaab 	.word	0xaaaaaaab

00402b98 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402b98:	b480      	push	{r7}
  402b9a:	b083      	sub	sp, #12
  402b9c:	af00      	add	r7, sp, #0
  402b9e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402ba0:	687b      	ldr	r3, [r7, #4]
  402ba2:	4a1d      	ldr	r2, [pc, #116]	; (402c18 <system_init_flash+0x80>)
  402ba4:	4293      	cmp	r3, r2
  402ba6:	d804      	bhi.n	402bb2 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402ba8:	4b1c      	ldr	r3, [pc, #112]	; (402c1c <system_init_flash+0x84>)
  402baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402bae:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402bb0:	e02b      	b.n	402c0a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402bb2:	687b      	ldr	r3, [r7, #4]
  402bb4:	4a1a      	ldr	r2, [pc, #104]	; (402c20 <system_init_flash+0x88>)
  402bb6:	4293      	cmp	r3, r2
  402bb8:	d803      	bhi.n	402bc2 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402bba:	4b18      	ldr	r3, [pc, #96]	; (402c1c <system_init_flash+0x84>)
  402bbc:	4a19      	ldr	r2, [pc, #100]	; (402c24 <system_init_flash+0x8c>)
  402bbe:	601a      	str	r2, [r3, #0]
}
  402bc0:	e023      	b.n	402c0a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402bc2:	687b      	ldr	r3, [r7, #4]
  402bc4:	4a18      	ldr	r2, [pc, #96]	; (402c28 <system_init_flash+0x90>)
  402bc6:	4293      	cmp	r3, r2
  402bc8:	d803      	bhi.n	402bd2 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402bca:	4b14      	ldr	r3, [pc, #80]	; (402c1c <system_init_flash+0x84>)
  402bcc:	4a17      	ldr	r2, [pc, #92]	; (402c2c <system_init_flash+0x94>)
  402bce:	601a      	str	r2, [r3, #0]
}
  402bd0:	e01b      	b.n	402c0a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402bd2:	687b      	ldr	r3, [r7, #4]
  402bd4:	4a16      	ldr	r2, [pc, #88]	; (402c30 <system_init_flash+0x98>)
  402bd6:	4293      	cmp	r3, r2
  402bd8:	d803      	bhi.n	402be2 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402bda:	4b10      	ldr	r3, [pc, #64]	; (402c1c <system_init_flash+0x84>)
  402bdc:	4a15      	ldr	r2, [pc, #84]	; (402c34 <system_init_flash+0x9c>)
  402bde:	601a      	str	r2, [r3, #0]
}
  402be0:	e013      	b.n	402c0a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402be2:	687b      	ldr	r3, [r7, #4]
  402be4:	4a14      	ldr	r2, [pc, #80]	; (402c38 <system_init_flash+0xa0>)
  402be6:	4293      	cmp	r3, r2
  402be8:	d804      	bhi.n	402bf4 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402bea:	4b0c      	ldr	r3, [pc, #48]	; (402c1c <system_init_flash+0x84>)
  402bec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402bf0:	601a      	str	r2, [r3, #0]
}
  402bf2:	e00a      	b.n	402c0a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402bf4:	687b      	ldr	r3, [r7, #4]
  402bf6:	4a11      	ldr	r2, [pc, #68]	; (402c3c <system_init_flash+0xa4>)
  402bf8:	4293      	cmp	r3, r2
  402bfa:	d803      	bhi.n	402c04 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402bfc:	4b07      	ldr	r3, [pc, #28]	; (402c1c <system_init_flash+0x84>)
  402bfe:	4a10      	ldr	r2, [pc, #64]	; (402c40 <system_init_flash+0xa8>)
  402c00:	601a      	str	r2, [r3, #0]
}
  402c02:	e002      	b.n	402c0a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402c04:	4b05      	ldr	r3, [pc, #20]	; (402c1c <system_init_flash+0x84>)
  402c06:	4a0f      	ldr	r2, [pc, #60]	; (402c44 <system_init_flash+0xac>)
  402c08:	601a      	str	r2, [r3, #0]
}
  402c0a:	bf00      	nop
  402c0c:	370c      	adds	r7, #12
  402c0e:	46bd      	mov	sp, r7
  402c10:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c14:	4770      	bx	lr
  402c16:	bf00      	nop
  402c18:	015ef3bf 	.word	0x015ef3bf
  402c1c:	400e0c00 	.word	0x400e0c00
  402c20:	02bde77f 	.word	0x02bde77f
  402c24:	04000100 	.word	0x04000100
  402c28:	041cdb3f 	.word	0x041cdb3f
  402c2c:	04000200 	.word	0x04000200
  402c30:	057bceff 	.word	0x057bceff
  402c34:	04000300 	.word	0x04000300
  402c38:	06dac2bf 	.word	0x06dac2bf
  402c3c:	0839b67f 	.word	0x0839b67f
  402c40:	04000500 	.word	0x04000500
  402c44:	04000600 	.word	0x04000600

00402c48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402c48:	b480      	push	{r7}
  402c4a:	b085      	sub	sp, #20
  402c4c:	af00      	add	r7, sp, #0
  402c4e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402c50:	4b10      	ldr	r3, [pc, #64]	; (402c94 <_sbrk+0x4c>)
  402c52:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402c54:	4b10      	ldr	r3, [pc, #64]	; (402c98 <_sbrk+0x50>)
  402c56:	681b      	ldr	r3, [r3, #0]
  402c58:	2b00      	cmp	r3, #0
  402c5a:	d102      	bne.n	402c62 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402c5c:	4b0e      	ldr	r3, [pc, #56]	; (402c98 <_sbrk+0x50>)
  402c5e:	4a0f      	ldr	r2, [pc, #60]	; (402c9c <_sbrk+0x54>)
  402c60:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402c62:	4b0d      	ldr	r3, [pc, #52]	; (402c98 <_sbrk+0x50>)
  402c64:	681b      	ldr	r3, [r3, #0]
  402c66:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402c68:	68ba      	ldr	r2, [r7, #8]
  402c6a:	687b      	ldr	r3, [r7, #4]
  402c6c:	441a      	add	r2, r3
  402c6e:	68fb      	ldr	r3, [r7, #12]
  402c70:	429a      	cmp	r2, r3
  402c72:	dd02      	ble.n	402c7a <_sbrk+0x32>
		return (caddr_t) -1;	
  402c74:	f04f 33ff 	mov.w	r3, #4294967295
  402c78:	e006      	b.n	402c88 <_sbrk+0x40>
	}

	heap += incr;
  402c7a:	4b07      	ldr	r3, [pc, #28]	; (402c98 <_sbrk+0x50>)
  402c7c:	681a      	ldr	r2, [r3, #0]
  402c7e:	687b      	ldr	r3, [r7, #4]
  402c80:	4413      	add	r3, r2
  402c82:	4a05      	ldr	r2, [pc, #20]	; (402c98 <_sbrk+0x50>)
  402c84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402c86:	68bb      	ldr	r3, [r7, #8]
}
  402c88:	4618      	mov	r0, r3
  402c8a:	3714      	adds	r7, #20
  402c8c:	46bd      	mov	sp, r7
  402c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c92:	4770      	bx	lr
  402c94:	2045fffc 	.word	0x2045fffc
  402c98:	20400c68 	.word	0x20400c68
  402c9c:	20402ed8 	.word	0x20402ed8

00402ca0 <osc_get_rate>:
{
  402ca0:	b480      	push	{r7}
  402ca2:	b083      	sub	sp, #12
  402ca4:	af00      	add	r7, sp, #0
  402ca6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402ca8:	687b      	ldr	r3, [r7, #4]
  402caa:	2b07      	cmp	r3, #7
  402cac:	d825      	bhi.n	402cfa <osc_get_rate+0x5a>
  402cae:	a201      	add	r2, pc, #4	; (adr r2, 402cb4 <osc_get_rate+0x14>)
  402cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402cb4:	00402cd5 	.word	0x00402cd5
  402cb8:	00402cdb 	.word	0x00402cdb
  402cbc:	00402ce1 	.word	0x00402ce1
  402cc0:	00402ce7 	.word	0x00402ce7
  402cc4:	00402ceb 	.word	0x00402ceb
  402cc8:	00402cef 	.word	0x00402cef
  402ccc:	00402cf3 	.word	0x00402cf3
  402cd0:	00402cf7 	.word	0x00402cf7
		return OSC_SLCK_32K_RC_HZ;
  402cd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402cd8:	e010      	b.n	402cfc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402cde:	e00d      	b.n	402cfc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ce4:	e00a      	b.n	402cfc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402ce6:	4b08      	ldr	r3, [pc, #32]	; (402d08 <osc_get_rate+0x68>)
  402ce8:	e008      	b.n	402cfc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402cea:	4b08      	ldr	r3, [pc, #32]	; (402d0c <osc_get_rate+0x6c>)
  402cec:	e006      	b.n	402cfc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402cee:	4b08      	ldr	r3, [pc, #32]	; (402d10 <osc_get_rate+0x70>)
  402cf0:	e004      	b.n	402cfc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402cf2:	4b07      	ldr	r3, [pc, #28]	; (402d10 <osc_get_rate+0x70>)
  402cf4:	e002      	b.n	402cfc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402cf6:	4b06      	ldr	r3, [pc, #24]	; (402d10 <osc_get_rate+0x70>)
  402cf8:	e000      	b.n	402cfc <osc_get_rate+0x5c>
	return 0;
  402cfa:	2300      	movs	r3, #0
}
  402cfc:	4618      	mov	r0, r3
  402cfe:	370c      	adds	r7, #12
  402d00:	46bd      	mov	sp, r7
  402d02:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d06:	4770      	bx	lr
  402d08:	003d0900 	.word	0x003d0900
  402d0c:	007a1200 	.word	0x007a1200
  402d10:	00b71b00 	.word	0x00b71b00

00402d14 <sysclk_get_main_hz>:
{
  402d14:	b580      	push	{r7, lr}
  402d16:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402d18:	2006      	movs	r0, #6
  402d1a:	4b05      	ldr	r3, [pc, #20]	; (402d30 <sysclk_get_main_hz+0x1c>)
  402d1c:	4798      	blx	r3
  402d1e:	4602      	mov	r2, r0
  402d20:	4613      	mov	r3, r2
  402d22:	009b      	lsls	r3, r3, #2
  402d24:	4413      	add	r3, r2
  402d26:	009a      	lsls	r2, r3, #2
  402d28:	4413      	add	r3, r2
}
  402d2a:	4618      	mov	r0, r3
  402d2c:	bd80      	pop	{r7, pc}
  402d2e:	bf00      	nop
  402d30:	00402ca1 	.word	0x00402ca1

00402d34 <sysclk_get_cpu_hz>:
{
  402d34:	b580      	push	{r7, lr}
  402d36:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402d38:	4b02      	ldr	r3, [pc, #8]	; (402d44 <sysclk_get_cpu_hz+0x10>)
  402d3a:	4798      	blx	r3
  402d3c:	4603      	mov	r3, r0
}
  402d3e:	4618      	mov	r0, r3
  402d40:	bd80      	pop	{r7, pc}
  402d42:	bf00      	nop
  402d44:	00402d15 	.word	0x00402d15

00402d48 <but1_callback>:

/************************************************************************/
/* callbacks                                                              */
/************************************************************************/
void but1_callback(void)
{
  402d48:	b480      	push	{r7}
  402d4a:	af00      	add	r7, sp, #0
	but1_flag = 1;
  402d4c:	4b03      	ldr	r3, [pc, #12]	; (402d5c <but1_callback+0x14>)
  402d4e:	2201      	movs	r2, #1
  402d50:	701a      	strb	r2, [r3, #0]
}
  402d52:	bf00      	nop
  402d54:	46bd      	mov	sp, r7
  402d56:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d5a:	4770      	bx	lr
  402d5c:	20400ca4 	.word	0x20400ca4

00402d60 <echo_callback>:

void echo_callback(void)
{
  402d60:	b580      	push	{r7, lr}
  402d62:	af00      	add	r7, sp, #0
	if (pio_get(ECHO_PIO, PIO_INPUT, ECHO_IDX_MASK)) {
  402d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d68:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d6c:	480e      	ldr	r0, [pc, #56]	; (402da8 <echo_callback+0x48>)
  402d6e:	4b0f      	ldr	r3, [pc, #60]	; (402dac <echo_callback+0x4c>)
  402d70:	4798      	blx	r3
  402d72:	4603      	mov	r3, r0
  402d74:	2b00      	cmp	r3, #0
  402d76:	d00c      	beq.n	402d92 <echo_callback+0x32>
		 RTT_init(freq, 0, 0);
  402d78:	4b0d      	ldr	r3, [pc, #52]	; (402db0 <echo_callback+0x50>)
  402d7a:	681b      	ldr	r3, [r3, #0]
  402d7c:	ee07 3a90 	vmov	s15, r3
  402d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  402d84:	2200      	movs	r2, #0
  402d86:	2100      	movs	r1, #0
  402d88:	ee17 0a90 	vmov	r0, s15
  402d8c:	4b09      	ldr	r3, [pc, #36]	; (402db4 <echo_callback+0x54>)
  402d8e:	4798      	blx	r3
	} else { 
		echo_flag = 1;
		rtt_time = get_time_rtt();
	}
}
  402d90:	e007      	b.n	402da2 <echo_callback+0x42>
		echo_flag = 1;
  402d92:	4b09      	ldr	r3, [pc, #36]	; (402db8 <echo_callback+0x58>)
  402d94:	2201      	movs	r2, #1
  402d96:	701a      	strb	r2, [r3, #0]
		rtt_time = get_time_rtt();
  402d98:	4b08      	ldr	r3, [pc, #32]	; (402dbc <echo_callback+0x5c>)
  402d9a:	4798      	blx	r3
  402d9c:	4602      	mov	r2, r0
  402d9e:	4b08      	ldr	r3, [pc, #32]	; (402dc0 <echo_callback+0x60>)
  402da0:	601a      	str	r2, [r3, #0]
}
  402da2:	bf00      	nop
  402da4:	bd80      	pop	{r7, pc}
  402da6:	bf00      	nop
  402da8:	400e1400 	.word	0x400e1400
  402dac:	00402001 	.word	0x00402001
  402db0:	20400020 	.word	0x20400020
  402db4:	004007a1 	.word	0x004007a1
  402db8:	20400cac 	.word	0x20400cac
  402dbc:	00402dc5 	.word	0x00402dc5
  402dc0:	20400c6c 	.word	0x20400c6c

00402dc4 <get_time_rtt>:
/************************************************************************/
void pin_toggle(Pio *pio, uint32_t mask) {
	pio_get_output_data_status(pio, mask) ? pio_clear(pio, mask) : pio_set(pio,mask);
}

static uint32_t get_time_rtt() {
  402dc4:	b580      	push	{r7, lr}
  402dc6:	af00      	add	r7, sp, #0
	return rtt_read_timer_value(RTT);
  402dc8:	4802      	ldr	r0, [pc, #8]	; (402dd4 <get_time_rtt+0x10>)
  402dca:	4b03      	ldr	r3, [pc, #12]	; (402dd8 <get_time_rtt+0x14>)
  402dcc:	4798      	blx	r3
  402dce:	4603      	mov	r3, r0
}
  402dd0:	4618      	mov	r0, r3
  402dd2:	bd80      	pop	{r7, pc}
  402dd4:	400e1830 	.word	0x400e1830
  402dd8:	004002ad 	.word	0x004002ad

00402ddc <pulse>:

void pulse() {
  402ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dde:	af00      	add	r7, sp, #0
	pio_set(TRIG_PIO, TRIG_IDX_MASK);
  402de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402de4:	4818      	ldr	r0, [pc, #96]	; (402e48 <pulse+0x6c>)
  402de6:	4b19      	ldr	r3, [pc, #100]	; (402e4c <pulse+0x70>)
  402de8:	4798      	blx	r3
	delay_us(10);
  402dea:	4b19      	ldr	r3, [pc, #100]	; (402e50 <pulse+0x74>)
  402dec:	4798      	blx	r3
  402dee:	4603      	mov	r3, r0
  402df0:	4619      	mov	r1, r3
  402df2:	f04f 0200 	mov.w	r2, #0
  402df6:	460b      	mov	r3, r1
  402df8:	4614      	mov	r4, r2
  402dfa:	00a6      	lsls	r6, r4, #2
  402dfc:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402e00:	009d      	lsls	r5, r3, #2
  402e02:	462b      	mov	r3, r5
  402e04:	4634      	mov	r4, r6
  402e06:	185b      	adds	r3, r3, r1
  402e08:	eb44 0402 	adc.w	r4, r4, r2
  402e0c:	18db      	adds	r3, r3, r3
  402e0e:	eb44 0404 	adc.w	r4, r4, r4
  402e12:	4619      	mov	r1, r3
  402e14:	4622      	mov	r2, r4
  402e16:	4b0f      	ldr	r3, [pc, #60]	; (402e54 <pulse+0x78>)
  402e18:	f04f 0400 	mov.w	r4, #0
  402e1c:	18cd      	adds	r5, r1, r3
  402e1e:	eb42 0604 	adc.w	r6, r2, r4
  402e22:	4628      	mov	r0, r5
  402e24:	4631      	mov	r1, r6
  402e26:	4c0c      	ldr	r4, [pc, #48]	; (402e58 <pulse+0x7c>)
  402e28:	4a0c      	ldr	r2, [pc, #48]	; (402e5c <pulse+0x80>)
  402e2a:	f04f 0300 	mov.w	r3, #0
  402e2e:	47a0      	blx	r4
  402e30:	4603      	mov	r3, r0
  402e32:	460c      	mov	r4, r1
  402e34:	4618      	mov	r0, r3
  402e36:	4b0a      	ldr	r3, [pc, #40]	; (402e60 <pulse+0x84>)
  402e38:	4798      	blx	r3
	pio_clear(TRIG_PIO, TRIG_IDX_MASK);
  402e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402e3e:	4802      	ldr	r0, [pc, #8]	; (402e48 <pulse+0x6c>)
  402e40:	4b08      	ldr	r3, [pc, #32]	; (402e64 <pulse+0x88>)
  402e42:	4798      	blx	r3
}
  402e44:	bf00      	nop
  402e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e48:	400e1200 	.word	0x400e1200
  402e4c:	00401fc9 	.word	0x00401fc9
  402e50:	00402d35 	.word	0x00402d35
  402e54:	005a83df 	.word	0x005a83df
  402e58:	0040384d 	.word	0x0040384d
  402e5c:	005a83e0 	.word	0x005a83e0
  402e60:	20400001 	.word	0x20400001
  402e64:	00401fe5 	.word	0x00401fe5

00402e68 <RTT_Handler>:
void set_alarm_but1();
/************************************************************************/
/* handlers                                                             */
/************************************************************************/

void RTT_Handler(void) {
  402e68:	b580      	push	{r7, lr}
  402e6a:	b082      	sub	sp, #8
  402e6c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  402e6e:	4804      	ldr	r0, [pc, #16]	; (402e80 <RTT_Handler+0x18>)
  402e70:	4b04      	ldr	r3, [pc, #16]	; (402e84 <RTT_Handler+0x1c>)
  402e72:	4798      	blx	r3
  402e74:	6078      	str	r0, [r7, #4]
	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		//pin_toggle(TRIG_PIO, TRIG_IDX_MASK);    // BLINK Led
	}

}
  402e76:	bf00      	nop
  402e78:	3708      	adds	r7, #8
  402e7a:	46bd      	mov	sp, r7
  402e7c:	bd80      	pop	{r7, pc}
  402e7e:	bf00      	nop
  402e80:	400e1830 	.word	0x400e1830
  402e84:	004002db 	.word	0x004002db

00402e88 <io_init>:

/************************************************************************/
/* start                                                                */
/************************************************************************/
void io_init(void)
{
  402e88:	b590      	push	{r4, r7, lr}
  402e8a:	b083      	sub	sp, #12
  402e8c:	af02      	add	r7, sp, #8
	config_button(BUT1_PIO, BUT1_IDX_MASK, BUT1_PIO_ID, but1_callback, 1, 1); 
  402e8e:	2301      	movs	r3, #1
  402e90:	9301      	str	r3, [sp, #4]
  402e92:	2301      	movs	r3, #1
  402e94:	9300      	str	r3, [sp, #0]
  402e96:	4b10      	ldr	r3, [pc, #64]	; (402ed8 <io_init+0x50>)
  402e98:	2210      	movs	r2, #16
  402e9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e9e:	480f      	ldr	r0, [pc, #60]	; (402edc <io_init+0x54>)
  402ea0:	4c0f      	ldr	r4, [pc, #60]	; (402ee0 <io_init+0x58>)
  402ea2:	47a0      	blx	r4
	config_button(ECHO_PIO, ECHO_IDX_MASK, ECHO_PIO_ID, echo_callback, 0, 0);
  402ea4:	2300      	movs	r3, #0
  402ea6:	9301      	str	r3, [sp, #4]
  402ea8:	2300      	movs	r3, #0
  402eaa:	9300      	str	r3, [sp, #0]
  402eac:	4b0d      	ldr	r3, [pc, #52]	; (402ee4 <io_init+0x5c>)
  402eae:	2210      	movs	r2, #16
  402eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402eb4:	4809      	ldr	r0, [pc, #36]	; (402edc <io_init+0x54>)
  402eb6:	4c0a      	ldr	r4, [pc, #40]	; (402ee0 <io_init+0x58>)
  402eb8:	47a0      	blx	r4
	
	pmc_enable_periph_clk(TRIG_PIO_ID);
  402eba:	200c      	movs	r0, #12
  402ebc:	4b0a      	ldr	r3, [pc, #40]	; (402ee8 <io_init+0x60>)
  402ebe:	4798      	blx	r3
	pio_configure(TRIG_PIO, PIO_OUTPUT_1, TRIG_IDX_MASK, PIO_PULLUP);
  402ec0:	2301      	movs	r3, #1
  402ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402ec6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402eca:	4808      	ldr	r0, [pc, #32]	; (402eec <io_init+0x64>)
  402ecc:	4c08      	ldr	r4, [pc, #32]	; (402ef0 <io_init+0x68>)
  402ece:	47a0      	blx	r4
}
  402ed0:	bf00      	nop
  402ed2:	3704      	adds	r7, #4
  402ed4:	46bd      	mov	sp, r7
  402ed6:	bd90      	pop	{r4, r7, pc}
  402ed8:	00402d49 	.word	0x00402d49
  402edc:	400e1400 	.word	0x400e1400
  402ee0:	00400879 	.word	0x00400879
  402ee4:	00402d61 	.word	0x00402d61
  402ee8:	0040286d 	.word	0x0040286d
  402eec:	400e1200 	.word	0x400e1200
  402ef0:	0040223d 	.word	0x0040223d

00402ef4 <main>:

int main (void)
{
  402ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ef6:	b085      	sub	sp, #20
  402ef8:	af00      	add	r7, sp, #0
	board_init();
  402efa:	4b30      	ldr	r3, [pc, #192]	; (402fbc <main+0xc8>)
  402efc:	4798      	blx	r3
	sysclk_init();
  402efe:	4b30      	ldr	r3, [pc, #192]	; (402fc0 <main+0xcc>)
  402f00:	4798      	blx	r3
	
	char str[10];
	float distance;

  // Init OLED
	gfx_mono_ssd1306_init();
  402f02:	4b30      	ldr	r3, [pc, #192]	; (402fc4 <main+0xd0>)
  402f04:	4798      	blx	r3
	io_init(); 
  402f06:	4b30      	ldr	r3, [pc, #192]	; (402fc8 <main+0xd4>)
  402f08:	4798      	blx	r3
	gfx_mono_draw_string("init", 0, 16, &sysfont);
  402f0a:	4b30      	ldr	r3, [pc, #192]	; (402fcc <main+0xd8>)
  402f0c:	2210      	movs	r2, #16
  402f0e:	2100      	movs	r1, #0
  402f10:	482f      	ldr	r0, [pc, #188]	; (402fd0 <main+0xdc>)
  402f12:	4c30      	ldr	r4, [pc, #192]	; (402fd4 <main+0xe0>)
  402f14:	47a0      	blx	r4

  /* Insert application code here, after the board has been initialized. */
	while(1) {
		if(but1_flag) {
  402f16:	4b30      	ldr	r3, [pc, #192]	; (402fd8 <main+0xe4>)
  402f18:	781b      	ldrb	r3, [r3, #0]
  402f1a:	b2db      	uxtb	r3, r3
  402f1c:	2b00      	cmp	r3, #0
  402f1e:	d004      	beq.n	402f2a <main+0x36>
			pulse();
  402f20:	4b2e      	ldr	r3, [pc, #184]	; (402fdc <main+0xe8>)
  402f22:	4798      	blx	r3
			but1_flag = 0;
  402f24:	4b2c      	ldr	r3, [pc, #176]	; (402fd8 <main+0xe4>)
  402f26:	2200      	movs	r2, #0
  402f28:	701a      	strb	r2, [r3, #0]
		}
		if(echo_flag) {
  402f2a:	4b2d      	ldr	r3, [pc, #180]	; (402fe0 <main+0xec>)
  402f2c:	781b      	ldrb	r3, [r3, #0]
  402f2e:	b2db      	uxtb	r3, r3
  402f30:	2b00      	cmp	r3, #0
  402f32:	d0f0      	beq.n	402f16 <main+0x22>
			distance = (SOUND_SPEED*rtt_time)/(2.0 * freq);
  402f34:	4b2b      	ldr	r3, [pc, #172]	; (402fe4 <main+0xf0>)
  402f36:	681a      	ldr	r2, [r3, #0]
  402f38:	4b2b      	ldr	r3, [pc, #172]	; (402fe8 <main+0xf4>)
  402f3a:	4610      	mov	r0, r2
  402f3c:	4798      	blx	r3
  402f3e:	4c2b      	ldr	r4, [pc, #172]	; (402fec <main+0xf8>)
  402f40:	f04f 0200 	mov.w	r2, #0
  402f44:	4b2a      	ldr	r3, [pc, #168]	; (402ff0 <main+0xfc>)
  402f46:	47a0      	blx	r4
  402f48:	4603      	mov	r3, r0
  402f4a:	460c      	mov	r4, r1
  402f4c:	461d      	mov	r5, r3
  402f4e:	4626      	mov	r6, r4
  402f50:	4b28      	ldr	r3, [pc, #160]	; (402ff4 <main+0x100>)
  402f52:	681a      	ldr	r2, [r3, #0]
  402f54:	4b28      	ldr	r3, [pc, #160]	; (402ff8 <main+0x104>)
  402f56:	4610      	mov	r0, r2
  402f58:	4798      	blx	r3
  402f5a:	4c28      	ldr	r4, [pc, #160]	; (402ffc <main+0x108>)
  402f5c:	4602      	mov	r2, r0
  402f5e:	460b      	mov	r3, r1
  402f60:	47a0      	blx	r4
  402f62:	4603      	mov	r3, r0
  402f64:	460c      	mov	r4, r1
  402f66:	461a      	mov	r2, r3
  402f68:	4623      	mov	r3, r4
  402f6a:	4c25      	ldr	r4, [pc, #148]	; (403000 <main+0x10c>)
  402f6c:	4628      	mov	r0, r5
  402f6e:	4631      	mov	r1, r6
  402f70:	47a0      	blx	r4
  402f72:	4603      	mov	r3, r0
  402f74:	460c      	mov	r4, r1
  402f76:	4619      	mov	r1, r3
  402f78:	4622      	mov	r2, r4
  402f7a:	4b22      	ldr	r3, [pc, #136]	; (403004 <main+0x110>)
  402f7c:	4608      	mov	r0, r1
  402f7e:	4611      	mov	r1, r2
  402f80:	4798      	blx	r3
  402f82:	4603      	mov	r3, r0
  402f84:	60fb      	str	r3, [r7, #12]
			gfx_mono_draw_string("     ", 0, 16, &sysfont);
  402f86:	4b11      	ldr	r3, [pc, #68]	; (402fcc <main+0xd8>)
  402f88:	2210      	movs	r2, #16
  402f8a:	2100      	movs	r1, #0
  402f8c:	481e      	ldr	r0, [pc, #120]	; (403008 <main+0x114>)
  402f8e:	4c11      	ldr	r4, [pc, #68]	; (402fd4 <main+0xe0>)
  402f90:	47a0      	blx	r4
			sprintf(str, "%f", distance);
  402f92:	4b1e      	ldr	r3, [pc, #120]	; (40300c <main+0x118>)
  402f94:	68f8      	ldr	r0, [r7, #12]
  402f96:	4798      	blx	r3
  402f98:	4603      	mov	r3, r0
  402f9a:	460c      	mov	r4, r1
  402f9c:	4638      	mov	r0, r7
  402f9e:	461a      	mov	r2, r3
  402fa0:	4623      	mov	r3, r4
  402fa2:	491b      	ldr	r1, [pc, #108]	; (403010 <main+0x11c>)
  402fa4:	4c1b      	ldr	r4, [pc, #108]	; (403014 <main+0x120>)
  402fa6:	47a0      	blx	r4
			gfx_mono_draw_string(str, 0, 16, &sysfont);
  402fa8:	4638      	mov	r0, r7
  402faa:	4b08      	ldr	r3, [pc, #32]	; (402fcc <main+0xd8>)
  402fac:	2210      	movs	r2, #16
  402fae:	2100      	movs	r1, #0
  402fb0:	4c08      	ldr	r4, [pc, #32]	; (402fd4 <main+0xe0>)
  402fb2:	47a0      	blx	r4
			echo_flag = 0;
  402fb4:	4b0a      	ldr	r3, [pc, #40]	; (402fe0 <main+0xec>)
  402fb6:	2200      	movs	r2, #0
  402fb8:	701a      	strb	r2, [r3, #0]
		if(but1_flag) {
  402fba:	e7ac      	b.n	402f16 <main+0x22>
  402fbc:	00401ee1 	.word	0x00401ee1
  402fc0:	00401a1d 	.word	0x00401a1d
  402fc4:	00400d69 	.word	0x00400d69
  402fc8:	00402e89 	.word	0x00402e89
  402fcc:	2040000c 	.word	0x2040000c
  402fd0:	00408418 	.word	0x00408418
  402fd4:	00400c65 	.word	0x00400c65
  402fd8:	20400ca4 	.word	0x20400ca4
  402fdc:	00402ddd 	.word	0x00402ddd
  402fe0:	20400cac 	.word	0x20400cac
  402fe4:	20400c6c 	.word	0x20400c6c
  402fe8:	0040329d 	.word	0x0040329d
  402fec:	00403389 	.word	0x00403389
  402ff0:	40754000 	.word	0x40754000
  402ff4:	20400020 	.word	0x20400020
  402ff8:	004032bd 	.word	0x004032bd
  402ffc:	00403025 	.word	0x00403025
  403000:	004035dd 	.word	0x004035dd
  403004:	004037ad 	.word	0x004037ad
  403008:	00408420 	.word	0x00408420
  40300c:	004032e1 	.word	0x004032e1
  403010:	00408428 	.word	0x00408428
  403014:	00403c49 	.word	0x00403c49

00403018 <__aeabi_drsub>:
  403018:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40301c:	e002      	b.n	403024 <__adddf3>
  40301e:	bf00      	nop

00403020 <__aeabi_dsub>:
  403020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403024 <__adddf3>:
  403024:	b530      	push	{r4, r5, lr}
  403026:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40302a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40302e:	ea94 0f05 	teq	r4, r5
  403032:	bf08      	it	eq
  403034:	ea90 0f02 	teqeq	r0, r2
  403038:	bf1f      	itttt	ne
  40303a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40303e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403042:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403046:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40304a:	f000 80e2 	beq.w	403212 <__adddf3+0x1ee>
  40304e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403052:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403056:	bfb8      	it	lt
  403058:	426d      	neglt	r5, r5
  40305a:	dd0c      	ble.n	403076 <__adddf3+0x52>
  40305c:	442c      	add	r4, r5
  40305e:	ea80 0202 	eor.w	r2, r0, r2
  403062:	ea81 0303 	eor.w	r3, r1, r3
  403066:	ea82 0000 	eor.w	r0, r2, r0
  40306a:	ea83 0101 	eor.w	r1, r3, r1
  40306e:	ea80 0202 	eor.w	r2, r0, r2
  403072:	ea81 0303 	eor.w	r3, r1, r3
  403076:	2d36      	cmp	r5, #54	; 0x36
  403078:	bf88      	it	hi
  40307a:	bd30      	pophi	{r4, r5, pc}
  40307c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403080:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403084:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403088:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40308c:	d002      	beq.n	403094 <__adddf3+0x70>
  40308e:	4240      	negs	r0, r0
  403090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403094:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403098:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40309c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4030a0:	d002      	beq.n	4030a8 <__adddf3+0x84>
  4030a2:	4252      	negs	r2, r2
  4030a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4030a8:	ea94 0f05 	teq	r4, r5
  4030ac:	f000 80a7 	beq.w	4031fe <__adddf3+0x1da>
  4030b0:	f1a4 0401 	sub.w	r4, r4, #1
  4030b4:	f1d5 0e20 	rsbs	lr, r5, #32
  4030b8:	db0d      	blt.n	4030d6 <__adddf3+0xb2>
  4030ba:	fa02 fc0e 	lsl.w	ip, r2, lr
  4030be:	fa22 f205 	lsr.w	r2, r2, r5
  4030c2:	1880      	adds	r0, r0, r2
  4030c4:	f141 0100 	adc.w	r1, r1, #0
  4030c8:	fa03 f20e 	lsl.w	r2, r3, lr
  4030cc:	1880      	adds	r0, r0, r2
  4030ce:	fa43 f305 	asr.w	r3, r3, r5
  4030d2:	4159      	adcs	r1, r3
  4030d4:	e00e      	b.n	4030f4 <__adddf3+0xd0>
  4030d6:	f1a5 0520 	sub.w	r5, r5, #32
  4030da:	f10e 0e20 	add.w	lr, lr, #32
  4030de:	2a01      	cmp	r2, #1
  4030e0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4030e4:	bf28      	it	cs
  4030e6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4030ea:	fa43 f305 	asr.w	r3, r3, r5
  4030ee:	18c0      	adds	r0, r0, r3
  4030f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4030f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4030f8:	d507      	bpl.n	40310a <__adddf3+0xe6>
  4030fa:	f04f 0e00 	mov.w	lr, #0
  4030fe:	f1dc 0c00 	rsbs	ip, ip, #0
  403102:	eb7e 0000 	sbcs.w	r0, lr, r0
  403106:	eb6e 0101 	sbc.w	r1, lr, r1
  40310a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40310e:	d31b      	bcc.n	403148 <__adddf3+0x124>
  403110:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403114:	d30c      	bcc.n	403130 <__adddf3+0x10c>
  403116:	0849      	lsrs	r1, r1, #1
  403118:	ea5f 0030 	movs.w	r0, r0, rrx
  40311c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403120:	f104 0401 	add.w	r4, r4, #1
  403124:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403128:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40312c:	f080 809a 	bcs.w	403264 <__adddf3+0x240>
  403130:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403134:	bf08      	it	eq
  403136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40313a:	f150 0000 	adcs.w	r0, r0, #0
  40313e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403142:	ea41 0105 	orr.w	r1, r1, r5
  403146:	bd30      	pop	{r4, r5, pc}
  403148:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40314c:	4140      	adcs	r0, r0
  40314e:	eb41 0101 	adc.w	r1, r1, r1
  403152:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403156:	f1a4 0401 	sub.w	r4, r4, #1
  40315a:	d1e9      	bne.n	403130 <__adddf3+0x10c>
  40315c:	f091 0f00 	teq	r1, #0
  403160:	bf04      	itt	eq
  403162:	4601      	moveq	r1, r0
  403164:	2000      	moveq	r0, #0
  403166:	fab1 f381 	clz	r3, r1
  40316a:	bf08      	it	eq
  40316c:	3320      	addeq	r3, #32
  40316e:	f1a3 030b 	sub.w	r3, r3, #11
  403172:	f1b3 0220 	subs.w	r2, r3, #32
  403176:	da0c      	bge.n	403192 <__adddf3+0x16e>
  403178:	320c      	adds	r2, #12
  40317a:	dd08      	ble.n	40318e <__adddf3+0x16a>
  40317c:	f102 0c14 	add.w	ip, r2, #20
  403180:	f1c2 020c 	rsb	r2, r2, #12
  403184:	fa01 f00c 	lsl.w	r0, r1, ip
  403188:	fa21 f102 	lsr.w	r1, r1, r2
  40318c:	e00c      	b.n	4031a8 <__adddf3+0x184>
  40318e:	f102 0214 	add.w	r2, r2, #20
  403192:	bfd8      	it	le
  403194:	f1c2 0c20 	rsble	ip, r2, #32
  403198:	fa01 f102 	lsl.w	r1, r1, r2
  40319c:	fa20 fc0c 	lsr.w	ip, r0, ip
  4031a0:	bfdc      	itt	le
  4031a2:	ea41 010c 	orrle.w	r1, r1, ip
  4031a6:	4090      	lslle	r0, r2
  4031a8:	1ae4      	subs	r4, r4, r3
  4031aa:	bfa2      	ittt	ge
  4031ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4031b0:	4329      	orrge	r1, r5
  4031b2:	bd30      	popge	{r4, r5, pc}
  4031b4:	ea6f 0404 	mvn.w	r4, r4
  4031b8:	3c1f      	subs	r4, #31
  4031ba:	da1c      	bge.n	4031f6 <__adddf3+0x1d2>
  4031bc:	340c      	adds	r4, #12
  4031be:	dc0e      	bgt.n	4031de <__adddf3+0x1ba>
  4031c0:	f104 0414 	add.w	r4, r4, #20
  4031c4:	f1c4 0220 	rsb	r2, r4, #32
  4031c8:	fa20 f004 	lsr.w	r0, r0, r4
  4031cc:	fa01 f302 	lsl.w	r3, r1, r2
  4031d0:	ea40 0003 	orr.w	r0, r0, r3
  4031d4:	fa21 f304 	lsr.w	r3, r1, r4
  4031d8:	ea45 0103 	orr.w	r1, r5, r3
  4031dc:	bd30      	pop	{r4, r5, pc}
  4031de:	f1c4 040c 	rsb	r4, r4, #12
  4031e2:	f1c4 0220 	rsb	r2, r4, #32
  4031e6:	fa20 f002 	lsr.w	r0, r0, r2
  4031ea:	fa01 f304 	lsl.w	r3, r1, r4
  4031ee:	ea40 0003 	orr.w	r0, r0, r3
  4031f2:	4629      	mov	r1, r5
  4031f4:	bd30      	pop	{r4, r5, pc}
  4031f6:	fa21 f004 	lsr.w	r0, r1, r4
  4031fa:	4629      	mov	r1, r5
  4031fc:	bd30      	pop	{r4, r5, pc}
  4031fe:	f094 0f00 	teq	r4, #0
  403202:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403206:	bf06      	itte	eq
  403208:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40320c:	3401      	addeq	r4, #1
  40320e:	3d01      	subne	r5, #1
  403210:	e74e      	b.n	4030b0 <__adddf3+0x8c>
  403212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403216:	bf18      	it	ne
  403218:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40321c:	d029      	beq.n	403272 <__adddf3+0x24e>
  40321e:	ea94 0f05 	teq	r4, r5
  403222:	bf08      	it	eq
  403224:	ea90 0f02 	teqeq	r0, r2
  403228:	d005      	beq.n	403236 <__adddf3+0x212>
  40322a:	ea54 0c00 	orrs.w	ip, r4, r0
  40322e:	bf04      	itt	eq
  403230:	4619      	moveq	r1, r3
  403232:	4610      	moveq	r0, r2
  403234:	bd30      	pop	{r4, r5, pc}
  403236:	ea91 0f03 	teq	r1, r3
  40323a:	bf1e      	ittt	ne
  40323c:	2100      	movne	r1, #0
  40323e:	2000      	movne	r0, #0
  403240:	bd30      	popne	{r4, r5, pc}
  403242:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403246:	d105      	bne.n	403254 <__adddf3+0x230>
  403248:	0040      	lsls	r0, r0, #1
  40324a:	4149      	adcs	r1, r1
  40324c:	bf28      	it	cs
  40324e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403252:	bd30      	pop	{r4, r5, pc}
  403254:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403258:	bf3c      	itt	cc
  40325a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40325e:	bd30      	popcc	{r4, r5, pc}
  403260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403264:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40326c:	f04f 0000 	mov.w	r0, #0
  403270:	bd30      	pop	{r4, r5, pc}
  403272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403276:	bf1a      	itte	ne
  403278:	4619      	movne	r1, r3
  40327a:	4610      	movne	r0, r2
  40327c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403280:	bf1c      	itt	ne
  403282:	460b      	movne	r3, r1
  403284:	4602      	movne	r2, r0
  403286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40328a:	bf06      	itte	eq
  40328c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403290:	ea91 0f03 	teqeq	r1, r3
  403294:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403298:	bd30      	pop	{r4, r5, pc}
  40329a:	bf00      	nop

0040329c <__aeabi_ui2d>:
  40329c:	f090 0f00 	teq	r0, #0
  4032a0:	bf04      	itt	eq
  4032a2:	2100      	moveq	r1, #0
  4032a4:	4770      	bxeq	lr
  4032a6:	b530      	push	{r4, r5, lr}
  4032a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4032ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4032b0:	f04f 0500 	mov.w	r5, #0
  4032b4:	f04f 0100 	mov.w	r1, #0
  4032b8:	e750      	b.n	40315c <__adddf3+0x138>
  4032ba:	bf00      	nop

004032bc <__aeabi_i2d>:
  4032bc:	f090 0f00 	teq	r0, #0
  4032c0:	bf04      	itt	eq
  4032c2:	2100      	moveq	r1, #0
  4032c4:	4770      	bxeq	lr
  4032c6:	b530      	push	{r4, r5, lr}
  4032c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4032cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4032d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4032d4:	bf48      	it	mi
  4032d6:	4240      	negmi	r0, r0
  4032d8:	f04f 0100 	mov.w	r1, #0
  4032dc:	e73e      	b.n	40315c <__adddf3+0x138>
  4032de:	bf00      	nop

004032e0 <__aeabi_f2d>:
  4032e0:	0042      	lsls	r2, r0, #1
  4032e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4032e6:	ea4f 0131 	mov.w	r1, r1, rrx
  4032ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4032ee:	bf1f      	itttt	ne
  4032f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4032f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4032f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4032fc:	4770      	bxne	lr
  4032fe:	f092 0f00 	teq	r2, #0
  403302:	bf14      	ite	ne
  403304:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403308:	4770      	bxeq	lr
  40330a:	b530      	push	{r4, r5, lr}
  40330c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403318:	e720      	b.n	40315c <__adddf3+0x138>
  40331a:	bf00      	nop

0040331c <__aeabi_ul2d>:
  40331c:	ea50 0201 	orrs.w	r2, r0, r1
  403320:	bf08      	it	eq
  403322:	4770      	bxeq	lr
  403324:	b530      	push	{r4, r5, lr}
  403326:	f04f 0500 	mov.w	r5, #0
  40332a:	e00a      	b.n	403342 <__aeabi_l2d+0x16>

0040332c <__aeabi_l2d>:
  40332c:	ea50 0201 	orrs.w	r2, r0, r1
  403330:	bf08      	it	eq
  403332:	4770      	bxeq	lr
  403334:	b530      	push	{r4, r5, lr}
  403336:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40333a:	d502      	bpl.n	403342 <__aeabi_l2d+0x16>
  40333c:	4240      	negs	r0, r0
  40333e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403342:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403346:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40334a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40334e:	f43f aedc 	beq.w	40310a <__adddf3+0xe6>
  403352:	f04f 0203 	mov.w	r2, #3
  403356:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40335a:	bf18      	it	ne
  40335c:	3203      	addne	r2, #3
  40335e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403362:	bf18      	it	ne
  403364:	3203      	addne	r2, #3
  403366:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40336a:	f1c2 0320 	rsb	r3, r2, #32
  40336e:	fa00 fc03 	lsl.w	ip, r0, r3
  403372:	fa20 f002 	lsr.w	r0, r0, r2
  403376:	fa01 fe03 	lsl.w	lr, r1, r3
  40337a:	ea40 000e 	orr.w	r0, r0, lr
  40337e:	fa21 f102 	lsr.w	r1, r1, r2
  403382:	4414      	add	r4, r2
  403384:	e6c1      	b.n	40310a <__adddf3+0xe6>
  403386:	bf00      	nop

00403388 <__aeabi_dmul>:
  403388:	b570      	push	{r4, r5, r6, lr}
  40338a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40338e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403392:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403396:	bf1d      	ittte	ne
  403398:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40339c:	ea94 0f0c 	teqne	r4, ip
  4033a0:	ea95 0f0c 	teqne	r5, ip
  4033a4:	f000 f8de 	bleq	403564 <__aeabi_dmul+0x1dc>
  4033a8:	442c      	add	r4, r5
  4033aa:	ea81 0603 	eor.w	r6, r1, r3
  4033ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4033b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4033b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4033ba:	bf18      	it	ne
  4033bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4033c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4033c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4033c8:	d038      	beq.n	40343c <__aeabi_dmul+0xb4>
  4033ca:	fba0 ce02 	umull	ip, lr, r0, r2
  4033ce:	f04f 0500 	mov.w	r5, #0
  4033d2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4033d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4033da:	fbe0 e503 	umlal	lr, r5, r0, r3
  4033de:	f04f 0600 	mov.w	r6, #0
  4033e2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4033e6:	f09c 0f00 	teq	ip, #0
  4033ea:	bf18      	it	ne
  4033ec:	f04e 0e01 	orrne.w	lr, lr, #1
  4033f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4033f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4033f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4033fc:	d204      	bcs.n	403408 <__aeabi_dmul+0x80>
  4033fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403402:	416d      	adcs	r5, r5
  403404:	eb46 0606 	adc.w	r6, r6, r6
  403408:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40340c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403410:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403414:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403418:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40341c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403420:	bf88      	it	hi
  403422:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403426:	d81e      	bhi.n	403466 <__aeabi_dmul+0xde>
  403428:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40342c:	bf08      	it	eq
  40342e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403432:	f150 0000 	adcs.w	r0, r0, #0
  403436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40343a:	bd70      	pop	{r4, r5, r6, pc}
  40343c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403440:	ea46 0101 	orr.w	r1, r6, r1
  403444:	ea40 0002 	orr.w	r0, r0, r2
  403448:	ea81 0103 	eor.w	r1, r1, r3
  40344c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403450:	bfc2      	ittt	gt
  403452:	ebd4 050c 	rsbsgt	r5, r4, ip
  403456:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40345a:	bd70      	popgt	{r4, r5, r6, pc}
  40345c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403460:	f04f 0e00 	mov.w	lr, #0
  403464:	3c01      	subs	r4, #1
  403466:	f300 80ab 	bgt.w	4035c0 <__aeabi_dmul+0x238>
  40346a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40346e:	bfde      	ittt	le
  403470:	2000      	movle	r0, #0
  403472:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403476:	bd70      	pople	{r4, r5, r6, pc}
  403478:	f1c4 0400 	rsb	r4, r4, #0
  40347c:	3c20      	subs	r4, #32
  40347e:	da35      	bge.n	4034ec <__aeabi_dmul+0x164>
  403480:	340c      	adds	r4, #12
  403482:	dc1b      	bgt.n	4034bc <__aeabi_dmul+0x134>
  403484:	f104 0414 	add.w	r4, r4, #20
  403488:	f1c4 0520 	rsb	r5, r4, #32
  40348c:	fa00 f305 	lsl.w	r3, r0, r5
  403490:	fa20 f004 	lsr.w	r0, r0, r4
  403494:	fa01 f205 	lsl.w	r2, r1, r5
  403498:	ea40 0002 	orr.w	r0, r0, r2
  40349c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4034a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4034a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4034a8:	fa21 f604 	lsr.w	r6, r1, r4
  4034ac:	eb42 0106 	adc.w	r1, r2, r6
  4034b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4034b4:	bf08      	it	eq
  4034b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4034ba:	bd70      	pop	{r4, r5, r6, pc}
  4034bc:	f1c4 040c 	rsb	r4, r4, #12
  4034c0:	f1c4 0520 	rsb	r5, r4, #32
  4034c4:	fa00 f304 	lsl.w	r3, r0, r4
  4034c8:	fa20 f005 	lsr.w	r0, r0, r5
  4034cc:	fa01 f204 	lsl.w	r2, r1, r4
  4034d0:	ea40 0002 	orr.w	r0, r0, r2
  4034d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4034d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4034dc:	f141 0100 	adc.w	r1, r1, #0
  4034e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4034e4:	bf08      	it	eq
  4034e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4034ea:	bd70      	pop	{r4, r5, r6, pc}
  4034ec:	f1c4 0520 	rsb	r5, r4, #32
  4034f0:	fa00 f205 	lsl.w	r2, r0, r5
  4034f4:	ea4e 0e02 	orr.w	lr, lr, r2
  4034f8:	fa20 f304 	lsr.w	r3, r0, r4
  4034fc:	fa01 f205 	lsl.w	r2, r1, r5
  403500:	ea43 0302 	orr.w	r3, r3, r2
  403504:	fa21 f004 	lsr.w	r0, r1, r4
  403508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40350c:	fa21 f204 	lsr.w	r2, r1, r4
  403510:	ea20 0002 	bic.w	r0, r0, r2
  403514:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40351c:	bf08      	it	eq
  40351e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403522:	bd70      	pop	{r4, r5, r6, pc}
  403524:	f094 0f00 	teq	r4, #0
  403528:	d10f      	bne.n	40354a <__aeabi_dmul+0x1c2>
  40352a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40352e:	0040      	lsls	r0, r0, #1
  403530:	eb41 0101 	adc.w	r1, r1, r1
  403534:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403538:	bf08      	it	eq
  40353a:	3c01      	subeq	r4, #1
  40353c:	d0f7      	beq.n	40352e <__aeabi_dmul+0x1a6>
  40353e:	ea41 0106 	orr.w	r1, r1, r6
  403542:	f095 0f00 	teq	r5, #0
  403546:	bf18      	it	ne
  403548:	4770      	bxne	lr
  40354a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40354e:	0052      	lsls	r2, r2, #1
  403550:	eb43 0303 	adc.w	r3, r3, r3
  403554:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403558:	bf08      	it	eq
  40355a:	3d01      	subeq	r5, #1
  40355c:	d0f7      	beq.n	40354e <__aeabi_dmul+0x1c6>
  40355e:	ea43 0306 	orr.w	r3, r3, r6
  403562:	4770      	bx	lr
  403564:	ea94 0f0c 	teq	r4, ip
  403568:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40356c:	bf18      	it	ne
  40356e:	ea95 0f0c 	teqne	r5, ip
  403572:	d00c      	beq.n	40358e <__aeabi_dmul+0x206>
  403574:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403578:	bf18      	it	ne
  40357a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40357e:	d1d1      	bne.n	403524 <__aeabi_dmul+0x19c>
  403580:	ea81 0103 	eor.w	r1, r1, r3
  403584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403588:	f04f 0000 	mov.w	r0, #0
  40358c:	bd70      	pop	{r4, r5, r6, pc}
  40358e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403592:	bf06      	itte	eq
  403594:	4610      	moveq	r0, r2
  403596:	4619      	moveq	r1, r3
  403598:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40359c:	d019      	beq.n	4035d2 <__aeabi_dmul+0x24a>
  40359e:	ea94 0f0c 	teq	r4, ip
  4035a2:	d102      	bne.n	4035aa <__aeabi_dmul+0x222>
  4035a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4035a8:	d113      	bne.n	4035d2 <__aeabi_dmul+0x24a>
  4035aa:	ea95 0f0c 	teq	r5, ip
  4035ae:	d105      	bne.n	4035bc <__aeabi_dmul+0x234>
  4035b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4035b4:	bf1c      	itt	ne
  4035b6:	4610      	movne	r0, r2
  4035b8:	4619      	movne	r1, r3
  4035ba:	d10a      	bne.n	4035d2 <__aeabi_dmul+0x24a>
  4035bc:	ea81 0103 	eor.w	r1, r1, r3
  4035c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4035c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4035c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4035cc:	f04f 0000 	mov.w	r0, #0
  4035d0:	bd70      	pop	{r4, r5, r6, pc}
  4035d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4035d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4035da:	bd70      	pop	{r4, r5, r6, pc}

004035dc <__aeabi_ddiv>:
  4035dc:	b570      	push	{r4, r5, r6, lr}
  4035de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4035e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4035e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4035ea:	bf1d      	ittte	ne
  4035ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4035f0:	ea94 0f0c 	teqne	r4, ip
  4035f4:	ea95 0f0c 	teqne	r5, ip
  4035f8:	f000 f8a7 	bleq	40374a <__aeabi_ddiv+0x16e>
  4035fc:	eba4 0405 	sub.w	r4, r4, r5
  403600:	ea81 0e03 	eor.w	lr, r1, r3
  403604:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403608:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40360c:	f000 8088 	beq.w	403720 <__aeabi_ddiv+0x144>
  403610:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403614:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403618:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40361c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403620:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403624:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403628:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40362c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403630:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403634:	429d      	cmp	r5, r3
  403636:	bf08      	it	eq
  403638:	4296      	cmpeq	r6, r2
  40363a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40363e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403642:	d202      	bcs.n	40364a <__aeabi_ddiv+0x6e>
  403644:	085b      	lsrs	r3, r3, #1
  403646:	ea4f 0232 	mov.w	r2, r2, rrx
  40364a:	1ab6      	subs	r6, r6, r2
  40364c:	eb65 0503 	sbc.w	r5, r5, r3
  403650:	085b      	lsrs	r3, r3, #1
  403652:	ea4f 0232 	mov.w	r2, r2, rrx
  403656:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40365a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40365e:	ebb6 0e02 	subs.w	lr, r6, r2
  403662:	eb75 0e03 	sbcs.w	lr, r5, r3
  403666:	bf22      	ittt	cs
  403668:	1ab6      	subcs	r6, r6, r2
  40366a:	4675      	movcs	r5, lr
  40366c:	ea40 000c 	orrcs.w	r0, r0, ip
  403670:	085b      	lsrs	r3, r3, #1
  403672:	ea4f 0232 	mov.w	r2, r2, rrx
  403676:	ebb6 0e02 	subs.w	lr, r6, r2
  40367a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40367e:	bf22      	ittt	cs
  403680:	1ab6      	subcs	r6, r6, r2
  403682:	4675      	movcs	r5, lr
  403684:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403688:	085b      	lsrs	r3, r3, #1
  40368a:	ea4f 0232 	mov.w	r2, r2, rrx
  40368e:	ebb6 0e02 	subs.w	lr, r6, r2
  403692:	eb75 0e03 	sbcs.w	lr, r5, r3
  403696:	bf22      	ittt	cs
  403698:	1ab6      	subcs	r6, r6, r2
  40369a:	4675      	movcs	r5, lr
  40369c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4036a0:	085b      	lsrs	r3, r3, #1
  4036a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4036a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4036aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036ae:	bf22      	ittt	cs
  4036b0:	1ab6      	subcs	r6, r6, r2
  4036b2:	4675      	movcs	r5, lr
  4036b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4036b8:	ea55 0e06 	orrs.w	lr, r5, r6
  4036bc:	d018      	beq.n	4036f0 <__aeabi_ddiv+0x114>
  4036be:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4036c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4036c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4036ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4036ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4036d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4036d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4036da:	d1c0      	bne.n	40365e <__aeabi_ddiv+0x82>
  4036dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4036e0:	d10b      	bne.n	4036fa <__aeabi_ddiv+0x11e>
  4036e2:	ea41 0100 	orr.w	r1, r1, r0
  4036e6:	f04f 0000 	mov.w	r0, #0
  4036ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4036ee:	e7b6      	b.n	40365e <__aeabi_ddiv+0x82>
  4036f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4036f4:	bf04      	itt	eq
  4036f6:	4301      	orreq	r1, r0
  4036f8:	2000      	moveq	r0, #0
  4036fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4036fe:	bf88      	it	hi
  403700:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403704:	f63f aeaf 	bhi.w	403466 <__aeabi_dmul+0xde>
  403708:	ebb5 0c03 	subs.w	ip, r5, r3
  40370c:	bf04      	itt	eq
  40370e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403712:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403716:	f150 0000 	adcs.w	r0, r0, #0
  40371a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40371e:	bd70      	pop	{r4, r5, r6, pc}
  403720:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403724:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403728:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40372c:	bfc2      	ittt	gt
  40372e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403732:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403736:	bd70      	popgt	{r4, r5, r6, pc}
  403738:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40373c:	f04f 0e00 	mov.w	lr, #0
  403740:	3c01      	subs	r4, #1
  403742:	e690      	b.n	403466 <__aeabi_dmul+0xde>
  403744:	ea45 0e06 	orr.w	lr, r5, r6
  403748:	e68d      	b.n	403466 <__aeabi_dmul+0xde>
  40374a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40374e:	ea94 0f0c 	teq	r4, ip
  403752:	bf08      	it	eq
  403754:	ea95 0f0c 	teqeq	r5, ip
  403758:	f43f af3b 	beq.w	4035d2 <__aeabi_dmul+0x24a>
  40375c:	ea94 0f0c 	teq	r4, ip
  403760:	d10a      	bne.n	403778 <__aeabi_ddiv+0x19c>
  403762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403766:	f47f af34 	bne.w	4035d2 <__aeabi_dmul+0x24a>
  40376a:	ea95 0f0c 	teq	r5, ip
  40376e:	f47f af25 	bne.w	4035bc <__aeabi_dmul+0x234>
  403772:	4610      	mov	r0, r2
  403774:	4619      	mov	r1, r3
  403776:	e72c      	b.n	4035d2 <__aeabi_dmul+0x24a>
  403778:	ea95 0f0c 	teq	r5, ip
  40377c:	d106      	bne.n	40378c <__aeabi_ddiv+0x1b0>
  40377e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403782:	f43f aefd 	beq.w	403580 <__aeabi_dmul+0x1f8>
  403786:	4610      	mov	r0, r2
  403788:	4619      	mov	r1, r3
  40378a:	e722      	b.n	4035d2 <__aeabi_dmul+0x24a>
  40378c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403790:	bf18      	it	ne
  403792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403796:	f47f aec5 	bne.w	403524 <__aeabi_dmul+0x19c>
  40379a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40379e:	f47f af0d 	bne.w	4035bc <__aeabi_dmul+0x234>
  4037a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4037a6:	f47f aeeb 	bne.w	403580 <__aeabi_dmul+0x1f8>
  4037aa:	e712      	b.n	4035d2 <__aeabi_dmul+0x24a>

004037ac <__aeabi_d2f>:
  4037ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4037b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4037b4:	bf24      	itt	cs
  4037b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4037ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4037be:	d90d      	bls.n	4037dc <__aeabi_d2f+0x30>
  4037c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4037c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4037c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4037cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4037d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4037d4:	bf08      	it	eq
  4037d6:	f020 0001 	biceq.w	r0, r0, #1
  4037da:	4770      	bx	lr
  4037dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4037e0:	d121      	bne.n	403826 <__aeabi_d2f+0x7a>
  4037e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4037e6:	bfbc      	itt	lt
  4037e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4037ec:	4770      	bxlt	lr
  4037ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4037f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4037f6:	f1c2 0218 	rsb	r2, r2, #24
  4037fa:	f1c2 0c20 	rsb	ip, r2, #32
  4037fe:	fa10 f30c 	lsls.w	r3, r0, ip
  403802:	fa20 f002 	lsr.w	r0, r0, r2
  403806:	bf18      	it	ne
  403808:	f040 0001 	orrne.w	r0, r0, #1
  40380c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403810:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403814:	fa03 fc0c 	lsl.w	ip, r3, ip
  403818:	ea40 000c 	orr.w	r0, r0, ip
  40381c:	fa23 f302 	lsr.w	r3, r3, r2
  403820:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403824:	e7cc      	b.n	4037c0 <__aeabi_d2f+0x14>
  403826:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40382a:	d107      	bne.n	40383c <__aeabi_d2f+0x90>
  40382c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403830:	bf1e      	ittt	ne
  403832:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403836:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40383a:	4770      	bxne	lr
  40383c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403848:	4770      	bx	lr
  40384a:	bf00      	nop

0040384c <__aeabi_uldivmod>:
  40384c:	b953      	cbnz	r3, 403864 <__aeabi_uldivmod+0x18>
  40384e:	b94a      	cbnz	r2, 403864 <__aeabi_uldivmod+0x18>
  403850:	2900      	cmp	r1, #0
  403852:	bf08      	it	eq
  403854:	2800      	cmpeq	r0, #0
  403856:	bf1c      	itt	ne
  403858:	f04f 31ff 	movne.w	r1, #4294967295
  40385c:	f04f 30ff 	movne.w	r0, #4294967295
  403860:	f000 b97a 	b.w	403b58 <__aeabi_idiv0>
  403864:	f1ad 0c08 	sub.w	ip, sp, #8
  403868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40386c:	f000 f806 	bl	40387c <__udivmoddi4>
  403870:	f8dd e004 	ldr.w	lr, [sp, #4]
  403874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403878:	b004      	add	sp, #16
  40387a:	4770      	bx	lr

0040387c <__udivmoddi4>:
  40387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403880:	468c      	mov	ip, r1
  403882:	460d      	mov	r5, r1
  403884:	4604      	mov	r4, r0
  403886:	9e08      	ldr	r6, [sp, #32]
  403888:	2b00      	cmp	r3, #0
  40388a:	d151      	bne.n	403930 <__udivmoddi4+0xb4>
  40388c:	428a      	cmp	r2, r1
  40388e:	4617      	mov	r7, r2
  403890:	d96d      	bls.n	40396e <__udivmoddi4+0xf2>
  403892:	fab2 fe82 	clz	lr, r2
  403896:	f1be 0f00 	cmp.w	lr, #0
  40389a:	d00b      	beq.n	4038b4 <__udivmoddi4+0x38>
  40389c:	f1ce 0c20 	rsb	ip, lr, #32
  4038a0:	fa01 f50e 	lsl.w	r5, r1, lr
  4038a4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4038a8:	fa02 f70e 	lsl.w	r7, r2, lr
  4038ac:	ea4c 0c05 	orr.w	ip, ip, r5
  4038b0:	fa00 f40e 	lsl.w	r4, r0, lr
  4038b4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4038b8:	0c25      	lsrs	r5, r4, #16
  4038ba:	fbbc f8fa 	udiv	r8, ip, sl
  4038be:	fa1f f987 	uxth.w	r9, r7
  4038c2:	fb0a cc18 	mls	ip, sl, r8, ip
  4038c6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4038ca:	fb08 f309 	mul.w	r3, r8, r9
  4038ce:	42ab      	cmp	r3, r5
  4038d0:	d90a      	bls.n	4038e8 <__udivmoddi4+0x6c>
  4038d2:	19ed      	adds	r5, r5, r7
  4038d4:	f108 32ff 	add.w	r2, r8, #4294967295
  4038d8:	f080 8123 	bcs.w	403b22 <__udivmoddi4+0x2a6>
  4038dc:	42ab      	cmp	r3, r5
  4038de:	f240 8120 	bls.w	403b22 <__udivmoddi4+0x2a6>
  4038e2:	f1a8 0802 	sub.w	r8, r8, #2
  4038e6:	443d      	add	r5, r7
  4038e8:	1aed      	subs	r5, r5, r3
  4038ea:	b2a4      	uxth	r4, r4
  4038ec:	fbb5 f0fa 	udiv	r0, r5, sl
  4038f0:	fb0a 5510 	mls	r5, sl, r0, r5
  4038f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4038f8:	fb00 f909 	mul.w	r9, r0, r9
  4038fc:	45a1      	cmp	r9, r4
  4038fe:	d909      	bls.n	403914 <__udivmoddi4+0x98>
  403900:	19e4      	adds	r4, r4, r7
  403902:	f100 33ff 	add.w	r3, r0, #4294967295
  403906:	f080 810a 	bcs.w	403b1e <__udivmoddi4+0x2a2>
  40390a:	45a1      	cmp	r9, r4
  40390c:	f240 8107 	bls.w	403b1e <__udivmoddi4+0x2a2>
  403910:	3802      	subs	r0, #2
  403912:	443c      	add	r4, r7
  403914:	eba4 0409 	sub.w	r4, r4, r9
  403918:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40391c:	2100      	movs	r1, #0
  40391e:	2e00      	cmp	r6, #0
  403920:	d061      	beq.n	4039e6 <__udivmoddi4+0x16a>
  403922:	fa24 f40e 	lsr.w	r4, r4, lr
  403926:	2300      	movs	r3, #0
  403928:	6034      	str	r4, [r6, #0]
  40392a:	6073      	str	r3, [r6, #4]
  40392c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403930:	428b      	cmp	r3, r1
  403932:	d907      	bls.n	403944 <__udivmoddi4+0xc8>
  403934:	2e00      	cmp	r6, #0
  403936:	d054      	beq.n	4039e2 <__udivmoddi4+0x166>
  403938:	2100      	movs	r1, #0
  40393a:	e886 0021 	stmia.w	r6, {r0, r5}
  40393e:	4608      	mov	r0, r1
  403940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403944:	fab3 f183 	clz	r1, r3
  403948:	2900      	cmp	r1, #0
  40394a:	f040 808e 	bne.w	403a6a <__udivmoddi4+0x1ee>
  40394e:	42ab      	cmp	r3, r5
  403950:	d302      	bcc.n	403958 <__udivmoddi4+0xdc>
  403952:	4282      	cmp	r2, r0
  403954:	f200 80fa 	bhi.w	403b4c <__udivmoddi4+0x2d0>
  403958:	1a84      	subs	r4, r0, r2
  40395a:	eb65 0503 	sbc.w	r5, r5, r3
  40395e:	2001      	movs	r0, #1
  403960:	46ac      	mov	ip, r5
  403962:	2e00      	cmp	r6, #0
  403964:	d03f      	beq.n	4039e6 <__udivmoddi4+0x16a>
  403966:	e886 1010 	stmia.w	r6, {r4, ip}
  40396a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40396e:	b912      	cbnz	r2, 403976 <__udivmoddi4+0xfa>
  403970:	2701      	movs	r7, #1
  403972:	fbb7 f7f2 	udiv	r7, r7, r2
  403976:	fab7 fe87 	clz	lr, r7
  40397a:	f1be 0f00 	cmp.w	lr, #0
  40397e:	d134      	bne.n	4039ea <__udivmoddi4+0x16e>
  403980:	1beb      	subs	r3, r5, r7
  403982:	0c3a      	lsrs	r2, r7, #16
  403984:	fa1f fc87 	uxth.w	ip, r7
  403988:	2101      	movs	r1, #1
  40398a:	fbb3 f8f2 	udiv	r8, r3, r2
  40398e:	0c25      	lsrs	r5, r4, #16
  403990:	fb02 3318 	mls	r3, r2, r8, r3
  403994:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403998:	fb0c f308 	mul.w	r3, ip, r8
  40399c:	42ab      	cmp	r3, r5
  40399e:	d907      	bls.n	4039b0 <__udivmoddi4+0x134>
  4039a0:	19ed      	adds	r5, r5, r7
  4039a2:	f108 30ff 	add.w	r0, r8, #4294967295
  4039a6:	d202      	bcs.n	4039ae <__udivmoddi4+0x132>
  4039a8:	42ab      	cmp	r3, r5
  4039aa:	f200 80d1 	bhi.w	403b50 <__udivmoddi4+0x2d4>
  4039ae:	4680      	mov	r8, r0
  4039b0:	1aed      	subs	r5, r5, r3
  4039b2:	b2a3      	uxth	r3, r4
  4039b4:	fbb5 f0f2 	udiv	r0, r5, r2
  4039b8:	fb02 5510 	mls	r5, r2, r0, r5
  4039bc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4039c0:	fb0c fc00 	mul.w	ip, ip, r0
  4039c4:	45a4      	cmp	ip, r4
  4039c6:	d907      	bls.n	4039d8 <__udivmoddi4+0x15c>
  4039c8:	19e4      	adds	r4, r4, r7
  4039ca:	f100 33ff 	add.w	r3, r0, #4294967295
  4039ce:	d202      	bcs.n	4039d6 <__udivmoddi4+0x15a>
  4039d0:	45a4      	cmp	ip, r4
  4039d2:	f200 80b8 	bhi.w	403b46 <__udivmoddi4+0x2ca>
  4039d6:	4618      	mov	r0, r3
  4039d8:	eba4 040c 	sub.w	r4, r4, ip
  4039dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4039e0:	e79d      	b.n	40391e <__udivmoddi4+0xa2>
  4039e2:	4631      	mov	r1, r6
  4039e4:	4630      	mov	r0, r6
  4039e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039ea:	f1ce 0420 	rsb	r4, lr, #32
  4039ee:	fa05 f30e 	lsl.w	r3, r5, lr
  4039f2:	fa07 f70e 	lsl.w	r7, r7, lr
  4039f6:	fa20 f804 	lsr.w	r8, r0, r4
  4039fa:	0c3a      	lsrs	r2, r7, #16
  4039fc:	fa25 f404 	lsr.w	r4, r5, r4
  403a00:	ea48 0803 	orr.w	r8, r8, r3
  403a04:	fbb4 f1f2 	udiv	r1, r4, r2
  403a08:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403a0c:	fb02 4411 	mls	r4, r2, r1, r4
  403a10:	fa1f fc87 	uxth.w	ip, r7
  403a14:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403a18:	fb01 f30c 	mul.w	r3, r1, ip
  403a1c:	42ab      	cmp	r3, r5
  403a1e:	fa00 f40e 	lsl.w	r4, r0, lr
  403a22:	d909      	bls.n	403a38 <__udivmoddi4+0x1bc>
  403a24:	19ed      	adds	r5, r5, r7
  403a26:	f101 30ff 	add.w	r0, r1, #4294967295
  403a2a:	f080 808a 	bcs.w	403b42 <__udivmoddi4+0x2c6>
  403a2e:	42ab      	cmp	r3, r5
  403a30:	f240 8087 	bls.w	403b42 <__udivmoddi4+0x2c6>
  403a34:	3902      	subs	r1, #2
  403a36:	443d      	add	r5, r7
  403a38:	1aeb      	subs	r3, r5, r3
  403a3a:	fa1f f588 	uxth.w	r5, r8
  403a3e:	fbb3 f0f2 	udiv	r0, r3, r2
  403a42:	fb02 3310 	mls	r3, r2, r0, r3
  403a46:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403a4a:	fb00 f30c 	mul.w	r3, r0, ip
  403a4e:	42ab      	cmp	r3, r5
  403a50:	d907      	bls.n	403a62 <__udivmoddi4+0x1e6>
  403a52:	19ed      	adds	r5, r5, r7
  403a54:	f100 38ff 	add.w	r8, r0, #4294967295
  403a58:	d26f      	bcs.n	403b3a <__udivmoddi4+0x2be>
  403a5a:	42ab      	cmp	r3, r5
  403a5c:	d96d      	bls.n	403b3a <__udivmoddi4+0x2be>
  403a5e:	3802      	subs	r0, #2
  403a60:	443d      	add	r5, r7
  403a62:	1aeb      	subs	r3, r5, r3
  403a64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403a68:	e78f      	b.n	40398a <__udivmoddi4+0x10e>
  403a6a:	f1c1 0720 	rsb	r7, r1, #32
  403a6e:	fa22 f807 	lsr.w	r8, r2, r7
  403a72:	408b      	lsls	r3, r1
  403a74:	fa05 f401 	lsl.w	r4, r5, r1
  403a78:	ea48 0303 	orr.w	r3, r8, r3
  403a7c:	fa20 fe07 	lsr.w	lr, r0, r7
  403a80:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403a84:	40fd      	lsrs	r5, r7
  403a86:	ea4e 0e04 	orr.w	lr, lr, r4
  403a8a:	fbb5 f9fc 	udiv	r9, r5, ip
  403a8e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403a92:	fb0c 5519 	mls	r5, ip, r9, r5
  403a96:	fa1f f883 	uxth.w	r8, r3
  403a9a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403a9e:	fb09 f408 	mul.w	r4, r9, r8
  403aa2:	42ac      	cmp	r4, r5
  403aa4:	fa02 f201 	lsl.w	r2, r2, r1
  403aa8:	fa00 fa01 	lsl.w	sl, r0, r1
  403aac:	d908      	bls.n	403ac0 <__udivmoddi4+0x244>
  403aae:	18ed      	adds	r5, r5, r3
  403ab0:	f109 30ff 	add.w	r0, r9, #4294967295
  403ab4:	d243      	bcs.n	403b3e <__udivmoddi4+0x2c2>
  403ab6:	42ac      	cmp	r4, r5
  403ab8:	d941      	bls.n	403b3e <__udivmoddi4+0x2c2>
  403aba:	f1a9 0902 	sub.w	r9, r9, #2
  403abe:	441d      	add	r5, r3
  403ac0:	1b2d      	subs	r5, r5, r4
  403ac2:	fa1f fe8e 	uxth.w	lr, lr
  403ac6:	fbb5 f0fc 	udiv	r0, r5, ip
  403aca:	fb0c 5510 	mls	r5, ip, r0, r5
  403ace:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403ad2:	fb00 f808 	mul.w	r8, r0, r8
  403ad6:	45a0      	cmp	r8, r4
  403ad8:	d907      	bls.n	403aea <__udivmoddi4+0x26e>
  403ada:	18e4      	adds	r4, r4, r3
  403adc:	f100 35ff 	add.w	r5, r0, #4294967295
  403ae0:	d229      	bcs.n	403b36 <__udivmoddi4+0x2ba>
  403ae2:	45a0      	cmp	r8, r4
  403ae4:	d927      	bls.n	403b36 <__udivmoddi4+0x2ba>
  403ae6:	3802      	subs	r0, #2
  403ae8:	441c      	add	r4, r3
  403aea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403aee:	eba4 0408 	sub.w	r4, r4, r8
  403af2:	fba0 8902 	umull	r8, r9, r0, r2
  403af6:	454c      	cmp	r4, r9
  403af8:	46c6      	mov	lr, r8
  403afa:	464d      	mov	r5, r9
  403afc:	d315      	bcc.n	403b2a <__udivmoddi4+0x2ae>
  403afe:	d012      	beq.n	403b26 <__udivmoddi4+0x2aa>
  403b00:	b156      	cbz	r6, 403b18 <__udivmoddi4+0x29c>
  403b02:	ebba 030e 	subs.w	r3, sl, lr
  403b06:	eb64 0405 	sbc.w	r4, r4, r5
  403b0a:	fa04 f707 	lsl.w	r7, r4, r7
  403b0e:	40cb      	lsrs	r3, r1
  403b10:	431f      	orrs	r7, r3
  403b12:	40cc      	lsrs	r4, r1
  403b14:	6037      	str	r7, [r6, #0]
  403b16:	6074      	str	r4, [r6, #4]
  403b18:	2100      	movs	r1, #0
  403b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b1e:	4618      	mov	r0, r3
  403b20:	e6f8      	b.n	403914 <__udivmoddi4+0x98>
  403b22:	4690      	mov	r8, r2
  403b24:	e6e0      	b.n	4038e8 <__udivmoddi4+0x6c>
  403b26:	45c2      	cmp	sl, r8
  403b28:	d2ea      	bcs.n	403b00 <__udivmoddi4+0x284>
  403b2a:	ebb8 0e02 	subs.w	lr, r8, r2
  403b2e:	eb69 0503 	sbc.w	r5, r9, r3
  403b32:	3801      	subs	r0, #1
  403b34:	e7e4      	b.n	403b00 <__udivmoddi4+0x284>
  403b36:	4628      	mov	r0, r5
  403b38:	e7d7      	b.n	403aea <__udivmoddi4+0x26e>
  403b3a:	4640      	mov	r0, r8
  403b3c:	e791      	b.n	403a62 <__udivmoddi4+0x1e6>
  403b3e:	4681      	mov	r9, r0
  403b40:	e7be      	b.n	403ac0 <__udivmoddi4+0x244>
  403b42:	4601      	mov	r1, r0
  403b44:	e778      	b.n	403a38 <__udivmoddi4+0x1bc>
  403b46:	3802      	subs	r0, #2
  403b48:	443c      	add	r4, r7
  403b4a:	e745      	b.n	4039d8 <__udivmoddi4+0x15c>
  403b4c:	4608      	mov	r0, r1
  403b4e:	e708      	b.n	403962 <__udivmoddi4+0xe6>
  403b50:	f1a8 0802 	sub.w	r8, r8, #2
  403b54:	443d      	add	r5, r7
  403b56:	e72b      	b.n	4039b0 <__udivmoddi4+0x134>

00403b58 <__aeabi_idiv0>:
  403b58:	4770      	bx	lr
  403b5a:	bf00      	nop

00403b5c <__libc_init_array>:
  403b5c:	b570      	push	{r4, r5, r6, lr}
  403b5e:	4e0f      	ldr	r6, [pc, #60]	; (403b9c <__libc_init_array+0x40>)
  403b60:	4d0f      	ldr	r5, [pc, #60]	; (403ba0 <__libc_init_array+0x44>)
  403b62:	1b76      	subs	r6, r6, r5
  403b64:	10b6      	asrs	r6, r6, #2
  403b66:	bf18      	it	ne
  403b68:	2400      	movne	r4, #0
  403b6a:	d005      	beq.n	403b78 <__libc_init_array+0x1c>
  403b6c:	3401      	adds	r4, #1
  403b6e:	f855 3b04 	ldr.w	r3, [r5], #4
  403b72:	4798      	blx	r3
  403b74:	42a6      	cmp	r6, r4
  403b76:	d1f9      	bne.n	403b6c <__libc_init_array+0x10>
  403b78:	4e0a      	ldr	r6, [pc, #40]	; (403ba4 <__libc_init_array+0x48>)
  403b7a:	4d0b      	ldr	r5, [pc, #44]	; (403ba8 <__libc_init_array+0x4c>)
  403b7c:	1b76      	subs	r6, r6, r5
  403b7e:	f004 fd9b 	bl	4086b8 <_init>
  403b82:	10b6      	asrs	r6, r6, #2
  403b84:	bf18      	it	ne
  403b86:	2400      	movne	r4, #0
  403b88:	d006      	beq.n	403b98 <__libc_init_array+0x3c>
  403b8a:	3401      	adds	r4, #1
  403b8c:	f855 3b04 	ldr.w	r3, [r5], #4
  403b90:	4798      	blx	r3
  403b92:	42a6      	cmp	r6, r4
  403b94:	d1f9      	bne.n	403b8a <__libc_init_array+0x2e>
  403b96:	bd70      	pop	{r4, r5, r6, pc}
  403b98:	bd70      	pop	{r4, r5, r6, pc}
  403b9a:	bf00      	nop
  403b9c:	004086c4 	.word	0x004086c4
  403ba0:	004086c4 	.word	0x004086c4
  403ba4:	004086cc 	.word	0x004086cc
  403ba8:	004086c4 	.word	0x004086c4

00403bac <memset>:
  403bac:	b470      	push	{r4, r5, r6}
  403bae:	0786      	lsls	r6, r0, #30
  403bb0:	d046      	beq.n	403c40 <memset+0x94>
  403bb2:	1e54      	subs	r4, r2, #1
  403bb4:	2a00      	cmp	r2, #0
  403bb6:	d041      	beq.n	403c3c <memset+0x90>
  403bb8:	b2ca      	uxtb	r2, r1
  403bba:	4603      	mov	r3, r0
  403bbc:	e002      	b.n	403bc4 <memset+0x18>
  403bbe:	f114 34ff 	adds.w	r4, r4, #4294967295
  403bc2:	d33b      	bcc.n	403c3c <memset+0x90>
  403bc4:	f803 2b01 	strb.w	r2, [r3], #1
  403bc8:	079d      	lsls	r5, r3, #30
  403bca:	d1f8      	bne.n	403bbe <memset+0x12>
  403bcc:	2c03      	cmp	r4, #3
  403bce:	d92e      	bls.n	403c2e <memset+0x82>
  403bd0:	b2cd      	uxtb	r5, r1
  403bd2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403bd6:	2c0f      	cmp	r4, #15
  403bd8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403bdc:	d919      	bls.n	403c12 <memset+0x66>
  403bde:	f103 0210 	add.w	r2, r3, #16
  403be2:	4626      	mov	r6, r4
  403be4:	3e10      	subs	r6, #16
  403be6:	2e0f      	cmp	r6, #15
  403be8:	f842 5c10 	str.w	r5, [r2, #-16]
  403bec:	f842 5c0c 	str.w	r5, [r2, #-12]
  403bf0:	f842 5c08 	str.w	r5, [r2, #-8]
  403bf4:	f842 5c04 	str.w	r5, [r2, #-4]
  403bf8:	f102 0210 	add.w	r2, r2, #16
  403bfc:	d8f2      	bhi.n	403be4 <memset+0x38>
  403bfe:	f1a4 0210 	sub.w	r2, r4, #16
  403c02:	f022 020f 	bic.w	r2, r2, #15
  403c06:	f004 040f 	and.w	r4, r4, #15
  403c0a:	3210      	adds	r2, #16
  403c0c:	2c03      	cmp	r4, #3
  403c0e:	4413      	add	r3, r2
  403c10:	d90d      	bls.n	403c2e <memset+0x82>
  403c12:	461e      	mov	r6, r3
  403c14:	4622      	mov	r2, r4
  403c16:	3a04      	subs	r2, #4
  403c18:	2a03      	cmp	r2, #3
  403c1a:	f846 5b04 	str.w	r5, [r6], #4
  403c1e:	d8fa      	bhi.n	403c16 <memset+0x6a>
  403c20:	1f22      	subs	r2, r4, #4
  403c22:	f022 0203 	bic.w	r2, r2, #3
  403c26:	3204      	adds	r2, #4
  403c28:	4413      	add	r3, r2
  403c2a:	f004 0403 	and.w	r4, r4, #3
  403c2e:	b12c      	cbz	r4, 403c3c <memset+0x90>
  403c30:	b2c9      	uxtb	r1, r1
  403c32:	441c      	add	r4, r3
  403c34:	f803 1b01 	strb.w	r1, [r3], #1
  403c38:	429c      	cmp	r4, r3
  403c3a:	d1fb      	bne.n	403c34 <memset+0x88>
  403c3c:	bc70      	pop	{r4, r5, r6}
  403c3e:	4770      	bx	lr
  403c40:	4614      	mov	r4, r2
  403c42:	4603      	mov	r3, r0
  403c44:	e7c2      	b.n	403bcc <memset+0x20>
  403c46:	bf00      	nop

00403c48 <sprintf>:
  403c48:	b40e      	push	{r1, r2, r3}
  403c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  403c4c:	b09c      	sub	sp, #112	; 0x70
  403c4e:	ab21      	add	r3, sp, #132	; 0x84
  403c50:	490f      	ldr	r1, [pc, #60]	; (403c90 <sprintf+0x48>)
  403c52:	f853 2b04 	ldr.w	r2, [r3], #4
  403c56:	9301      	str	r3, [sp, #4]
  403c58:	4605      	mov	r5, r0
  403c5a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403c5e:	6808      	ldr	r0, [r1, #0]
  403c60:	9502      	str	r5, [sp, #8]
  403c62:	f44f 7702 	mov.w	r7, #520	; 0x208
  403c66:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403c6a:	a902      	add	r1, sp, #8
  403c6c:	9506      	str	r5, [sp, #24]
  403c6e:	f8ad 7014 	strh.w	r7, [sp, #20]
  403c72:	9404      	str	r4, [sp, #16]
  403c74:	9407      	str	r4, [sp, #28]
  403c76:	f8ad 6016 	strh.w	r6, [sp, #22]
  403c7a:	f000 f80b 	bl	403c94 <_svfprintf_r>
  403c7e:	9b02      	ldr	r3, [sp, #8]
  403c80:	2200      	movs	r2, #0
  403c82:	701a      	strb	r2, [r3, #0]
  403c84:	b01c      	add	sp, #112	; 0x70
  403c86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403c8a:	b003      	add	sp, #12
  403c8c:	4770      	bx	lr
  403c8e:	bf00      	nop
  403c90:	20400024 	.word	0x20400024

00403c94 <_svfprintf_r>:
  403c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c98:	b0c3      	sub	sp, #268	; 0x10c
  403c9a:	460c      	mov	r4, r1
  403c9c:	910b      	str	r1, [sp, #44]	; 0x2c
  403c9e:	4692      	mov	sl, r2
  403ca0:	930f      	str	r3, [sp, #60]	; 0x3c
  403ca2:	900c      	str	r0, [sp, #48]	; 0x30
  403ca4:	f002 fa0c 	bl	4060c0 <_localeconv_r>
  403ca8:	6803      	ldr	r3, [r0, #0]
  403caa:	931a      	str	r3, [sp, #104]	; 0x68
  403cac:	4618      	mov	r0, r3
  403cae:	f003 f8e7 	bl	406e80 <strlen>
  403cb2:	89a3      	ldrh	r3, [r4, #12]
  403cb4:	9019      	str	r0, [sp, #100]	; 0x64
  403cb6:	0619      	lsls	r1, r3, #24
  403cb8:	d503      	bpl.n	403cc2 <_svfprintf_r+0x2e>
  403cba:	6923      	ldr	r3, [r4, #16]
  403cbc:	2b00      	cmp	r3, #0
  403cbe:	f001 8003 	beq.w	404cc8 <_svfprintf_r+0x1034>
  403cc2:	2300      	movs	r3, #0
  403cc4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403cc8:	9313      	str	r3, [sp, #76]	; 0x4c
  403cca:	9315      	str	r3, [sp, #84]	; 0x54
  403ccc:	9314      	str	r3, [sp, #80]	; 0x50
  403cce:	9327      	str	r3, [sp, #156]	; 0x9c
  403cd0:	9326      	str	r3, [sp, #152]	; 0x98
  403cd2:	9318      	str	r3, [sp, #96]	; 0x60
  403cd4:	931b      	str	r3, [sp, #108]	; 0x6c
  403cd6:	9309      	str	r3, [sp, #36]	; 0x24
  403cd8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403cdc:	46c8      	mov	r8, r9
  403cde:	9316      	str	r3, [sp, #88]	; 0x58
  403ce0:	9317      	str	r3, [sp, #92]	; 0x5c
  403ce2:	f89a 3000 	ldrb.w	r3, [sl]
  403ce6:	4654      	mov	r4, sl
  403ce8:	b1e3      	cbz	r3, 403d24 <_svfprintf_r+0x90>
  403cea:	2b25      	cmp	r3, #37	; 0x25
  403cec:	d102      	bne.n	403cf4 <_svfprintf_r+0x60>
  403cee:	e019      	b.n	403d24 <_svfprintf_r+0x90>
  403cf0:	2b25      	cmp	r3, #37	; 0x25
  403cf2:	d003      	beq.n	403cfc <_svfprintf_r+0x68>
  403cf4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403cf8:	2b00      	cmp	r3, #0
  403cfa:	d1f9      	bne.n	403cf0 <_svfprintf_r+0x5c>
  403cfc:	eba4 050a 	sub.w	r5, r4, sl
  403d00:	b185      	cbz	r5, 403d24 <_svfprintf_r+0x90>
  403d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403d06:	f8c8 a000 	str.w	sl, [r8]
  403d0a:	3301      	adds	r3, #1
  403d0c:	442a      	add	r2, r5
  403d0e:	2b07      	cmp	r3, #7
  403d10:	f8c8 5004 	str.w	r5, [r8, #4]
  403d14:	9227      	str	r2, [sp, #156]	; 0x9c
  403d16:	9326      	str	r3, [sp, #152]	; 0x98
  403d18:	dc7f      	bgt.n	403e1a <_svfprintf_r+0x186>
  403d1a:	f108 0808 	add.w	r8, r8, #8
  403d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d20:	442b      	add	r3, r5
  403d22:	9309      	str	r3, [sp, #36]	; 0x24
  403d24:	7823      	ldrb	r3, [r4, #0]
  403d26:	2b00      	cmp	r3, #0
  403d28:	d07f      	beq.n	403e2a <_svfprintf_r+0x196>
  403d2a:	2300      	movs	r3, #0
  403d2c:	461a      	mov	r2, r3
  403d2e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403d32:	4619      	mov	r1, r3
  403d34:	930d      	str	r3, [sp, #52]	; 0x34
  403d36:	469b      	mov	fp, r3
  403d38:	f04f 30ff 	mov.w	r0, #4294967295
  403d3c:	7863      	ldrb	r3, [r4, #1]
  403d3e:	900a      	str	r0, [sp, #40]	; 0x28
  403d40:	f104 0a01 	add.w	sl, r4, #1
  403d44:	f10a 0a01 	add.w	sl, sl, #1
  403d48:	f1a3 0020 	sub.w	r0, r3, #32
  403d4c:	2858      	cmp	r0, #88	; 0x58
  403d4e:	f200 83c1 	bhi.w	4044d4 <_svfprintf_r+0x840>
  403d52:	e8df f010 	tbh	[pc, r0, lsl #1]
  403d56:	0238      	.short	0x0238
  403d58:	03bf03bf 	.word	0x03bf03bf
  403d5c:	03bf0240 	.word	0x03bf0240
  403d60:	03bf03bf 	.word	0x03bf03bf
  403d64:	03bf03bf 	.word	0x03bf03bf
  403d68:	024503bf 	.word	0x024503bf
  403d6c:	03bf0203 	.word	0x03bf0203
  403d70:	026b005d 	.word	0x026b005d
  403d74:	028603bf 	.word	0x028603bf
  403d78:	039d039d 	.word	0x039d039d
  403d7c:	039d039d 	.word	0x039d039d
  403d80:	039d039d 	.word	0x039d039d
  403d84:	039d039d 	.word	0x039d039d
  403d88:	03bf039d 	.word	0x03bf039d
  403d8c:	03bf03bf 	.word	0x03bf03bf
  403d90:	03bf03bf 	.word	0x03bf03bf
  403d94:	03bf03bf 	.word	0x03bf03bf
  403d98:	03bf03bf 	.word	0x03bf03bf
  403d9c:	033703bf 	.word	0x033703bf
  403da0:	03bf0357 	.word	0x03bf0357
  403da4:	03bf0357 	.word	0x03bf0357
  403da8:	03bf03bf 	.word	0x03bf03bf
  403dac:	039803bf 	.word	0x039803bf
  403db0:	03bf03bf 	.word	0x03bf03bf
  403db4:	03bf03ad 	.word	0x03bf03ad
  403db8:	03bf03bf 	.word	0x03bf03bf
  403dbc:	03bf03bf 	.word	0x03bf03bf
  403dc0:	03bf0259 	.word	0x03bf0259
  403dc4:	031e03bf 	.word	0x031e03bf
  403dc8:	03bf03bf 	.word	0x03bf03bf
  403dcc:	03bf03bf 	.word	0x03bf03bf
  403dd0:	03bf03bf 	.word	0x03bf03bf
  403dd4:	03bf03bf 	.word	0x03bf03bf
  403dd8:	03bf03bf 	.word	0x03bf03bf
  403ddc:	02db02c6 	.word	0x02db02c6
  403de0:	03570357 	.word	0x03570357
  403de4:	028b0357 	.word	0x028b0357
  403de8:	03bf02db 	.word	0x03bf02db
  403dec:	029003bf 	.word	0x029003bf
  403df0:	029d03bf 	.word	0x029d03bf
  403df4:	02b401cc 	.word	0x02b401cc
  403df8:	03bf0208 	.word	0x03bf0208
  403dfc:	03bf01e1 	.word	0x03bf01e1
  403e00:	03bf007e 	.word	0x03bf007e
  403e04:	020d03bf 	.word	0x020d03bf
  403e08:	980d      	ldr	r0, [sp, #52]	; 0x34
  403e0a:	930f      	str	r3, [sp, #60]	; 0x3c
  403e0c:	4240      	negs	r0, r0
  403e0e:	900d      	str	r0, [sp, #52]	; 0x34
  403e10:	f04b 0b04 	orr.w	fp, fp, #4
  403e14:	f89a 3000 	ldrb.w	r3, [sl]
  403e18:	e794      	b.n	403d44 <_svfprintf_r+0xb0>
  403e1a:	aa25      	add	r2, sp, #148	; 0x94
  403e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e20:	f003 f89c 	bl	406f5c <__ssprint_r>
  403e24:	b940      	cbnz	r0, 403e38 <_svfprintf_r+0x1a4>
  403e26:	46c8      	mov	r8, r9
  403e28:	e779      	b.n	403d1e <_svfprintf_r+0x8a>
  403e2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e2c:	b123      	cbz	r3, 403e38 <_svfprintf_r+0x1a4>
  403e2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e32:	aa25      	add	r2, sp, #148	; 0x94
  403e34:	f003 f892 	bl	406f5c <__ssprint_r>
  403e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403e3a:	899b      	ldrh	r3, [r3, #12]
  403e3c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e42:	bf18      	it	ne
  403e44:	f04f 33ff 	movne.w	r3, #4294967295
  403e48:	9309      	str	r3, [sp, #36]	; 0x24
  403e4a:	9809      	ldr	r0, [sp, #36]	; 0x24
  403e4c:	b043      	add	sp, #268	; 0x10c
  403e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e52:	f01b 0f20 	tst.w	fp, #32
  403e56:	9311      	str	r3, [sp, #68]	; 0x44
  403e58:	f040 81dd 	bne.w	404216 <_svfprintf_r+0x582>
  403e5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403e5e:	f01b 0f10 	tst.w	fp, #16
  403e62:	4613      	mov	r3, r2
  403e64:	f040 856e 	bne.w	404944 <_svfprintf_r+0xcb0>
  403e68:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403e6c:	f000 856a 	beq.w	404944 <_svfprintf_r+0xcb0>
  403e70:	8814      	ldrh	r4, [r2, #0]
  403e72:	3204      	adds	r2, #4
  403e74:	2500      	movs	r5, #0
  403e76:	2301      	movs	r3, #1
  403e78:	920f      	str	r2, [sp, #60]	; 0x3c
  403e7a:	2700      	movs	r7, #0
  403e7c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403e80:	990a      	ldr	r1, [sp, #40]	; 0x28
  403e82:	1c4a      	adds	r2, r1, #1
  403e84:	f000 8265 	beq.w	404352 <_svfprintf_r+0x6be>
  403e88:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403e8c:	9207      	str	r2, [sp, #28]
  403e8e:	ea54 0205 	orrs.w	r2, r4, r5
  403e92:	f040 8264 	bne.w	40435e <_svfprintf_r+0x6ca>
  403e96:	2900      	cmp	r1, #0
  403e98:	f040 843c 	bne.w	404714 <_svfprintf_r+0xa80>
  403e9c:	2b00      	cmp	r3, #0
  403e9e:	f040 84d7 	bne.w	404850 <_svfprintf_r+0xbbc>
  403ea2:	f01b 0301 	ands.w	r3, fp, #1
  403ea6:	930e      	str	r3, [sp, #56]	; 0x38
  403ea8:	f000 8604 	beq.w	404ab4 <_svfprintf_r+0xe20>
  403eac:	ae42      	add	r6, sp, #264	; 0x108
  403eae:	2330      	movs	r3, #48	; 0x30
  403eb0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403eb8:	4293      	cmp	r3, r2
  403eba:	bfb8      	it	lt
  403ebc:	4613      	movlt	r3, r2
  403ebe:	9308      	str	r3, [sp, #32]
  403ec0:	2300      	movs	r3, #0
  403ec2:	9312      	str	r3, [sp, #72]	; 0x48
  403ec4:	b117      	cbz	r7, 403ecc <_svfprintf_r+0x238>
  403ec6:	9b08      	ldr	r3, [sp, #32]
  403ec8:	3301      	adds	r3, #1
  403eca:	9308      	str	r3, [sp, #32]
  403ecc:	9b07      	ldr	r3, [sp, #28]
  403ece:	f013 0302 	ands.w	r3, r3, #2
  403ed2:	9310      	str	r3, [sp, #64]	; 0x40
  403ed4:	d002      	beq.n	403edc <_svfprintf_r+0x248>
  403ed6:	9b08      	ldr	r3, [sp, #32]
  403ed8:	3302      	adds	r3, #2
  403eda:	9308      	str	r3, [sp, #32]
  403edc:	9b07      	ldr	r3, [sp, #28]
  403ede:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403ee2:	f040 830e 	bne.w	404502 <_svfprintf_r+0x86e>
  403ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ee8:	9a08      	ldr	r2, [sp, #32]
  403eea:	eba3 0b02 	sub.w	fp, r3, r2
  403eee:	f1bb 0f00 	cmp.w	fp, #0
  403ef2:	f340 8306 	ble.w	404502 <_svfprintf_r+0x86e>
  403ef6:	f1bb 0f10 	cmp.w	fp, #16
  403efa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403efc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403efe:	dd29      	ble.n	403f54 <_svfprintf_r+0x2c0>
  403f00:	4643      	mov	r3, r8
  403f02:	4621      	mov	r1, r4
  403f04:	46a8      	mov	r8, r5
  403f06:	2710      	movs	r7, #16
  403f08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f0c:	e006      	b.n	403f1c <_svfprintf_r+0x288>
  403f0e:	f1ab 0b10 	sub.w	fp, fp, #16
  403f12:	f1bb 0f10 	cmp.w	fp, #16
  403f16:	f103 0308 	add.w	r3, r3, #8
  403f1a:	dd18      	ble.n	403f4e <_svfprintf_r+0x2ba>
  403f1c:	3201      	adds	r2, #1
  403f1e:	48b7      	ldr	r0, [pc, #732]	; (4041fc <_svfprintf_r+0x568>)
  403f20:	9226      	str	r2, [sp, #152]	; 0x98
  403f22:	3110      	adds	r1, #16
  403f24:	2a07      	cmp	r2, #7
  403f26:	9127      	str	r1, [sp, #156]	; 0x9c
  403f28:	e883 0081 	stmia.w	r3, {r0, r7}
  403f2c:	ddef      	ble.n	403f0e <_svfprintf_r+0x27a>
  403f2e:	aa25      	add	r2, sp, #148	; 0x94
  403f30:	4629      	mov	r1, r5
  403f32:	4620      	mov	r0, r4
  403f34:	f003 f812 	bl	406f5c <__ssprint_r>
  403f38:	2800      	cmp	r0, #0
  403f3a:	f47f af7d 	bne.w	403e38 <_svfprintf_r+0x1a4>
  403f3e:	f1ab 0b10 	sub.w	fp, fp, #16
  403f42:	f1bb 0f10 	cmp.w	fp, #16
  403f46:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f48:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f4a:	464b      	mov	r3, r9
  403f4c:	dce6      	bgt.n	403f1c <_svfprintf_r+0x288>
  403f4e:	4645      	mov	r5, r8
  403f50:	460c      	mov	r4, r1
  403f52:	4698      	mov	r8, r3
  403f54:	3201      	adds	r2, #1
  403f56:	4ba9      	ldr	r3, [pc, #676]	; (4041fc <_svfprintf_r+0x568>)
  403f58:	9226      	str	r2, [sp, #152]	; 0x98
  403f5a:	445c      	add	r4, fp
  403f5c:	2a07      	cmp	r2, #7
  403f5e:	9427      	str	r4, [sp, #156]	; 0x9c
  403f60:	e888 0808 	stmia.w	r8, {r3, fp}
  403f64:	f300 8498 	bgt.w	404898 <_svfprintf_r+0xc04>
  403f68:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403f6c:	f108 0808 	add.w	r8, r8, #8
  403f70:	b177      	cbz	r7, 403f90 <_svfprintf_r+0x2fc>
  403f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f74:	3301      	adds	r3, #1
  403f76:	3401      	adds	r4, #1
  403f78:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403f7c:	2201      	movs	r2, #1
  403f7e:	2b07      	cmp	r3, #7
  403f80:	9427      	str	r4, [sp, #156]	; 0x9c
  403f82:	9326      	str	r3, [sp, #152]	; 0x98
  403f84:	e888 0006 	stmia.w	r8, {r1, r2}
  403f88:	f300 83db 	bgt.w	404742 <_svfprintf_r+0xaae>
  403f8c:	f108 0808 	add.w	r8, r8, #8
  403f90:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f92:	b16b      	cbz	r3, 403fb0 <_svfprintf_r+0x31c>
  403f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f96:	3301      	adds	r3, #1
  403f98:	3402      	adds	r4, #2
  403f9a:	a91e      	add	r1, sp, #120	; 0x78
  403f9c:	2202      	movs	r2, #2
  403f9e:	2b07      	cmp	r3, #7
  403fa0:	9427      	str	r4, [sp, #156]	; 0x9c
  403fa2:	9326      	str	r3, [sp, #152]	; 0x98
  403fa4:	e888 0006 	stmia.w	r8, {r1, r2}
  403fa8:	f300 83d6 	bgt.w	404758 <_svfprintf_r+0xac4>
  403fac:	f108 0808 	add.w	r8, r8, #8
  403fb0:	2d80      	cmp	r5, #128	; 0x80
  403fb2:	f000 8315 	beq.w	4045e0 <_svfprintf_r+0x94c>
  403fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403fba:	1a9f      	subs	r7, r3, r2
  403fbc:	2f00      	cmp	r7, #0
  403fbe:	dd36      	ble.n	40402e <_svfprintf_r+0x39a>
  403fc0:	2f10      	cmp	r7, #16
  403fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fc4:	4d8e      	ldr	r5, [pc, #568]	; (404200 <_svfprintf_r+0x56c>)
  403fc6:	dd27      	ble.n	404018 <_svfprintf_r+0x384>
  403fc8:	4642      	mov	r2, r8
  403fca:	4621      	mov	r1, r4
  403fcc:	46b0      	mov	r8, r6
  403fce:	f04f 0b10 	mov.w	fp, #16
  403fd2:	462e      	mov	r6, r5
  403fd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403fd6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403fd8:	e004      	b.n	403fe4 <_svfprintf_r+0x350>
  403fda:	3f10      	subs	r7, #16
  403fdc:	2f10      	cmp	r7, #16
  403fde:	f102 0208 	add.w	r2, r2, #8
  403fe2:	dd15      	ble.n	404010 <_svfprintf_r+0x37c>
  403fe4:	3301      	adds	r3, #1
  403fe6:	3110      	adds	r1, #16
  403fe8:	2b07      	cmp	r3, #7
  403fea:	9127      	str	r1, [sp, #156]	; 0x9c
  403fec:	9326      	str	r3, [sp, #152]	; 0x98
  403fee:	e882 0840 	stmia.w	r2, {r6, fp}
  403ff2:	ddf2      	ble.n	403fda <_svfprintf_r+0x346>
  403ff4:	aa25      	add	r2, sp, #148	; 0x94
  403ff6:	4629      	mov	r1, r5
  403ff8:	4620      	mov	r0, r4
  403ffa:	f002 ffaf 	bl	406f5c <__ssprint_r>
  403ffe:	2800      	cmp	r0, #0
  404000:	f47f af1a 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404004:	3f10      	subs	r7, #16
  404006:	2f10      	cmp	r7, #16
  404008:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40400a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40400c:	464a      	mov	r2, r9
  40400e:	dce9      	bgt.n	403fe4 <_svfprintf_r+0x350>
  404010:	4635      	mov	r5, r6
  404012:	460c      	mov	r4, r1
  404014:	4646      	mov	r6, r8
  404016:	4690      	mov	r8, r2
  404018:	3301      	adds	r3, #1
  40401a:	443c      	add	r4, r7
  40401c:	2b07      	cmp	r3, #7
  40401e:	9427      	str	r4, [sp, #156]	; 0x9c
  404020:	9326      	str	r3, [sp, #152]	; 0x98
  404022:	e888 00a0 	stmia.w	r8, {r5, r7}
  404026:	f300 8381 	bgt.w	40472c <_svfprintf_r+0xa98>
  40402a:	f108 0808 	add.w	r8, r8, #8
  40402e:	9b07      	ldr	r3, [sp, #28]
  404030:	05df      	lsls	r7, r3, #23
  404032:	f100 8268 	bmi.w	404506 <_svfprintf_r+0x872>
  404036:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404038:	990e      	ldr	r1, [sp, #56]	; 0x38
  40403a:	f8c8 6000 	str.w	r6, [r8]
  40403e:	3301      	adds	r3, #1
  404040:	440c      	add	r4, r1
  404042:	2b07      	cmp	r3, #7
  404044:	9427      	str	r4, [sp, #156]	; 0x9c
  404046:	f8c8 1004 	str.w	r1, [r8, #4]
  40404a:	9326      	str	r3, [sp, #152]	; 0x98
  40404c:	f300 834d 	bgt.w	4046ea <_svfprintf_r+0xa56>
  404050:	f108 0808 	add.w	r8, r8, #8
  404054:	9b07      	ldr	r3, [sp, #28]
  404056:	075b      	lsls	r3, r3, #29
  404058:	d53a      	bpl.n	4040d0 <_svfprintf_r+0x43c>
  40405a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40405c:	9a08      	ldr	r2, [sp, #32]
  40405e:	1a9d      	subs	r5, r3, r2
  404060:	2d00      	cmp	r5, #0
  404062:	dd35      	ble.n	4040d0 <_svfprintf_r+0x43c>
  404064:	2d10      	cmp	r5, #16
  404066:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404068:	dd20      	ble.n	4040ac <_svfprintf_r+0x418>
  40406a:	2610      	movs	r6, #16
  40406c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40406e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404072:	e004      	b.n	40407e <_svfprintf_r+0x3ea>
  404074:	3d10      	subs	r5, #16
  404076:	2d10      	cmp	r5, #16
  404078:	f108 0808 	add.w	r8, r8, #8
  40407c:	dd16      	ble.n	4040ac <_svfprintf_r+0x418>
  40407e:	3301      	adds	r3, #1
  404080:	4a5e      	ldr	r2, [pc, #376]	; (4041fc <_svfprintf_r+0x568>)
  404082:	9326      	str	r3, [sp, #152]	; 0x98
  404084:	3410      	adds	r4, #16
  404086:	2b07      	cmp	r3, #7
  404088:	9427      	str	r4, [sp, #156]	; 0x9c
  40408a:	e888 0044 	stmia.w	r8, {r2, r6}
  40408e:	ddf1      	ble.n	404074 <_svfprintf_r+0x3e0>
  404090:	aa25      	add	r2, sp, #148	; 0x94
  404092:	4659      	mov	r1, fp
  404094:	4638      	mov	r0, r7
  404096:	f002 ff61 	bl	406f5c <__ssprint_r>
  40409a:	2800      	cmp	r0, #0
  40409c:	f47f aecc 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4040a0:	3d10      	subs	r5, #16
  4040a2:	2d10      	cmp	r5, #16
  4040a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040a8:	46c8      	mov	r8, r9
  4040aa:	dce8      	bgt.n	40407e <_svfprintf_r+0x3ea>
  4040ac:	3301      	adds	r3, #1
  4040ae:	4a53      	ldr	r2, [pc, #332]	; (4041fc <_svfprintf_r+0x568>)
  4040b0:	9326      	str	r3, [sp, #152]	; 0x98
  4040b2:	442c      	add	r4, r5
  4040b4:	2b07      	cmp	r3, #7
  4040b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4040b8:	e888 0024 	stmia.w	r8, {r2, r5}
  4040bc:	dd08      	ble.n	4040d0 <_svfprintf_r+0x43c>
  4040be:	aa25      	add	r2, sp, #148	; 0x94
  4040c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040c4:	f002 ff4a 	bl	406f5c <__ssprint_r>
  4040c8:	2800      	cmp	r0, #0
  4040ca:	f47f aeb5 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4040ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4040d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4040d4:	9908      	ldr	r1, [sp, #32]
  4040d6:	428a      	cmp	r2, r1
  4040d8:	bfac      	ite	ge
  4040da:	189b      	addge	r3, r3, r2
  4040dc:	185b      	addlt	r3, r3, r1
  4040de:	9309      	str	r3, [sp, #36]	; 0x24
  4040e0:	2c00      	cmp	r4, #0
  4040e2:	f040 830d 	bne.w	404700 <_svfprintf_r+0xa6c>
  4040e6:	2300      	movs	r3, #0
  4040e8:	9326      	str	r3, [sp, #152]	; 0x98
  4040ea:	46c8      	mov	r8, r9
  4040ec:	e5f9      	b.n	403ce2 <_svfprintf_r+0x4e>
  4040ee:	9311      	str	r3, [sp, #68]	; 0x44
  4040f0:	f01b 0320 	ands.w	r3, fp, #32
  4040f4:	f040 81e3 	bne.w	4044be <_svfprintf_r+0x82a>
  4040f8:	f01b 0210 	ands.w	r2, fp, #16
  4040fc:	f040 842e 	bne.w	40495c <_svfprintf_r+0xcc8>
  404100:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404104:	f000 842a 	beq.w	40495c <_svfprintf_r+0xcc8>
  404108:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40410a:	4613      	mov	r3, r2
  40410c:	460a      	mov	r2, r1
  40410e:	3204      	adds	r2, #4
  404110:	880c      	ldrh	r4, [r1, #0]
  404112:	920f      	str	r2, [sp, #60]	; 0x3c
  404114:	2500      	movs	r5, #0
  404116:	e6b0      	b.n	403e7a <_svfprintf_r+0x1e6>
  404118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40411a:	9311      	str	r3, [sp, #68]	; 0x44
  40411c:	6816      	ldr	r6, [r2, #0]
  40411e:	2400      	movs	r4, #0
  404120:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404124:	1d15      	adds	r5, r2, #4
  404126:	2e00      	cmp	r6, #0
  404128:	f000 86a7 	beq.w	404e7a <_svfprintf_r+0x11e6>
  40412c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40412e:	1c53      	adds	r3, r2, #1
  404130:	f000 8609 	beq.w	404d46 <_svfprintf_r+0x10b2>
  404134:	4621      	mov	r1, r4
  404136:	4630      	mov	r0, r6
  404138:	f002 fa8a 	bl	406650 <memchr>
  40413c:	2800      	cmp	r0, #0
  40413e:	f000 86e1 	beq.w	404f04 <_svfprintf_r+0x1270>
  404142:	1b83      	subs	r3, r0, r6
  404144:	930e      	str	r3, [sp, #56]	; 0x38
  404146:	940a      	str	r4, [sp, #40]	; 0x28
  404148:	950f      	str	r5, [sp, #60]	; 0x3c
  40414a:	f8cd b01c 	str.w	fp, [sp, #28]
  40414e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404152:	9308      	str	r3, [sp, #32]
  404154:	9412      	str	r4, [sp, #72]	; 0x48
  404156:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40415a:	e6b3      	b.n	403ec4 <_svfprintf_r+0x230>
  40415c:	f89a 3000 	ldrb.w	r3, [sl]
  404160:	2201      	movs	r2, #1
  404162:	212b      	movs	r1, #43	; 0x2b
  404164:	e5ee      	b.n	403d44 <_svfprintf_r+0xb0>
  404166:	f04b 0b20 	orr.w	fp, fp, #32
  40416a:	f89a 3000 	ldrb.w	r3, [sl]
  40416e:	e5e9      	b.n	403d44 <_svfprintf_r+0xb0>
  404170:	9311      	str	r3, [sp, #68]	; 0x44
  404172:	2a00      	cmp	r2, #0
  404174:	f040 8795 	bne.w	4050a2 <_svfprintf_r+0x140e>
  404178:	4b22      	ldr	r3, [pc, #136]	; (404204 <_svfprintf_r+0x570>)
  40417a:	9318      	str	r3, [sp, #96]	; 0x60
  40417c:	f01b 0f20 	tst.w	fp, #32
  404180:	f040 8111 	bne.w	4043a6 <_svfprintf_r+0x712>
  404184:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404186:	f01b 0f10 	tst.w	fp, #16
  40418a:	4613      	mov	r3, r2
  40418c:	f040 83e1 	bne.w	404952 <_svfprintf_r+0xcbe>
  404190:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404194:	f000 83dd 	beq.w	404952 <_svfprintf_r+0xcbe>
  404198:	3304      	adds	r3, #4
  40419a:	8814      	ldrh	r4, [r2, #0]
  40419c:	930f      	str	r3, [sp, #60]	; 0x3c
  40419e:	2500      	movs	r5, #0
  4041a0:	f01b 0f01 	tst.w	fp, #1
  4041a4:	f000 810c 	beq.w	4043c0 <_svfprintf_r+0x72c>
  4041a8:	ea54 0305 	orrs.w	r3, r4, r5
  4041ac:	f000 8108 	beq.w	4043c0 <_svfprintf_r+0x72c>
  4041b0:	2330      	movs	r3, #48	; 0x30
  4041b2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4041b6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4041ba:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4041be:	f04b 0b02 	orr.w	fp, fp, #2
  4041c2:	2302      	movs	r3, #2
  4041c4:	e659      	b.n	403e7a <_svfprintf_r+0x1e6>
  4041c6:	f89a 3000 	ldrb.w	r3, [sl]
  4041ca:	2900      	cmp	r1, #0
  4041cc:	f47f adba 	bne.w	403d44 <_svfprintf_r+0xb0>
  4041d0:	2201      	movs	r2, #1
  4041d2:	2120      	movs	r1, #32
  4041d4:	e5b6      	b.n	403d44 <_svfprintf_r+0xb0>
  4041d6:	f04b 0b01 	orr.w	fp, fp, #1
  4041da:	f89a 3000 	ldrb.w	r3, [sl]
  4041de:	e5b1      	b.n	403d44 <_svfprintf_r+0xb0>
  4041e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4041e2:	6823      	ldr	r3, [r4, #0]
  4041e4:	930d      	str	r3, [sp, #52]	; 0x34
  4041e6:	4618      	mov	r0, r3
  4041e8:	2800      	cmp	r0, #0
  4041ea:	4623      	mov	r3, r4
  4041ec:	f103 0304 	add.w	r3, r3, #4
  4041f0:	f6ff ae0a 	blt.w	403e08 <_svfprintf_r+0x174>
  4041f4:	930f      	str	r3, [sp, #60]	; 0x3c
  4041f6:	f89a 3000 	ldrb.w	r3, [sl]
  4041fa:	e5a3      	b.n	403d44 <_svfprintf_r+0xb0>
  4041fc:	00408474 	.word	0x00408474
  404200:	00408484 	.word	0x00408484
  404204:	00408454 	.word	0x00408454
  404208:	f04b 0b10 	orr.w	fp, fp, #16
  40420c:	f01b 0f20 	tst.w	fp, #32
  404210:	9311      	str	r3, [sp, #68]	; 0x44
  404212:	f43f ae23 	beq.w	403e5c <_svfprintf_r+0x1c8>
  404216:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404218:	3507      	adds	r5, #7
  40421a:	f025 0307 	bic.w	r3, r5, #7
  40421e:	f103 0208 	add.w	r2, r3, #8
  404222:	e9d3 4500 	ldrd	r4, r5, [r3]
  404226:	920f      	str	r2, [sp, #60]	; 0x3c
  404228:	2301      	movs	r3, #1
  40422a:	e626      	b.n	403e7a <_svfprintf_r+0x1e6>
  40422c:	f89a 3000 	ldrb.w	r3, [sl]
  404230:	2b2a      	cmp	r3, #42	; 0x2a
  404232:	f10a 0401 	add.w	r4, sl, #1
  404236:	f000 8727 	beq.w	405088 <_svfprintf_r+0x13f4>
  40423a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40423e:	2809      	cmp	r0, #9
  404240:	46a2      	mov	sl, r4
  404242:	f200 86ad 	bhi.w	404fa0 <_svfprintf_r+0x130c>
  404246:	2300      	movs	r3, #0
  404248:	461c      	mov	r4, r3
  40424a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40424e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404252:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404256:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40425a:	2809      	cmp	r0, #9
  40425c:	d9f5      	bls.n	40424a <_svfprintf_r+0x5b6>
  40425e:	940a      	str	r4, [sp, #40]	; 0x28
  404260:	e572      	b.n	403d48 <_svfprintf_r+0xb4>
  404262:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404266:	f89a 3000 	ldrb.w	r3, [sl]
  40426a:	e56b      	b.n	403d44 <_svfprintf_r+0xb0>
  40426c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404270:	f89a 3000 	ldrb.w	r3, [sl]
  404274:	e566      	b.n	403d44 <_svfprintf_r+0xb0>
  404276:	f89a 3000 	ldrb.w	r3, [sl]
  40427a:	2b6c      	cmp	r3, #108	; 0x6c
  40427c:	bf03      	ittte	eq
  40427e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404282:	f04b 0b20 	orreq.w	fp, fp, #32
  404286:	f10a 0a01 	addeq.w	sl, sl, #1
  40428a:	f04b 0b10 	orrne.w	fp, fp, #16
  40428e:	e559      	b.n	403d44 <_svfprintf_r+0xb0>
  404290:	2a00      	cmp	r2, #0
  404292:	f040 8711 	bne.w	4050b8 <_svfprintf_r+0x1424>
  404296:	f01b 0f20 	tst.w	fp, #32
  40429a:	f040 84f9 	bne.w	404c90 <_svfprintf_r+0xffc>
  40429e:	f01b 0f10 	tst.w	fp, #16
  4042a2:	f040 84ac 	bne.w	404bfe <_svfprintf_r+0xf6a>
  4042a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4042aa:	f000 84a8 	beq.w	404bfe <_svfprintf_r+0xf6a>
  4042ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4042b0:	6813      	ldr	r3, [r2, #0]
  4042b2:	3204      	adds	r2, #4
  4042b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4042b6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4042ba:	801a      	strh	r2, [r3, #0]
  4042bc:	e511      	b.n	403ce2 <_svfprintf_r+0x4e>
  4042be:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4042c0:	4bb3      	ldr	r3, [pc, #716]	; (404590 <_svfprintf_r+0x8fc>)
  4042c2:	680c      	ldr	r4, [r1, #0]
  4042c4:	9318      	str	r3, [sp, #96]	; 0x60
  4042c6:	2230      	movs	r2, #48	; 0x30
  4042c8:	2378      	movs	r3, #120	; 0x78
  4042ca:	3104      	adds	r1, #4
  4042cc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4042d0:	9311      	str	r3, [sp, #68]	; 0x44
  4042d2:	f04b 0b02 	orr.w	fp, fp, #2
  4042d6:	910f      	str	r1, [sp, #60]	; 0x3c
  4042d8:	2500      	movs	r5, #0
  4042da:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4042de:	2302      	movs	r3, #2
  4042e0:	e5cb      	b.n	403e7a <_svfprintf_r+0x1e6>
  4042e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4042e4:	9311      	str	r3, [sp, #68]	; 0x44
  4042e6:	680a      	ldr	r2, [r1, #0]
  4042e8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4042ec:	2300      	movs	r3, #0
  4042ee:	460a      	mov	r2, r1
  4042f0:	461f      	mov	r7, r3
  4042f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4042f6:	3204      	adds	r2, #4
  4042f8:	2301      	movs	r3, #1
  4042fa:	9308      	str	r3, [sp, #32]
  4042fc:	f8cd b01c 	str.w	fp, [sp, #28]
  404300:	970a      	str	r7, [sp, #40]	; 0x28
  404302:	9712      	str	r7, [sp, #72]	; 0x48
  404304:	920f      	str	r2, [sp, #60]	; 0x3c
  404306:	930e      	str	r3, [sp, #56]	; 0x38
  404308:	ae28      	add	r6, sp, #160	; 0xa0
  40430a:	e5df      	b.n	403ecc <_svfprintf_r+0x238>
  40430c:	9311      	str	r3, [sp, #68]	; 0x44
  40430e:	2a00      	cmp	r2, #0
  404310:	f040 86ea 	bne.w	4050e8 <_svfprintf_r+0x1454>
  404314:	f01b 0f20 	tst.w	fp, #32
  404318:	d15d      	bne.n	4043d6 <_svfprintf_r+0x742>
  40431a:	f01b 0f10 	tst.w	fp, #16
  40431e:	f040 8308 	bne.w	404932 <_svfprintf_r+0xc9e>
  404322:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404326:	f000 8304 	beq.w	404932 <_svfprintf_r+0xc9e>
  40432a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40432c:	f9b1 4000 	ldrsh.w	r4, [r1]
  404330:	3104      	adds	r1, #4
  404332:	17e5      	asrs	r5, r4, #31
  404334:	4622      	mov	r2, r4
  404336:	462b      	mov	r3, r5
  404338:	910f      	str	r1, [sp, #60]	; 0x3c
  40433a:	2a00      	cmp	r2, #0
  40433c:	f173 0300 	sbcs.w	r3, r3, #0
  404340:	db58      	blt.n	4043f4 <_svfprintf_r+0x760>
  404342:	990a      	ldr	r1, [sp, #40]	; 0x28
  404344:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404348:	1c4a      	adds	r2, r1, #1
  40434a:	f04f 0301 	mov.w	r3, #1
  40434e:	f47f ad9b 	bne.w	403e88 <_svfprintf_r+0x1f4>
  404352:	ea54 0205 	orrs.w	r2, r4, r5
  404356:	f000 81df 	beq.w	404718 <_svfprintf_r+0xa84>
  40435a:	f8cd b01c 	str.w	fp, [sp, #28]
  40435e:	2b01      	cmp	r3, #1
  404360:	f000 827b 	beq.w	40485a <_svfprintf_r+0xbc6>
  404364:	2b02      	cmp	r3, #2
  404366:	f040 8206 	bne.w	404776 <_svfprintf_r+0xae2>
  40436a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40436c:	464e      	mov	r6, r9
  40436e:	0923      	lsrs	r3, r4, #4
  404370:	f004 010f 	and.w	r1, r4, #15
  404374:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404378:	092a      	lsrs	r2, r5, #4
  40437a:	461c      	mov	r4, r3
  40437c:	4615      	mov	r5, r2
  40437e:	5c43      	ldrb	r3, [r0, r1]
  404380:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404384:	ea54 0305 	orrs.w	r3, r4, r5
  404388:	d1f1      	bne.n	40436e <_svfprintf_r+0x6da>
  40438a:	eba9 0306 	sub.w	r3, r9, r6
  40438e:	930e      	str	r3, [sp, #56]	; 0x38
  404390:	e590      	b.n	403eb4 <_svfprintf_r+0x220>
  404392:	9311      	str	r3, [sp, #68]	; 0x44
  404394:	2a00      	cmp	r2, #0
  404396:	f040 86a3 	bne.w	4050e0 <_svfprintf_r+0x144c>
  40439a:	4b7e      	ldr	r3, [pc, #504]	; (404594 <_svfprintf_r+0x900>)
  40439c:	9318      	str	r3, [sp, #96]	; 0x60
  40439e:	f01b 0f20 	tst.w	fp, #32
  4043a2:	f43f aeef 	beq.w	404184 <_svfprintf_r+0x4f0>
  4043a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043a8:	3507      	adds	r5, #7
  4043aa:	f025 0307 	bic.w	r3, r5, #7
  4043ae:	f103 0208 	add.w	r2, r3, #8
  4043b2:	f01b 0f01 	tst.w	fp, #1
  4043b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4043b8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4043bc:	f47f aef4 	bne.w	4041a8 <_svfprintf_r+0x514>
  4043c0:	2302      	movs	r3, #2
  4043c2:	e55a      	b.n	403e7a <_svfprintf_r+0x1e6>
  4043c4:	9311      	str	r3, [sp, #68]	; 0x44
  4043c6:	2a00      	cmp	r2, #0
  4043c8:	f040 8686 	bne.w	4050d8 <_svfprintf_r+0x1444>
  4043cc:	f04b 0b10 	orr.w	fp, fp, #16
  4043d0:	f01b 0f20 	tst.w	fp, #32
  4043d4:	d0a1      	beq.n	40431a <_svfprintf_r+0x686>
  4043d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043d8:	3507      	adds	r5, #7
  4043da:	f025 0507 	bic.w	r5, r5, #7
  4043de:	e9d5 2300 	ldrd	r2, r3, [r5]
  4043e2:	2a00      	cmp	r2, #0
  4043e4:	f105 0108 	add.w	r1, r5, #8
  4043e8:	461d      	mov	r5, r3
  4043ea:	f173 0300 	sbcs.w	r3, r3, #0
  4043ee:	910f      	str	r1, [sp, #60]	; 0x3c
  4043f0:	4614      	mov	r4, r2
  4043f2:	daa6      	bge.n	404342 <_svfprintf_r+0x6ae>
  4043f4:	272d      	movs	r7, #45	; 0x2d
  4043f6:	4264      	negs	r4, r4
  4043f8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4043fc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404400:	2301      	movs	r3, #1
  404402:	e53d      	b.n	403e80 <_svfprintf_r+0x1ec>
  404404:	9311      	str	r3, [sp, #68]	; 0x44
  404406:	2a00      	cmp	r2, #0
  404408:	f040 8662 	bne.w	4050d0 <_svfprintf_r+0x143c>
  40440c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40440e:	3507      	adds	r5, #7
  404410:	f025 0307 	bic.w	r3, r5, #7
  404414:	f103 0208 	add.w	r2, r3, #8
  404418:	920f      	str	r2, [sp, #60]	; 0x3c
  40441a:	681a      	ldr	r2, [r3, #0]
  40441c:	9215      	str	r2, [sp, #84]	; 0x54
  40441e:	685b      	ldr	r3, [r3, #4]
  404420:	9314      	str	r3, [sp, #80]	; 0x50
  404422:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404424:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404426:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40442a:	4628      	mov	r0, r5
  40442c:	4621      	mov	r1, r4
  40442e:	f04f 32ff 	mov.w	r2, #4294967295
  404432:	4b59      	ldr	r3, [pc, #356]	; (404598 <_svfprintf_r+0x904>)
  404434:	f003 fa8e 	bl	407954 <__aeabi_dcmpun>
  404438:	2800      	cmp	r0, #0
  40443a:	f040 834a 	bne.w	404ad2 <_svfprintf_r+0xe3e>
  40443e:	4628      	mov	r0, r5
  404440:	4621      	mov	r1, r4
  404442:	f04f 32ff 	mov.w	r2, #4294967295
  404446:	4b54      	ldr	r3, [pc, #336]	; (404598 <_svfprintf_r+0x904>)
  404448:	f003 fa66 	bl	407918 <__aeabi_dcmple>
  40444c:	2800      	cmp	r0, #0
  40444e:	f040 8340 	bne.w	404ad2 <_svfprintf_r+0xe3e>
  404452:	a815      	add	r0, sp, #84	; 0x54
  404454:	c80d      	ldmia	r0, {r0, r2, r3}
  404456:	9914      	ldr	r1, [sp, #80]	; 0x50
  404458:	f003 fa54 	bl	407904 <__aeabi_dcmplt>
  40445c:	2800      	cmp	r0, #0
  40445e:	f040 8530 	bne.w	404ec2 <_svfprintf_r+0x122e>
  404462:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404466:	4e4d      	ldr	r6, [pc, #308]	; (40459c <_svfprintf_r+0x908>)
  404468:	4b4d      	ldr	r3, [pc, #308]	; (4045a0 <_svfprintf_r+0x90c>)
  40446a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40446e:	9007      	str	r0, [sp, #28]
  404470:	9811      	ldr	r0, [sp, #68]	; 0x44
  404472:	2203      	movs	r2, #3
  404474:	2100      	movs	r1, #0
  404476:	9208      	str	r2, [sp, #32]
  404478:	910a      	str	r1, [sp, #40]	; 0x28
  40447a:	2847      	cmp	r0, #71	; 0x47
  40447c:	bfd8      	it	le
  40447e:	461e      	movle	r6, r3
  404480:	920e      	str	r2, [sp, #56]	; 0x38
  404482:	9112      	str	r1, [sp, #72]	; 0x48
  404484:	e51e      	b.n	403ec4 <_svfprintf_r+0x230>
  404486:	f04b 0b08 	orr.w	fp, fp, #8
  40448a:	f89a 3000 	ldrb.w	r3, [sl]
  40448e:	e459      	b.n	403d44 <_svfprintf_r+0xb0>
  404490:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404494:	2300      	movs	r3, #0
  404496:	461c      	mov	r4, r3
  404498:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40449c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4044a0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4044a4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4044a8:	2809      	cmp	r0, #9
  4044aa:	d9f5      	bls.n	404498 <_svfprintf_r+0x804>
  4044ac:	940d      	str	r4, [sp, #52]	; 0x34
  4044ae:	e44b      	b.n	403d48 <_svfprintf_r+0xb4>
  4044b0:	f04b 0b10 	orr.w	fp, fp, #16
  4044b4:	9311      	str	r3, [sp, #68]	; 0x44
  4044b6:	f01b 0320 	ands.w	r3, fp, #32
  4044ba:	f43f ae1d 	beq.w	4040f8 <_svfprintf_r+0x464>
  4044be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4044c0:	3507      	adds	r5, #7
  4044c2:	f025 0307 	bic.w	r3, r5, #7
  4044c6:	f103 0208 	add.w	r2, r3, #8
  4044ca:	e9d3 4500 	ldrd	r4, r5, [r3]
  4044ce:	920f      	str	r2, [sp, #60]	; 0x3c
  4044d0:	2300      	movs	r3, #0
  4044d2:	e4d2      	b.n	403e7a <_svfprintf_r+0x1e6>
  4044d4:	9311      	str	r3, [sp, #68]	; 0x44
  4044d6:	2a00      	cmp	r2, #0
  4044d8:	f040 85e7 	bne.w	4050aa <_svfprintf_r+0x1416>
  4044dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044de:	2a00      	cmp	r2, #0
  4044e0:	f43f aca3 	beq.w	403e2a <_svfprintf_r+0x196>
  4044e4:	2300      	movs	r3, #0
  4044e6:	2101      	movs	r1, #1
  4044e8:	461f      	mov	r7, r3
  4044ea:	9108      	str	r1, [sp, #32]
  4044ec:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4044f0:	f8cd b01c 	str.w	fp, [sp, #28]
  4044f4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4044f8:	930a      	str	r3, [sp, #40]	; 0x28
  4044fa:	9312      	str	r3, [sp, #72]	; 0x48
  4044fc:	910e      	str	r1, [sp, #56]	; 0x38
  4044fe:	ae28      	add	r6, sp, #160	; 0xa0
  404500:	e4e4      	b.n	403ecc <_svfprintf_r+0x238>
  404502:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404504:	e534      	b.n	403f70 <_svfprintf_r+0x2dc>
  404506:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404508:	2b65      	cmp	r3, #101	; 0x65
  40450a:	f340 80a7 	ble.w	40465c <_svfprintf_r+0x9c8>
  40450e:	a815      	add	r0, sp, #84	; 0x54
  404510:	c80d      	ldmia	r0, {r0, r2, r3}
  404512:	9914      	ldr	r1, [sp, #80]	; 0x50
  404514:	f003 f9ec 	bl	4078f0 <__aeabi_dcmpeq>
  404518:	2800      	cmp	r0, #0
  40451a:	f000 8150 	beq.w	4047be <_svfprintf_r+0xb2a>
  40451e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404520:	4a20      	ldr	r2, [pc, #128]	; (4045a4 <_svfprintf_r+0x910>)
  404522:	f8c8 2000 	str.w	r2, [r8]
  404526:	3301      	adds	r3, #1
  404528:	3401      	adds	r4, #1
  40452a:	2201      	movs	r2, #1
  40452c:	2b07      	cmp	r3, #7
  40452e:	9427      	str	r4, [sp, #156]	; 0x9c
  404530:	9326      	str	r3, [sp, #152]	; 0x98
  404532:	f8c8 2004 	str.w	r2, [r8, #4]
  404536:	f300 836a 	bgt.w	404c0e <_svfprintf_r+0xf7a>
  40453a:	f108 0808 	add.w	r8, r8, #8
  40453e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404542:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404544:	4293      	cmp	r3, r2
  404546:	db03      	blt.n	404550 <_svfprintf_r+0x8bc>
  404548:	9b07      	ldr	r3, [sp, #28]
  40454a:	07dd      	lsls	r5, r3, #31
  40454c:	f57f ad82 	bpl.w	404054 <_svfprintf_r+0x3c0>
  404550:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404552:	9919      	ldr	r1, [sp, #100]	; 0x64
  404554:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404556:	f8c8 2000 	str.w	r2, [r8]
  40455a:	3301      	adds	r3, #1
  40455c:	440c      	add	r4, r1
  40455e:	2b07      	cmp	r3, #7
  404560:	f8c8 1004 	str.w	r1, [r8, #4]
  404564:	9427      	str	r4, [sp, #156]	; 0x9c
  404566:	9326      	str	r3, [sp, #152]	; 0x98
  404568:	f300 839e 	bgt.w	404ca8 <_svfprintf_r+0x1014>
  40456c:	f108 0808 	add.w	r8, r8, #8
  404570:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404572:	1e5e      	subs	r6, r3, #1
  404574:	2e00      	cmp	r6, #0
  404576:	f77f ad6d 	ble.w	404054 <_svfprintf_r+0x3c0>
  40457a:	2e10      	cmp	r6, #16
  40457c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40457e:	4d0a      	ldr	r5, [pc, #40]	; (4045a8 <_svfprintf_r+0x914>)
  404580:	f340 81f5 	ble.w	40496e <_svfprintf_r+0xcda>
  404584:	4622      	mov	r2, r4
  404586:	2710      	movs	r7, #16
  404588:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40458c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40458e:	e013      	b.n	4045b8 <_svfprintf_r+0x924>
  404590:	00408454 	.word	0x00408454
  404594:	00408440 	.word	0x00408440
  404598:	7fefffff 	.word	0x7fefffff
  40459c:	00408434 	.word	0x00408434
  4045a0:	00408430 	.word	0x00408430
  4045a4:	00408470 	.word	0x00408470
  4045a8:	00408484 	.word	0x00408484
  4045ac:	f108 0808 	add.w	r8, r8, #8
  4045b0:	3e10      	subs	r6, #16
  4045b2:	2e10      	cmp	r6, #16
  4045b4:	f340 81da 	ble.w	40496c <_svfprintf_r+0xcd8>
  4045b8:	3301      	adds	r3, #1
  4045ba:	3210      	adds	r2, #16
  4045bc:	2b07      	cmp	r3, #7
  4045be:	9227      	str	r2, [sp, #156]	; 0x9c
  4045c0:	9326      	str	r3, [sp, #152]	; 0x98
  4045c2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4045c6:	ddf1      	ble.n	4045ac <_svfprintf_r+0x918>
  4045c8:	aa25      	add	r2, sp, #148	; 0x94
  4045ca:	4621      	mov	r1, r4
  4045cc:	4658      	mov	r0, fp
  4045ce:	f002 fcc5 	bl	406f5c <__ssprint_r>
  4045d2:	2800      	cmp	r0, #0
  4045d4:	f47f ac30 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4045d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4045da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045dc:	46c8      	mov	r8, r9
  4045de:	e7e7      	b.n	4045b0 <_svfprintf_r+0x91c>
  4045e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4045e2:	9a08      	ldr	r2, [sp, #32]
  4045e4:	1a9f      	subs	r7, r3, r2
  4045e6:	2f00      	cmp	r7, #0
  4045e8:	f77f ace5 	ble.w	403fb6 <_svfprintf_r+0x322>
  4045ec:	2f10      	cmp	r7, #16
  4045ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045f0:	4db6      	ldr	r5, [pc, #728]	; (4048cc <_svfprintf_r+0xc38>)
  4045f2:	dd27      	ble.n	404644 <_svfprintf_r+0x9b0>
  4045f4:	4642      	mov	r2, r8
  4045f6:	4621      	mov	r1, r4
  4045f8:	46b0      	mov	r8, r6
  4045fa:	f04f 0b10 	mov.w	fp, #16
  4045fe:	462e      	mov	r6, r5
  404600:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404602:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404604:	e004      	b.n	404610 <_svfprintf_r+0x97c>
  404606:	3f10      	subs	r7, #16
  404608:	2f10      	cmp	r7, #16
  40460a:	f102 0208 	add.w	r2, r2, #8
  40460e:	dd15      	ble.n	40463c <_svfprintf_r+0x9a8>
  404610:	3301      	adds	r3, #1
  404612:	3110      	adds	r1, #16
  404614:	2b07      	cmp	r3, #7
  404616:	9127      	str	r1, [sp, #156]	; 0x9c
  404618:	9326      	str	r3, [sp, #152]	; 0x98
  40461a:	e882 0840 	stmia.w	r2, {r6, fp}
  40461e:	ddf2      	ble.n	404606 <_svfprintf_r+0x972>
  404620:	aa25      	add	r2, sp, #148	; 0x94
  404622:	4629      	mov	r1, r5
  404624:	4620      	mov	r0, r4
  404626:	f002 fc99 	bl	406f5c <__ssprint_r>
  40462a:	2800      	cmp	r0, #0
  40462c:	f47f ac04 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404630:	3f10      	subs	r7, #16
  404632:	2f10      	cmp	r7, #16
  404634:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404636:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404638:	464a      	mov	r2, r9
  40463a:	dce9      	bgt.n	404610 <_svfprintf_r+0x97c>
  40463c:	4635      	mov	r5, r6
  40463e:	460c      	mov	r4, r1
  404640:	4646      	mov	r6, r8
  404642:	4690      	mov	r8, r2
  404644:	3301      	adds	r3, #1
  404646:	443c      	add	r4, r7
  404648:	2b07      	cmp	r3, #7
  40464a:	9427      	str	r4, [sp, #156]	; 0x9c
  40464c:	9326      	str	r3, [sp, #152]	; 0x98
  40464e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404652:	f300 8232 	bgt.w	404aba <_svfprintf_r+0xe26>
  404656:	f108 0808 	add.w	r8, r8, #8
  40465a:	e4ac      	b.n	403fb6 <_svfprintf_r+0x322>
  40465c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40465e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404660:	2b01      	cmp	r3, #1
  404662:	f340 81fe 	ble.w	404a62 <_svfprintf_r+0xdce>
  404666:	3701      	adds	r7, #1
  404668:	3401      	adds	r4, #1
  40466a:	2301      	movs	r3, #1
  40466c:	2f07      	cmp	r7, #7
  40466e:	9427      	str	r4, [sp, #156]	; 0x9c
  404670:	9726      	str	r7, [sp, #152]	; 0x98
  404672:	f8c8 6000 	str.w	r6, [r8]
  404676:	f8c8 3004 	str.w	r3, [r8, #4]
  40467a:	f300 8203 	bgt.w	404a84 <_svfprintf_r+0xdf0>
  40467e:	f108 0808 	add.w	r8, r8, #8
  404682:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404684:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404686:	f8c8 3000 	str.w	r3, [r8]
  40468a:	3701      	adds	r7, #1
  40468c:	4414      	add	r4, r2
  40468e:	2f07      	cmp	r7, #7
  404690:	9427      	str	r4, [sp, #156]	; 0x9c
  404692:	9726      	str	r7, [sp, #152]	; 0x98
  404694:	f8c8 2004 	str.w	r2, [r8, #4]
  404698:	f300 8200 	bgt.w	404a9c <_svfprintf_r+0xe08>
  40469c:	f108 0808 	add.w	r8, r8, #8
  4046a0:	a815      	add	r0, sp, #84	; 0x54
  4046a2:	c80d      	ldmia	r0, {r0, r2, r3}
  4046a4:	9914      	ldr	r1, [sp, #80]	; 0x50
  4046a6:	f003 f923 	bl	4078f0 <__aeabi_dcmpeq>
  4046aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4046ac:	2800      	cmp	r0, #0
  4046ae:	f040 8101 	bne.w	4048b4 <_svfprintf_r+0xc20>
  4046b2:	3b01      	subs	r3, #1
  4046b4:	3701      	adds	r7, #1
  4046b6:	3601      	adds	r6, #1
  4046b8:	441c      	add	r4, r3
  4046ba:	2f07      	cmp	r7, #7
  4046bc:	9726      	str	r7, [sp, #152]	; 0x98
  4046be:	9427      	str	r4, [sp, #156]	; 0x9c
  4046c0:	f8c8 6000 	str.w	r6, [r8]
  4046c4:	f8c8 3004 	str.w	r3, [r8, #4]
  4046c8:	f300 8127 	bgt.w	40491a <_svfprintf_r+0xc86>
  4046cc:	f108 0808 	add.w	r8, r8, #8
  4046d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4046d2:	f8c8 2004 	str.w	r2, [r8, #4]
  4046d6:	3701      	adds	r7, #1
  4046d8:	4414      	add	r4, r2
  4046da:	ab21      	add	r3, sp, #132	; 0x84
  4046dc:	2f07      	cmp	r7, #7
  4046de:	9427      	str	r4, [sp, #156]	; 0x9c
  4046e0:	9726      	str	r7, [sp, #152]	; 0x98
  4046e2:	f8c8 3000 	str.w	r3, [r8]
  4046e6:	f77f acb3 	ble.w	404050 <_svfprintf_r+0x3bc>
  4046ea:	aa25      	add	r2, sp, #148	; 0x94
  4046ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046f0:	f002 fc34 	bl	406f5c <__ssprint_r>
  4046f4:	2800      	cmp	r0, #0
  4046f6:	f47f ab9f 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4046fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046fc:	46c8      	mov	r8, r9
  4046fe:	e4a9      	b.n	404054 <_svfprintf_r+0x3c0>
  404700:	aa25      	add	r2, sp, #148	; 0x94
  404702:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404704:	980c      	ldr	r0, [sp, #48]	; 0x30
  404706:	f002 fc29 	bl	406f5c <__ssprint_r>
  40470a:	2800      	cmp	r0, #0
  40470c:	f43f aceb 	beq.w	4040e6 <_svfprintf_r+0x452>
  404710:	f7ff bb92 	b.w	403e38 <_svfprintf_r+0x1a4>
  404714:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404718:	2b01      	cmp	r3, #1
  40471a:	f000 8134 	beq.w	404986 <_svfprintf_r+0xcf2>
  40471e:	2b02      	cmp	r3, #2
  404720:	d125      	bne.n	40476e <_svfprintf_r+0xada>
  404722:	f8cd b01c 	str.w	fp, [sp, #28]
  404726:	2400      	movs	r4, #0
  404728:	2500      	movs	r5, #0
  40472a:	e61e      	b.n	40436a <_svfprintf_r+0x6d6>
  40472c:	aa25      	add	r2, sp, #148	; 0x94
  40472e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404730:	980c      	ldr	r0, [sp, #48]	; 0x30
  404732:	f002 fc13 	bl	406f5c <__ssprint_r>
  404736:	2800      	cmp	r0, #0
  404738:	f47f ab7e 	bne.w	403e38 <_svfprintf_r+0x1a4>
  40473c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40473e:	46c8      	mov	r8, r9
  404740:	e475      	b.n	40402e <_svfprintf_r+0x39a>
  404742:	aa25      	add	r2, sp, #148	; 0x94
  404744:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404746:	980c      	ldr	r0, [sp, #48]	; 0x30
  404748:	f002 fc08 	bl	406f5c <__ssprint_r>
  40474c:	2800      	cmp	r0, #0
  40474e:	f47f ab73 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404752:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404754:	46c8      	mov	r8, r9
  404756:	e41b      	b.n	403f90 <_svfprintf_r+0x2fc>
  404758:	aa25      	add	r2, sp, #148	; 0x94
  40475a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40475c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40475e:	f002 fbfd 	bl	406f5c <__ssprint_r>
  404762:	2800      	cmp	r0, #0
  404764:	f47f ab68 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404768:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40476a:	46c8      	mov	r8, r9
  40476c:	e420      	b.n	403fb0 <_svfprintf_r+0x31c>
  40476e:	f8cd b01c 	str.w	fp, [sp, #28]
  404772:	2400      	movs	r4, #0
  404774:	2500      	movs	r5, #0
  404776:	4649      	mov	r1, r9
  404778:	e000      	b.n	40477c <_svfprintf_r+0xae8>
  40477a:	4631      	mov	r1, r6
  40477c:	08e2      	lsrs	r2, r4, #3
  40477e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404782:	08e8      	lsrs	r0, r5, #3
  404784:	f004 0307 	and.w	r3, r4, #7
  404788:	4605      	mov	r5, r0
  40478a:	4614      	mov	r4, r2
  40478c:	3330      	adds	r3, #48	; 0x30
  40478e:	ea54 0205 	orrs.w	r2, r4, r5
  404792:	f801 3c01 	strb.w	r3, [r1, #-1]
  404796:	f101 36ff 	add.w	r6, r1, #4294967295
  40479a:	d1ee      	bne.n	40477a <_svfprintf_r+0xae6>
  40479c:	9a07      	ldr	r2, [sp, #28]
  40479e:	07d2      	lsls	r2, r2, #31
  4047a0:	f57f adf3 	bpl.w	40438a <_svfprintf_r+0x6f6>
  4047a4:	2b30      	cmp	r3, #48	; 0x30
  4047a6:	f43f adf0 	beq.w	40438a <_svfprintf_r+0x6f6>
  4047aa:	3902      	subs	r1, #2
  4047ac:	2330      	movs	r3, #48	; 0x30
  4047ae:	f806 3c01 	strb.w	r3, [r6, #-1]
  4047b2:	eba9 0301 	sub.w	r3, r9, r1
  4047b6:	930e      	str	r3, [sp, #56]	; 0x38
  4047b8:	460e      	mov	r6, r1
  4047ba:	f7ff bb7b 	b.w	403eb4 <_svfprintf_r+0x220>
  4047be:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4047c0:	2900      	cmp	r1, #0
  4047c2:	f340 822e 	ble.w	404c22 <_svfprintf_r+0xf8e>
  4047c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4047ca:	4293      	cmp	r3, r2
  4047cc:	bfa8      	it	ge
  4047ce:	4613      	movge	r3, r2
  4047d0:	2b00      	cmp	r3, #0
  4047d2:	461f      	mov	r7, r3
  4047d4:	dd0d      	ble.n	4047f2 <_svfprintf_r+0xb5e>
  4047d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047d8:	f8c8 6000 	str.w	r6, [r8]
  4047dc:	3301      	adds	r3, #1
  4047de:	443c      	add	r4, r7
  4047e0:	2b07      	cmp	r3, #7
  4047e2:	9427      	str	r4, [sp, #156]	; 0x9c
  4047e4:	f8c8 7004 	str.w	r7, [r8, #4]
  4047e8:	9326      	str	r3, [sp, #152]	; 0x98
  4047ea:	f300 831f 	bgt.w	404e2c <_svfprintf_r+0x1198>
  4047ee:	f108 0808 	add.w	r8, r8, #8
  4047f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047f4:	2f00      	cmp	r7, #0
  4047f6:	bfa8      	it	ge
  4047f8:	1bdb      	subge	r3, r3, r7
  4047fa:	2b00      	cmp	r3, #0
  4047fc:	461f      	mov	r7, r3
  4047fe:	f340 80d6 	ble.w	4049ae <_svfprintf_r+0xd1a>
  404802:	2f10      	cmp	r7, #16
  404804:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404806:	4d31      	ldr	r5, [pc, #196]	; (4048cc <_svfprintf_r+0xc38>)
  404808:	f340 81ed 	ble.w	404be6 <_svfprintf_r+0xf52>
  40480c:	4642      	mov	r2, r8
  40480e:	4621      	mov	r1, r4
  404810:	46b0      	mov	r8, r6
  404812:	f04f 0b10 	mov.w	fp, #16
  404816:	462e      	mov	r6, r5
  404818:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40481a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40481c:	e004      	b.n	404828 <_svfprintf_r+0xb94>
  40481e:	3208      	adds	r2, #8
  404820:	3f10      	subs	r7, #16
  404822:	2f10      	cmp	r7, #16
  404824:	f340 81db 	ble.w	404bde <_svfprintf_r+0xf4a>
  404828:	3301      	adds	r3, #1
  40482a:	3110      	adds	r1, #16
  40482c:	2b07      	cmp	r3, #7
  40482e:	9127      	str	r1, [sp, #156]	; 0x9c
  404830:	9326      	str	r3, [sp, #152]	; 0x98
  404832:	e882 0840 	stmia.w	r2, {r6, fp}
  404836:	ddf2      	ble.n	40481e <_svfprintf_r+0xb8a>
  404838:	aa25      	add	r2, sp, #148	; 0x94
  40483a:	4629      	mov	r1, r5
  40483c:	4620      	mov	r0, r4
  40483e:	f002 fb8d 	bl	406f5c <__ssprint_r>
  404842:	2800      	cmp	r0, #0
  404844:	f47f aaf8 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404848:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40484a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40484c:	464a      	mov	r2, r9
  40484e:	e7e7      	b.n	404820 <_svfprintf_r+0xb8c>
  404850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404852:	930e      	str	r3, [sp, #56]	; 0x38
  404854:	464e      	mov	r6, r9
  404856:	f7ff bb2d 	b.w	403eb4 <_svfprintf_r+0x220>
  40485a:	2d00      	cmp	r5, #0
  40485c:	bf08      	it	eq
  40485e:	2c0a      	cmpeq	r4, #10
  404860:	f0c0 808f 	bcc.w	404982 <_svfprintf_r+0xcee>
  404864:	464e      	mov	r6, r9
  404866:	4620      	mov	r0, r4
  404868:	4629      	mov	r1, r5
  40486a:	220a      	movs	r2, #10
  40486c:	2300      	movs	r3, #0
  40486e:	f7fe ffed 	bl	40384c <__aeabi_uldivmod>
  404872:	3230      	adds	r2, #48	; 0x30
  404874:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404878:	4620      	mov	r0, r4
  40487a:	4629      	mov	r1, r5
  40487c:	2300      	movs	r3, #0
  40487e:	220a      	movs	r2, #10
  404880:	f7fe ffe4 	bl	40384c <__aeabi_uldivmod>
  404884:	4604      	mov	r4, r0
  404886:	460d      	mov	r5, r1
  404888:	ea54 0305 	orrs.w	r3, r4, r5
  40488c:	d1eb      	bne.n	404866 <_svfprintf_r+0xbd2>
  40488e:	eba9 0306 	sub.w	r3, r9, r6
  404892:	930e      	str	r3, [sp, #56]	; 0x38
  404894:	f7ff bb0e 	b.w	403eb4 <_svfprintf_r+0x220>
  404898:	aa25      	add	r2, sp, #148	; 0x94
  40489a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40489c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40489e:	f002 fb5d 	bl	406f5c <__ssprint_r>
  4048a2:	2800      	cmp	r0, #0
  4048a4:	f47f aac8 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4048a8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4048ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048ae:	46c8      	mov	r8, r9
  4048b0:	f7ff bb5e 	b.w	403f70 <_svfprintf_r+0x2dc>
  4048b4:	1e5e      	subs	r6, r3, #1
  4048b6:	2e00      	cmp	r6, #0
  4048b8:	f77f af0a 	ble.w	4046d0 <_svfprintf_r+0xa3c>
  4048bc:	2e10      	cmp	r6, #16
  4048be:	4d03      	ldr	r5, [pc, #12]	; (4048cc <_svfprintf_r+0xc38>)
  4048c0:	dd22      	ble.n	404908 <_svfprintf_r+0xc74>
  4048c2:	4622      	mov	r2, r4
  4048c4:	f04f 0b10 	mov.w	fp, #16
  4048c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4048ca:	e006      	b.n	4048da <_svfprintf_r+0xc46>
  4048cc:	00408484 	.word	0x00408484
  4048d0:	3e10      	subs	r6, #16
  4048d2:	2e10      	cmp	r6, #16
  4048d4:	f108 0808 	add.w	r8, r8, #8
  4048d8:	dd15      	ble.n	404906 <_svfprintf_r+0xc72>
  4048da:	3701      	adds	r7, #1
  4048dc:	3210      	adds	r2, #16
  4048de:	2f07      	cmp	r7, #7
  4048e0:	9227      	str	r2, [sp, #156]	; 0x9c
  4048e2:	9726      	str	r7, [sp, #152]	; 0x98
  4048e4:	e888 0820 	stmia.w	r8, {r5, fp}
  4048e8:	ddf2      	ble.n	4048d0 <_svfprintf_r+0xc3c>
  4048ea:	aa25      	add	r2, sp, #148	; 0x94
  4048ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ee:	4620      	mov	r0, r4
  4048f0:	f002 fb34 	bl	406f5c <__ssprint_r>
  4048f4:	2800      	cmp	r0, #0
  4048f6:	f47f aa9f 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4048fa:	3e10      	subs	r6, #16
  4048fc:	2e10      	cmp	r6, #16
  4048fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404900:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404902:	46c8      	mov	r8, r9
  404904:	dce9      	bgt.n	4048da <_svfprintf_r+0xc46>
  404906:	4614      	mov	r4, r2
  404908:	3701      	adds	r7, #1
  40490a:	4434      	add	r4, r6
  40490c:	2f07      	cmp	r7, #7
  40490e:	9427      	str	r4, [sp, #156]	; 0x9c
  404910:	9726      	str	r7, [sp, #152]	; 0x98
  404912:	e888 0060 	stmia.w	r8, {r5, r6}
  404916:	f77f aed9 	ble.w	4046cc <_svfprintf_r+0xa38>
  40491a:	aa25      	add	r2, sp, #148	; 0x94
  40491c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40491e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404920:	f002 fb1c 	bl	406f5c <__ssprint_r>
  404924:	2800      	cmp	r0, #0
  404926:	f47f aa87 	bne.w	403e38 <_svfprintf_r+0x1a4>
  40492a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40492c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40492e:	46c8      	mov	r8, r9
  404930:	e6ce      	b.n	4046d0 <_svfprintf_r+0xa3c>
  404932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404934:	6814      	ldr	r4, [r2, #0]
  404936:	4613      	mov	r3, r2
  404938:	3304      	adds	r3, #4
  40493a:	17e5      	asrs	r5, r4, #31
  40493c:	930f      	str	r3, [sp, #60]	; 0x3c
  40493e:	4622      	mov	r2, r4
  404940:	462b      	mov	r3, r5
  404942:	e4fa      	b.n	40433a <_svfprintf_r+0x6a6>
  404944:	3204      	adds	r2, #4
  404946:	681c      	ldr	r4, [r3, #0]
  404948:	920f      	str	r2, [sp, #60]	; 0x3c
  40494a:	2301      	movs	r3, #1
  40494c:	2500      	movs	r5, #0
  40494e:	f7ff ba94 	b.w	403e7a <_svfprintf_r+0x1e6>
  404952:	681c      	ldr	r4, [r3, #0]
  404954:	3304      	adds	r3, #4
  404956:	930f      	str	r3, [sp, #60]	; 0x3c
  404958:	2500      	movs	r5, #0
  40495a:	e421      	b.n	4041a0 <_svfprintf_r+0x50c>
  40495c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40495e:	460a      	mov	r2, r1
  404960:	3204      	adds	r2, #4
  404962:	680c      	ldr	r4, [r1, #0]
  404964:	920f      	str	r2, [sp, #60]	; 0x3c
  404966:	2500      	movs	r5, #0
  404968:	f7ff ba87 	b.w	403e7a <_svfprintf_r+0x1e6>
  40496c:	4614      	mov	r4, r2
  40496e:	3301      	adds	r3, #1
  404970:	4434      	add	r4, r6
  404972:	2b07      	cmp	r3, #7
  404974:	9427      	str	r4, [sp, #156]	; 0x9c
  404976:	9326      	str	r3, [sp, #152]	; 0x98
  404978:	e888 0060 	stmia.w	r8, {r5, r6}
  40497c:	f77f ab68 	ble.w	404050 <_svfprintf_r+0x3bc>
  404980:	e6b3      	b.n	4046ea <_svfprintf_r+0xa56>
  404982:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404986:	f8cd b01c 	str.w	fp, [sp, #28]
  40498a:	ae42      	add	r6, sp, #264	; 0x108
  40498c:	3430      	adds	r4, #48	; 0x30
  40498e:	2301      	movs	r3, #1
  404990:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404994:	930e      	str	r3, [sp, #56]	; 0x38
  404996:	f7ff ba8d 	b.w	403eb4 <_svfprintf_r+0x220>
  40499a:	aa25      	add	r2, sp, #148	; 0x94
  40499c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40499e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049a0:	f002 fadc 	bl	406f5c <__ssprint_r>
  4049a4:	2800      	cmp	r0, #0
  4049a6:	f47f aa47 	bne.w	403e38 <_svfprintf_r+0x1a4>
  4049aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049ac:	46c8      	mov	r8, r9
  4049ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4049b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4049b2:	429a      	cmp	r2, r3
  4049b4:	db44      	blt.n	404a40 <_svfprintf_r+0xdac>
  4049b6:	9b07      	ldr	r3, [sp, #28]
  4049b8:	07d9      	lsls	r1, r3, #31
  4049ba:	d441      	bmi.n	404a40 <_svfprintf_r+0xdac>
  4049bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4049be:	9812      	ldr	r0, [sp, #72]	; 0x48
  4049c0:	1a9a      	subs	r2, r3, r2
  4049c2:	1a1d      	subs	r5, r3, r0
  4049c4:	4295      	cmp	r5, r2
  4049c6:	bfa8      	it	ge
  4049c8:	4615      	movge	r5, r2
  4049ca:	2d00      	cmp	r5, #0
  4049cc:	dd0e      	ble.n	4049ec <_svfprintf_r+0xd58>
  4049ce:	9926      	ldr	r1, [sp, #152]	; 0x98
  4049d0:	f8c8 5004 	str.w	r5, [r8, #4]
  4049d4:	3101      	adds	r1, #1
  4049d6:	4406      	add	r6, r0
  4049d8:	442c      	add	r4, r5
  4049da:	2907      	cmp	r1, #7
  4049dc:	f8c8 6000 	str.w	r6, [r8]
  4049e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4049e2:	9126      	str	r1, [sp, #152]	; 0x98
  4049e4:	f300 823b 	bgt.w	404e5e <_svfprintf_r+0x11ca>
  4049e8:	f108 0808 	add.w	r8, r8, #8
  4049ec:	2d00      	cmp	r5, #0
  4049ee:	bfac      	ite	ge
  4049f0:	1b56      	subge	r6, r2, r5
  4049f2:	4616      	movlt	r6, r2
  4049f4:	2e00      	cmp	r6, #0
  4049f6:	f77f ab2d 	ble.w	404054 <_svfprintf_r+0x3c0>
  4049fa:	2e10      	cmp	r6, #16
  4049fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049fe:	4db0      	ldr	r5, [pc, #704]	; (404cc0 <_svfprintf_r+0x102c>)
  404a00:	ddb5      	ble.n	40496e <_svfprintf_r+0xcda>
  404a02:	4622      	mov	r2, r4
  404a04:	2710      	movs	r7, #16
  404a06:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404a0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404a0c:	e004      	b.n	404a18 <_svfprintf_r+0xd84>
  404a0e:	f108 0808 	add.w	r8, r8, #8
  404a12:	3e10      	subs	r6, #16
  404a14:	2e10      	cmp	r6, #16
  404a16:	dda9      	ble.n	40496c <_svfprintf_r+0xcd8>
  404a18:	3301      	adds	r3, #1
  404a1a:	3210      	adds	r2, #16
  404a1c:	2b07      	cmp	r3, #7
  404a1e:	9227      	str	r2, [sp, #156]	; 0x9c
  404a20:	9326      	str	r3, [sp, #152]	; 0x98
  404a22:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a26:	ddf2      	ble.n	404a0e <_svfprintf_r+0xd7a>
  404a28:	aa25      	add	r2, sp, #148	; 0x94
  404a2a:	4621      	mov	r1, r4
  404a2c:	4658      	mov	r0, fp
  404a2e:	f002 fa95 	bl	406f5c <__ssprint_r>
  404a32:	2800      	cmp	r0, #0
  404a34:	f47f aa00 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404a38:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a3c:	46c8      	mov	r8, r9
  404a3e:	e7e8      	b.n	404a12 <_svfprintf_r+0xd7e>
  404a40:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a42:	9819      	ldr	r0, [sp, #100]	; 0x64
  404a44:	991a      	ldr	r1, [sp, #104]	; 0x68
  404a46:	f8c8 1000 	str.w	r1, [r8]
  404a4a:	3301      	adds	r3, #1
  404a4c:	4404      	add	r4, r0
  404a4e:	2b07      	cmp	r3, #7
  404a50:	9427      	str	r4, [sp, #156]	; 0x9c
  404a52:	f8c8 0004 	str.w	r0, [r8, #4]
  404a56:	9326      	str	r3, [sp, #152]	; 0x98
  404a58:	f300 81f5 	bgt.w	404e46 <_svfprintf_r+0x11b2>
  404a5c:	f108 0808 	add.w	r8, r8, #8
  404a60:	e7ac      	b.n	4049bc <_svfprintf_r+0xd28>
  404a62:	9b07      	ldr	r3, [sp, #28]
  404a64:	07da      	lsls	r2, r3, #31
  404a66:	f53f adfe 	bmi.w	404666 <_svfprintf_r+0x9d2>
  404a6a:	3701      	adds	r7, #1
  404a6c:	3401      	adds	r4, #1
  404a6e:	2301      	movs	r3, #1
  404a70:	2f07      	cmp	r7, #7
  404a72:	9427      	str	r4, [sp, #156]	; 0x9c
  404a74:	9726      	str	r7, [sp, #152]	; 0x98
  404a76:	f8c8 6000 	str.w	r6, [r8]
  404a7a:	f8c8 3004 	str.w	r3, [r8, #4]
  404a7e:	f77f ae25 	ble.w	4046cc <_svfprintf_r+0xa38>
  404a82:	e74a      	b.n	40491a <_svfprintf_r+0xc86>
  404a84:	aa25      	add	r2, sp, #148	; 0x94
  404a86:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a88:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a8a:	f002 fa67 	bl	406f5c <__ssprint_r>
  404a8e:	2800      	cmp	r0, #0
  404a90:	f47f a9d2 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404a94:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a96:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404a98:	46c8      	mov	r8, r9
  404a9a:	e5f2      	b.n	404682 <_svfprintf_r+0x9ee>
  404a9c:	aa25      	add	r2, sp, #148	; 0x94
  404a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404aa0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404aa2:	f002 fa5b 	bl	406f5c <__ssprint_r>
  404aa6:	2800      	cmp	r0, #0
  404aa8:	f47f a9c6 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404aac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404aae:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404ab0:	46c8      	mov	r8, r9
  404ab2:	e5f5      	b.n	4046a0 <_svfprintf_r+0xa0c>
  404ab4:	464e      	mov	r6, r9
  404ab6:	f7ff b9fd 	b.w	403eb4 <_svfprintf_r+0x220>
  404aba:	aa25      	add	r2, sp, #148	; 0x94
  404abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404abe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ac0:	f002 fa4c 	bl	406f5c <__ssprint_r>
  404ac4:	2800      	cmp	r0, #0
  404ac6:	f47f a9b7 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404aca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404acc:	46c8      	mov	r8, r9
  404ace:	f7ff ba72 	b.w	403fb6 <_svfprintf_r+0x322>
  404ad2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404ad4:	4622      	mov	r2, r4
  404ad6:	4620      	mov	r0, r4
  404ad8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404ada:	4623      	mov	r3, r4
  404adc:	4621      	mov	r1, r4
  404ade:	f002 ff39 	bl	407954 <__aeabi_dcmpun>
  404ae2:	2800      	cmp	r0, #0
  404ae4:	f040 8286 	bne.w	404ff4 <_svfprintf_r+0x1360>
  404ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404aea:	3301      	adds	r3, #1
  404aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404aee:	f023 0320 	bic.w	r3, r3, #32
  404af2:	930e      	str	r3, [sp, #56]	; 0x38
  404af4:	f000 81e2 	beq.w	404ebc <_svfprintf_r+0x1228>
  404af8:	2b47      	cmp	r3, #71	; 0x47
  404afa:	f000 811e 	beq.w	404d3a <_svfprintf_r+0x10a6>
  404afe:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404b02:	9307      	str	r3, [sp, #28]
  404b04:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404b06:	1e1f      	subs	r7, r3, #0
  404b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404b0a:	9308      	str	r3, [sp, #32]
  404b0c:	bfbb      	ittet	lt
  404b0e:	463b      	movlt	r3, r7
  404b10:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404b14:	2300      	movge	r3, #0
  404b16:	232d      	movlt	r3, #45	; 0x2d
  404b18:	9310      	str	r3, [sp, #64]	; 0x40
  404b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b1c:	2b66      	cmp	r3, #102	; 0x66
  404b1e:	f000 81bb 	beq.w	404e98 <_svfprintf_r+0x1204>
  404b22:	2b46      	cmp	r3, #70	; 0x46
  404b24:	f000 80df 	beq.w	404ce6 <_svfprintf_r+0x1052>
  404b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404b2a:	9a08      	ldr	r2, [sp, #32]
  404b2c:	2b45      	cmp	r3, #69	; 0x45
  404b2e:	bf0c      	ite	eq
  404b30:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404b32:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404b34:	a823      	add	r0, sp, #140	; 0x8c
  404b36:	a920      	add	r1, sp, #128	; 0x80
  404b38:	bf08      	it	eq
  404b3a:	1c5d      	addeq	r5, r3, #1
  404b3c:	9004      	str	r0, [sp, #16]
  404b3e:	9103      	str	r1, [sp, #12]
  404b40:	a81f      	add	r0, sp, #124	; 0x7c
  404b42:	2102      	movs	r1, #2
  404b44:	463b      	mov	r3, r7
  404b46:	9002      	str	r0, [sp, #8]
  404b48:	9501      	str	r5, [sp, #4]
  404b4a:	9100      	str	r1, [sp, #0]
  404b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b4e:	f000 fb73 	bl	405238 <_dtoa_r>
  404b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b54:	2b67      	cmp	r3, #103	; 0x67
  404b56:	4606      	mov	r6, r0
  404b58:	f040 81e0 	bne.w	404f1c <_svfprintf_r+0x1288>
  404b5c:	f01b 0f01 	tst.w	fp, #1
  404b60:	f000 8246 	beq.w	404ff0 <_svfprintf_r+0x135c>
  404b64:	1974      	adds	r4, r6, r5
  404b66:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404b68:	9808      	ldr	r0, [sp, #32]
  404b6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404b6c:	4639      	mov	r1, r7
  404b6e:	f002 febf 	bl	4078f0 <__aeabi_dcmpeq>
  404b72:	2800      	cmp	r0, #0
  404b74:	f040 8165 	bne.w	404e42 <_svfprintf_r+0x11ae>
  404b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404b7a:	42a3      	cmp	r3, r4
  404b7c:	d206      	bcs.n	404b8c <_svfprintf_r+0xef8>
  404b7e:	2130      	movs	r1, #48	; 0x30
  404b80:	1c5a      	adds	r2, r3, #1
  404b82:	9223      	str	r2, [sp, #140]	; 0x8c
  404b84:	7019      	strb	r1, [r3, #0]
  404b86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404b88:	429c      	cmp	r4, r3
  404b8a:	d8f9      	bhi.n	404b80 <_svfprintf_r+0xeec>
  404b8c:	1b9b      	subs	r3, r3, r6
  404b8e:	9313      	str	r3, [sp, #76]	; 0x4c
  404b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404b92:	2b47      	cmp	r3, #71	; 0x47
  404b94:	f000 80e9 	beq.w	404d6a <_svfprintf_r+0x10d6>
  404b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b9a:	2b65      	cmp	r3, #101	; 0x65
  404b9c:	f340 81cd 	ble.w	404f3a <_svfprintf_r+0x12a6>
  404ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ba2:	2b66      	cmp	r3, #102	; 0x66
  404ba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404ba6:	9312      	str	r3, [sp, #72]	; 0x48
  404ba8:	f000 819e 	beq.w	404ee8 <_svfprintf_r+0x1254>
  404bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404bb0:	4619      	mov	r1, r3
  404bb2:	4291      	cmp	r1, r2
  404bb4:	f300 818a 	bgt.w	404ecc <_svfprintf_r+0x1238>
  404bb8:	f01b 0f01 	tst.w	fp, #1
  404bbc:	f040 8213 	bne.w	404fe6 <_svfprintf_r+0x1352>
  404bc0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404bc4:	9308      	str	r3, [sp, #32]
  404bc6:	2367      	movs	r3, #103	; 0x67
  404bc8:	920e      	str	r2, [sp, #56]	; 0x38
  404bca:	9311      	str	r3, [sp, #68]	; 0x44
  404bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404bce:	2b00      	cmp	r3, #0
  404bd0:	f040 80c4 	bne.w	404d5c <_svfprintf_r+0x10c8>
  404bd4:	930a      	str	r3, [sp, #40]	; 0x28
  404bd6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404bda:	f7ff b973 	b.w	403ec4 <_svfprintf_r+0x230>
  404bde:	4635      	mov	r5, r6
  404be0:	460c      	mov	r4, r1
  404be2:	4646      	mov	r6, r8
  404be4:	4690      	mov	r8, r2
  404be6:	3301      	adds	r3, #1
  404be8:	443c      	add	r4, r7
  404bea:	2b07      	cmp	r3, #7
  404bec:	9427      	str	r4, [sp, #156]	; 0x9c
  404bee:	9326      	str	r3, [sp, #152]	; 0x98
  404bf0:	e888 00a0 	stmia.w	r8, {r5, r7}
  404bf4:	f73f aed1 	bgt.w	40499a <_svfprintf_r+0xd06>
  404bf8:	f108 0808 	add.w	r8, r8, #8
  404bfc:	e6d7      	b.n	4049ae <_svfprintf_r+0xd1a>
  404bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c00:	6813      	ldr	r3, [r2, #0]
  404c02:	3204      	adds	r2, #4
  404c04:	920f      	str	r2, [sp, #60]	; 0x3c
  404c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404c08:	601a      	str	r2, [r3, #0]
  404c0a:	f7ff b86a 	b.w	403ce2 <_svfprintf_r+0x4e>
  404c0e:	aa25      	add	r2, sp, #148	; 0x94
  404c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c14:	f002 f9a2 	bl	406f5c <__ssprint_r>
  404c18:	2800      	cmp	r0, #0
  404c1a:	f47f a90d 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404c1e:	46c8      	mov	r8, r9
  404c20:	e48d      	b.n	40453e <_svfprintf_r+0x8aa>
  404c22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c24:	4a27      	ldr	r2, [pc, #156]	; (404cc4 <_svfprintf_r+0x1030>)
  404c26:	f8c8 2000 	str.w	r2, [r8]
  404c2a:	3301      	adds	r3, #1
  404c2c:	3401      	adds	r4, #1
  404c2e:	2201      	movs	r2, #1
  404c30:	2b07      	cmp	r3, #7
  404c32:	9427      	str	r4, [sp, #156]	; 0x9c
  404c34:	9326      	str	r3, [sp, #152]	; 0x98
  404c36:	f8c8 2004 	str.w	r2, [r8, #4]
  404c3a:	dc72      	bgt.n	404d22 <_svfprintf_r+0x108e>
  404c3c:	f108 0808 	add.w	r8, r8, #8
  404c40:	b929      	cbnz	r1, 404c4e <_svfprintf_r+0xfba>
  404c42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c44:	b91b      	cbnz	r3, 404c4e <_svfprintf_r+0xfba>
  404c46:	9b07      	ldr	r3, [sp, #28]
  404c48:	07d8      	lsls	r0, r3, #31
  404c4a:	f57f aa03 	bpl.w	404054 <_svfprintf_r+0x3c0>
  404c4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c50:	9819      	ldr	r0, [sp, #100]	; 0x64
  404c52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404c54:	f8c8 2000 	str.w	r2, [r8]
  404c58:	3301      	adds	r3, #1
  404c5a:	4602      	mov	r2, r0
  404c5c:	4422      	add	r2, r4
  404c5e:	2b07      	cmp	r3, #7
  404c60:	9227      	str	r2, [sp, #156]	; 0x9c
  404c62:	f8c8 0004 	str.w	r0, [r8, #4]
  404c66:	9326      	str	r3, [sp, #152]	; 0x98
  404c68:	f300 818d 	bgt.w	404f86 <_svfprintf_r+0x12f2>
  404c6c:	f108 0808 	add.w	r8, r8, #8
  404c70:	2900      	cmp	r1, #0
  404c72:	f2c0 8165 	blt.w	404f40 <_svfprintf_r+0x12ac>
  404c76:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404c78:	f8c8 6000 	str.w	r6, [r8]
  404c7c:	3301      	adds	r3, #1
  404c7e:	188c      	adds	r4, r1, r2
  404c80:	2b07      	cmp	r3, #7
  404c82:	9427      	str	r4, [sp, #156]	; 0x9c
  404c84:	9326      	str	r3, [sp, #152]	; 0x98
  404c86:	f8c8 1004 	str.w	r1, [r8, #4]
  404c8a:	f77f a9e1 	ble.w	404050 <_svfprintf_r+0x3bc>
  404c8e:	e52c      	b.n	4046ea <_svfprintf_r+0xa56>
  404c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c92:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c94:	6813      	ldr	r3, [r2, #0]
  404c96:	17cd      	asrs	r5, r1, #31
  404c98:	4608      	mov	r0, r1
  404c9a:	3204      	adds	r2, #4
  404c9c:	4629      	mov	r1, r5
  404c9e:	920f      	str	r2, [sp, #60]	; 0x3c
  404ca0:	e9c3 0100 	strd	r0, r1, [r3]
  404ca4:	f7ff b81d 	b.w	403ce2 <_svfprintf_r+0x4e>
  404ca8:	aa25      	add	r2, sp, #148	; 0x94
  404caa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cac:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cae:	f002 f955 	bl	406f5c <__ssprint_r>
  404cb2:	2800      	cmp	r0, #0
  404cb4:	f47f a8c0 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404cb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cba:	46c8      	mov	r8, r9
  404cbc:	e458      	b.n	404570 <_svfprintf_r+0x8dc>
  404cbe:	bf00      	nop
  404cc0:	00408484 	.word	0x00408484
  404cc4:	00408470 	.word	0x00408470
  404cc8:	2140      	movs	r1, #64	; 0x40
  404cca:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ccc:	f001 fa0a 	bl	4060e4 <_malloc_r>
  404cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404cd2:	6010      	str	r0, [r2, #0]
  404cd4:	6110      	str	r0, [r2, #16]
  404cd6:	2800      	cmp	r0, #0
  404cd8:	f000 81f2 	beq.w	4050c0 <_svfprintf_r+0x142c>
  404cdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404cde:	2340      	movs	r3, #64	; 0x40
  404ce0:	6153      	str	r3, [r2, #20]
  404ce2:	f7fe bfee 	b.w	403cc2 <_svfprintf_r+0x2e>
  404ce6:	a823      	add	r0, sp, #140	; 0x8c
  404ce8:	a920      	add	r1, sp, #128	; 0x80
  404cea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404cec:	9004      	str	r0, [sp, #16]
  404cee:	9103      	str	r1, [sp, #12]
  404cf0:	a81f      	add	r0, sp, #124	; 0x7c
  404cf2:	2103      	movs	r1, #3
  404cf4:	9002      	str	r0, [sp, #8]
  404cf6:	9a08      	ldr	r2, [sp, #32]
  404cf8:	9401      	str	r4, [sp, #4]
  404cfa:	463b      	mov	r3, r7
  404cfc:	9100      	str	r1, [sp, #0]
  404cfe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d00:	f000 fa9a 	bl	405238 <_dtoa_r>
  404d04:	4625      	mov	r5, r4
  404d06:	4606      	mov	r6, r0
  404d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d0a:	2b46      	cmp	r3, #70	; 0x46
  404d0c:	eb06 0405 	add.w	r4, r6, r5
  404d10:	f47f af29 	bne.w	404b66 <_svfprintf_r+0xed2>
  404d14:	7833      	ldrb	r3, [r6, #0]
  404d16:	2b30      	cmp	r3, #48	; 0x30
  404d18:	f000 8178 	beq.w	40500c <_svfprintf_r+0x1378>
  404d1c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404d1e:	442c      	add	r4, r5
  404d20:	e721      	b.n	404b66 <_svfprintf_r+0xed2>
  404d22:	aa25      	add	r2, sp, #148	; 0x94
  404d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d28:	f002 f918 	bl	406f5c <__ssprint_r>
  404d2c:	2800      	cmp	r0, #0
  404d2e:	f47f a883 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404d32:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404d34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d36:	46c8      	mov	r8, r9
  404d38:	e782      	b.n	404c40 <_svfprintf_r+0xfac>
  404d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d3c:	2b00      	cmp	r3, #0
  404d3e:	bf08      	it	eq
  404d40:	2301      	moveq	r3, #1
  404d42:	930a      	str	r3, [sp, #40]	; 0x28
  404d44:	e6db      	b.n	404afe <_svfprintf_r+0xe6a>
  404d46:	4630      	mov	r0, r6
  404d48:	940a      	str	r4, [sp, #40]	; 0x28
  404d4a:	f002 f899 	bl	406e80 <strlen>
  404d4e:	950f      	str	r5, [sp, #60]	; 0x3c
  404d50:	900e      	str	r0, [sp, #56]	; 0x38
  404d52:	f8cd b01c 	str.w	fp, [sp, #28]
  404d56:	4603      	mov	r3, r0
  404d58:	f7ff b9f9 	b.w	40414e <_svfprintf_r+0x4ba>
  404d5c:	272d      	movs	r7, #45	; 0x2d
  404d5e:	2300      	movs	r3, #0
  404d60:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404d64:	930a      	str	r3, [sp, #40]	; 0x28
  404d66:	f7ff b8ae 	b.w	403ec6 <_svfprintf_r+0x232>
  404d6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404d6c:	9312      	str	r3, [sp, #72]	; 0x48
  404d6e:	461a      	mov	r2, r3
  404d70:	3303      	adds	r3, #3
  404d72:	db04      	blt.n	404d7e <_svfprintf_r+0x10ea>
  404d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d76:	4619      	mov	r1, r3
  404d78:	4291      	cmp	r1, r2
  404d7a:	f6bf af17 	bge.w	404bac <_svfprintf_r+0xf18>
  404d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d80:	3b02      	subs	r3, #2
  404d82:	9311      	str	r3, [sp, #68]	; 0x44
  404d84:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404d88:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d8e:	3b01      	subs	r3, #1
  404d90:	2b00      	cmp	r3, #0
  404d92:	931f      	str	r3, [sp, #124]	; 0x7c
  404d94:	bfbd      	ittte	lt
  404d96:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404d98:	f1c3 0301 	rsblt	r3, r3, #1
  404d9c:	222d      	movlt	r2, #45	; 0x2d
  404d9e:	222b      	movge	r2, #43	; 0x2b
  404da0:	2b09      	cmp	r3, #9
  404da2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404da6:	f340 8116 	ble.w	404fd6 <_svfprintf_r+0x1342>
  404daa:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404dae:	4620      	mov	r0, r4
  404db0:	4dab      	ldr	r5, [pc, #684]	; (405060 <_svfprintf_r+0x13cc>)
  404db2:	e000      	b.n	404db6 <_svfprintf_r+0x1122>
  404db4:	4610      	mov	r0, r2
  404db6:	fb85 1203 	smull	r1, r2, r5, r3
  404dba:	17d9      	asrs	r1, r3, #31
  404dbc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404dc0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404dc4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404dc8:	3230      	adds	r2, #48	; 0x30
  404dca:	2909      	cmp	r1, #9
  404dcc:	f800 2c01 	strb.w	r2, [r0, #-1]
  404dd0:	460b      	mov	r3, r1
  404dd2:	f100 32ff 	add.w	r2, r0, #4294967295
  404dd6:	dced      	bgt.n	404db4 <_svfprintf_r+0x1120>
  404dd8:	3330      	adds	r3, #48	; 0x30
  404dda:	3802      	subs	r0, #2
  404ddc:	b2d9      	uxtb	r1, r3
  404dde:	4284      	cmp	r4, r0
  404de0:	f802 1c01 	strb.w	r1, [r2, #-1]
  404de4:	f240 8165 	bls.w	4050b2 <_svfprintf_r+0x141e>
  404de8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404dec:	4613      	mov	r3, r2
  404dee:	e001      	b.n	404df4 <_svfprintf_r+0x1160>
  404df0:	f813 1b01 	ldrb.w	r1, [r3], #1
  404df4:	f800 1b01 	strb.w	r1, [r0], #1
  404df8:	42a3      	cmp	r3, r4
  404dfa:	d1f9      	bne.n	404df0 <_svfprintf_r+0x115c>
  404dfc:	3301      	adds	r3, #1
  404dfe:	1a9b      	subs	r3, r3, r2
  404e00:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404e04:	4413      	add	r3, r2
  404e06:	aa21      	add	r2, sp, #132	; 0x84
  404e08:	1a9b      	subs	r3, r3, r2
  404e0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404e0c:	931b      	str	r3, [sp, #108]	; 0x6c
  404e0e:	2a01      	cmp	r2, #1
  404e10:	4413      	add	r3, r2
  404e12:	930e      	str	r3, [sp, #56]	; 0x38
  404e14:	f340 8119 	ble.w	40504a <_svfprintf_r+0x13b6>
  404e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e1c:	4413      	add	r3, r2
  404e1e:	930e      	str	r3, [sp, #56]	; 0x38
  404e20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e24:	9308      	str	r3, [sp, #32]
  404e26:	2300      	movs	r3, #0
  404e28:	9312      	str	r3, [sp, #72]	; 0x48
  404e2a:	e6cf      	b.n	404bcc <_svfprintf_r+0xf38>
  404e2c:	aa25      	add	r2, sp, #148	; 0x94
  404e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e30:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e32:	f002 f893 	bl	406f5c <__ssprint_r>
  404e36:	2800      	cmp	r0, #0
  404e38:	f47e affe 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404e3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e3e:	46c8      	mov	r8, r9
  404e40:	e4d7      	b.n	4047f2 <_svfprintf_r+0xb5e>
  404e42:	4623      	mov	r3, r4
  404e44:	e6a2      	b.n	404b8c <_svfprintf_r+0xef8>
  404e46:	aa25      	add	r2, sp, #148	; 0x94
  404e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e4c:	f002 f886 	bl	406f5c <__ssprint_r>
  404e50:	2800      	cmp	r0, #0
  404e52:	f47e aff1 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404e56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404e58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e5a:	46c8      	mov	r8, r9
  404e5c:	e5ae      	b.n	4049bc <_svfprintf_r+0xd28>
  404e5e:	aa25      	add	r2, sp, #148	; 0x94
  404e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e62:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e64:	f002 f87a 	bl	406f5c <__ssprint_r>
  404e68:	2800      	cmp	r0, #0
  404e6a:	f47e afe5 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404e6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404e70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e74:	1a9a      	subs	r2, r3, r2
  404e76:	46c8      	mov	r8, r9
  404e78:	e5b8      	b.n	4049ec <_svfprintf_r+0xd58>
  404e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e7c:	9612      	str	r6, [sp, #72]	; 0x48
  404e7e:	2b06      	cmp	r3, #6
  404e80:	bf28      	it	cs
  404e82:	2306      	movcs	r3, #6
  404e84:	960a      	str	r6, [sp, #40]	; 0x28
  404e86:	4637      	mov	r7, r6
  404e88:	9308      	str	r3, [sp, #32]
  404e8a:	950f      	str	r5, [sp, #60]	; 0x3c
  404e8c:	f8cd b01c 	str.w	fp, [sp, #28]
  404e90:	930e      	str	r3, [sp, #56]	; 0x38
  404e92:	4e74      	ldr	r6, [pc, #464]	; (405064 <_svfprintf_r+0x13d0>)
  404e94:	f7ff b816 	b.w	403ec4 <_svfprintf_r+0x230>
  404e98:	a823      	add	r0, sp, #140	; 0x8c
  404e9a:	a920      	add	r1, sp, #128	; 0x80
  404e9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404e9e:	9004      	str	r0, [sp, #16]
  404ea0:	9103      	str	r1, [sp, #12]
  404ea2:	a81f      	add	r0, sp, #124	; 0x7c
  404ea4:	2103      	movs	r1, #3
  404ea6:	9002      	str	r0, [sp, #8]
  404ea8:	9a08      	ldr	r2, [sp, #32]
  404eaa:	9501      	str	r5, [sp, #4]
  404eac:	463b      	mov	r3, r7
  404eae:	9100      	str	r1, [sp, #0]
  404eb0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404eb2:	f000 f9c1 	bl	405238 <_dtoa_r>
  404eb6:	4606      	mov	r6, r0
  404eb8:	1944      	adds	r4, r0, r5
  404eba:	e72b      	b.n	404d14 <_svfprintf_r+0x1080>
  404ebc:	2306      	movs	r3, #6
  404ebe:	930a      	str	r3, [sp, #40]	; 0x28
  404ec0:	e61d      	b.n	404afe <_svfprintf_r+0xe6a>
  404ec2:	272d      	movs	r7, #45	; 0x2d
  404ec4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404ec8:	f7ff bacd 	b.w	404466 <_svfprintf_r+0x7d2>
  404ecc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ed0:	4413      	add	r3, r2
  404ed2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404ed4:	930e      	str	r3, [sp, #56]	; 0x38
  404ed6:	2a00      	cmp	r2, #0
  404ed8:	f340 80b0 	ble.w	40503c <_svfprintf_r+0x13a8>
  404edc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ee0:	9308      	str	r3, [sp, #32]
  404ee2:	2367      	movs	r3, #103	; 0x67
  404ee4:	9311      	str	r3, [sp, #68]	; 0x44
  404ee6:	e671      	b.n	404bcc <_svfprintf_r+0xf38>
  404ee8:	2b00      	cmp	r3, #0
  404eea:	f340 80c3 	ble.w	405074 <_svfprintf_r+0x13e0>
  404eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404ef0:	2a00      	cmp	r2, #0
  404ef2:	f040 8099 	bne.w	405028 <_svfprintf_r+0x1394>
  404ef6:	f01b 0f01 	tst.w	fp, #1
  404efa:	f040 8095 	bne.w	405028 <_svfprintf_r+0x1394>
  404efe:	9308      	str	r3, [sp, #32]
  404f00:	930e      	str	r3, [sp, #56]	; 0x38
  404f02:	e663      	b.n	404bcc <_svfprintf_r+0xf38>
  404f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f06:	9308      	str	r3, [sp, #32]
  404f08:	930e      	str	r3, [sp, #56]	; 0x38
  404f0a:	900a      	str	r0, [sp, #40]	; 0x28
  404f0c:	950f      	str	r5, [sp, #60]	; 0x3c
  404f0e:	f8cd b01c 	str.w	fp, [sp, #28]
  404f12:	9012      	str	r0, [sp, #72]	; 0x48
  404f14:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404f18:	f7fe bfd4 	b.w	403ec4 <_svfprintf_r+0x230>
  404f1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f1e:	2b47      	cmp	r3, #71	; 0x47
  404f20:	f47f ae20 	bne.w	404b64 <_svfprintf_r+0xed0>
  404f24:	f01b 0f01 	tst.w	fp, #1
  404f28:	f47f aeee 	bne.w	404d08 <_svfprintf_r+0x1074>
  404f2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404f2e:	1b9b      	subs	r3, r3, r6
  404f30:	9313      	str	r3, [sp, #76]	; 0x4c
  404f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f34:	2b47      	cmp	r3, #71	; 0x47
  404f36:	f43f af18 	beq.w	404d6a <_svfprintf_r+0x10d6>
  404f3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f3c:	9312      	str	r3, [sp, #72]	; 0x48
  404f3e:	e721      	b.n	404d84 <_svfprintf_r+0x10f0>
  404f40:	424f      	negs	r7, r1
  404f42:	3110      	adds	r1, #16
  404f44:	4d48      	ldr	r5, [pc, #288]	; (405068 <_svfprintf_r+0x13d4>)
  404f46:	da2f      	bge.n	404fa8 <_svfprintf_r+0x1314>
  404f48:	2410      	movs	r4, #16
  404f4a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404f4e:	e004      	b.n	404f5a <_svfprintf_r+0x12c6>
  404f50:	f108 0808 	add.w	r8, r8, #8
  404f54:	3f10      	subs	r7, #16
  404f56:	2f10      	cmp	r7, #16
  404f58:	dd26      	ble.n	404fa8 <_svfprintf_r+0x1314>
  404f5a:	3301      	adds	r3, #1
  404f5c:	3210      	adds	r2, #16
  404f5e:	2b07      	cmp	r3, #7
  404f60:	9227      	str	r2, [sp, #156]	; 0x9c
  404f62:	9326      	str	r3, [sp, #152]	; 0x98
  404f64:	f8c8 5000 	str.w	r5, [r8]
  404f68:	f8c8 4004 	str.w	r4, [r8, #4]
  404f6c:	ddf0      	ble.n	404f50 <_svfprintf_r+0x12bc>
  404f6e:	aa25      	add	r2, sp, #148	; 0x94
  404f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f72:	4658      	mov	r0, fp
  404f74:	f001 fff2 	bl	406f5c <__ssprint_r>
  404f78:	2800      	cmp	r0, #0
  404f7a:	f47e af5d 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404f7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404f80:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f82:	46c8      	mov	r8, r9
  404f84:	e7e6      	b.n	404f54 <_svfprintf_r+0x12c0>
  404f86:	aa25      	add	r2, sp, #148	; 0x94
  404f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f8c:	f001 ffe6 	bl	406f5c <__ssprint_r>
  404f90:	2800      	cmp	r0, #0
  404f92:	f47e af51 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404f96:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404f98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f9c:	46c8      	mov	r8, r9
  404f9e:	e667      	b.n	404c70 <_svfprintf_r+0xfdc>
  404fa0:	2000      	movs	r0, #0
  404fa2:	900a      	str	r0, [sp, #40]	; 0x28
  404fa4:	f7fe bed0 	b.w	403d48 <_svfprintf_r+0xb4>
  404fa8:	3301      	adds	r3, #1
  404faa:	443a      	add	r2, r7
  404fac:	2b07      	cmp	r3, #7
  404fae:	e888 00a0 	stmia.w	r8, {r5, r7}
  404fb2:	9227      	str	r2, [sp, #156]	; 0x9c
  404fb4:	9326      	str	r3, [sp, #152]	; 0x98
  404fb6:	f108 0808 	add.w	r8, r8, #8
  404fba:	f77f ae5c 	ble.w	404c76 <_svfprintf_r+0xfe2>
  404fbe:	aa25      	add	r2, sp, #148	; 0x94
  404fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fc2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fc4:	f001 ffca 	bl	406f5c <__ssprint_r>
  404fc8:	2800      	cmp	r0, #0
  404fca:	f47e af35 	bne.w	403e38 <_svfprintf_r+0x1a4>
  404fce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fd2:	46c8      	mov	r8, r9
  404fd4:	e64f      	b.n	404c76 <_svfprintf_r+0xfe2>
  404fd6:	3330      	adds	r3, #48	; 0x30
  404fd8:	2230      	movs	r2, #48	; 0x30
  404fda:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404fde:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404fe2:	ab22      	add	r3, sp, #136	; 0x88
  404fe4:	e70f      	b.n	404e06 <_svfprintf_r+0x1172>
  404fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fe8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404fea:	4413      	add	r3, r2
  404fec:	930e      	str	r3, [sp, #56]	; 0x38
  404fee:	e775      	b.n	404edc <_svfprintf_r+0x1248>
  404ff0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404ff2:	e5cb      	b.n	404b8c <_svfprintf_r+0xef8>
  404ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404ff6:	4e1d      	ldr	r6, [pc, #116]	; (40506c <_svfprintf_r+0x13d8>)
  404ff8:	2b00      	cmp	r3, #0
  404ffa:	bfb6      	itet	lt
  404ffc:	272d      	movlt	r7, #45	; 0x2d
  404ffe:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405002:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  405006:	4b1a      	ldr	r3, [pc, #104]	; (405070 <_svfprintf_r+0x13dc>)
  405008:	f7ff ba2f 	b.w	40446a <_svfprintf_r+0x7d6>
  40500c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40500e:	9808      	ldr	r0, [sp, #32]
  405010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405012:	4639      	mov	r1, r7
  405014:	f002 fc6c 	bl	4078f0 <__aeabi_dcmpeq>
  405018:	2800      	cmp	r0, #0
  40501a:	f47f ae7f 	bne.w	404d1c <_svfprintf_r+0x1088>
  40501e:	f1c5 0501 	rsb	r5, r5, #1
  405022:	951f      	str	r5, [sp, #124]	; 0x7c
  405024:	442c      	add	r4, r5
  405026:	e59e      	b.n	404b66 <_svfprintf_r+0xed2>
  405028:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40502a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40502c:	4413      	add	r3, r2
  40502e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405030:	441a      	add	r2, r3
  405032:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405036:	920e      	str	r2, [sp, #56]	; 0x38
  405038:	9308      	str	r3, [sp, #32]
  40503a:	e5c7      	b.n	404bcc <_svfprintf_r+0xf38>
  40503c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40503e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405040:	f1c3 0301 	rsb	r3, r3, #1
  405044:	441a      	add	r2, r3
  405046:	4613      	mov	r3, r2
  405048:	e7d0      	b.n	404fec <_svfprintf_r+0x1358>
  40504a:	f01b 0301 	ands.w	r3, fp, #1
  40504e:	9312      	str	r3, [sp, #72]	; 0x48
  405050:	f47f aee2 	bne.w	404e18 <_svfprintf_r+0x1184>
  405054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40505a:	9308      	str	r3, [sp, #32]
  40505c:	e5b6      	b.n	404bcc <_svfprintf_r+0xf38>
  40505e:	bf00      	nop
  405060:	66666667 	.word	0x66666667
  405064:	00408468 	.word	0x00408468
  405068:	00408484 	.word	0x00408484
  40506c:	0040843c 	.word	0x0040843c
  405070:	00408438 	.word	0x00408438
  405074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405076:	b913      	cbnz	r3, 40507e <_svfprintf_r+0x13ea>
  405078:	f01b 0f01 	tst.w	fp, #1
  40507c:	d002      	beq.n	405084 <_svfprintf_r+0x13f0>
  40507e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405080:	3301      	adds	r3, #1
  405082:	e7d4      	b.n	40502e <_svfprintf_r+0x139a>
  405084:	2301      	movs	r3, #1
  405086:	e73a      	b.n	404efe <_svfprintf_r+0x126a>
  405088:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40508a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40508e:	6828      	ldr	r0, [r5, #0]
  405090:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405094:	900a      	str	r0, [sp, #40]	; 0x28
  405096:	4628      	mov	r0, r5
  405098:	3004      	adds	r0, #4
  40509a:	46a2      	mov	sl, r4
  40509c:	900f      	str	r0, [sp, #60]	; 0x3c
  40509e:	f7fe be51 	b.w	403d44 <_svfprintf_r+0xb0>
  4050a2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050a6:	f7ff b867 	b.w	404178 <_svfprintf_r+0x4e4>
  4050aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050ae:	f7ff ba15 	b.w	4044dc <_svfprintf_r+0x848>
  4050b2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4050b6:	e6a6      	b.n	404e06 <_svfprintf_r+0x1172>
  4050b8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050bc:	f7ff b8eb 	b.w	404296 <_svfprintf_r+0x602>
  4050c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4050c2:	230c      	movs	r3, #12
  4050c4:	6013      	str	r3, [r2, #0]
  4050c6:	f04f 33ff 	mov.w	r3, #4294967295
  4050ca:	9309      	str	r3, [sp, #36]	; 0x24
  4050cc:	f7fe bebd 	b.w	403e4a <_svfprintf_r+0x1b6>
  4050d0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050d4:	f7ff b99a 	b.w	40440c <_svfprintf_r+0x778>
  4050d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050dc:	f7ff b976 	b.w	4043cc <_svfprintf_r+0x738>
  4050e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050e4:	f7ff b959 	b.w	40439a <_svfprintf_r+0x706>
  4050e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050ec:	f7ff b912 	b.w	404314 <_svfprintf_r+0x680>

004050f0 <register_fini>:
  4050f0:	4b02      	ldr	r3, [pc, #8]	; (4050fc <register_fini+0xc>)
  4050f2:	b113      	cbz	r3, 4050fa <register_fini+0xa>
  4050f4:	4802      	ldr	r0, [pc, #8]	; (405100 <register_fini+0x10>)
  4050f6:	f000 b805 	b.w	405104 <atexit>
  4050fa:	4770      	bx	lr
  4050fc:	00000000 	.word	0x00000000
  405100:	0040608d 	.word	0x0040608d

00405104 <atexit>:
  405104:	2300      	movs	r3, #0
  405106:	4601      	mov	r1, r0
  405108:	461a      	mov	r2, r3
  40510a:	4618      	mov	r0, r3
  40510c:	f001 bfa4 	b.w	407058 <__register_exitproc>

00405110 <quorem>:
  405110:	6902      	ldr	r2, [r0, #16]
  405112:	690b      	ldr	r3, [r1, #16]
  405114:	4293      	cmp	r3, r2
  405116:	f300 808d 	bgt.w	405234 <quorem+0x124>
  40511a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40511e:	f103 38ff 	add.w	r8, r3, #4294967295
  405122:	f101 0714 	add.w	r7, r1, #20
  405126:	f100 0b14 	add.w	fp, r0, #20
  40512a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40512e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405132:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405136:	b083      	sub	sp, #12
  405138:	3201      	adds	r2, #1
  40513a:	fbb3 f9f2 	udiv	r9, r3, r2
  40513e:	eb0b 0304 	add.w	r3, fp, r4
  405142:	9400      	str	r4, [sp, #0]
  405144:	eb07 0a04 	add.w	sl, r7, r4
  405148:	9301      	str	r3, [sp, #4]
  40514a:	f1b9 0f00 	cmp.w	r9, #0
  40514e:	d039      	beq.n	4051c4 <quorem+0xb4>
  405150:	2500      	movs	r5, #0
  405152:	462e      	mov	r6, r5
  405154:	46bc      	mov	ip, r7
  405156:	46de      	mov	lr, fp
  405158:	f85c 4b04 	ldr.w	r4, [ip], #4
  40515c:	f8de 3000 	ldr.w	r3, [lr]
  405160:	b2a2      	uxth	r2, r4
  405162:	fb09 5502 	mla	r5, r9, r2, r5
  405166:	0c22      	lsrs	r2, r4, #16
  405168:	0c2c      	lsrs	r4, r5, #16
  40516a:	fb09 4202 	mla	r2, r9, r2, r4
  40516e:	b2ad      	uxth	r5, r5
  405170:	1b75      	subs	r5, r6, r5
  405172:	b296      	uxth	r6, r2
  405174:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405178:	fa15 f383 	uxtah	r3, r5, r3
  40517c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405180:	b29b      	uxth	r3, r3
  405182:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405186:	45e2      	cmp	sl, ip
  405188:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40518c:	f84e 3b04 	str.w	r3, [lr], #4
  405190:	ea4f 4626 	mov.w	r6, r6, asr #16
  405194:	d2e0      	bcs.n	405158 <quorem+0x48>
  405196:	9b00      	ldr	r3, [sp, #0]
  405198:	f85b 3003 	ldr.w	r3, [fp, r3]
  40519c:	b993      	cbnz	r3, 4051c4 <quorem+0xb4>
  40519e:	9c01      	ldr	r4, [sp, #4]
  4051a0:	1f23      	subs	r3, r4, #4
  4051a2:	459b      	cmp	fp, r3
  4051a4:	d20c      	bcs.n	4051c0 <quorem+0xb0>
  4051a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4051aa:	b94b      	cbnz	r3, 4051c0 <quorem+0xb0>
  4051ac:	f1a4 0308 	sub.w	r3, r4, #8
  4051b0:	e002      	b.n	4051b8 <quorem+0xa8>
  4051b2:	681a      	ldr	r2, [r3, #0]
  4051b4:	3b04      	subs	r3, #4
  4051b6:	b91a      	cbnz	r2, 4051c0 <quorem+0xb0>
  4051b8:	459b      	cmp	fp, r3
  4051ba:	f108 38ff 	add.w	r8, r8, #4294967295
  4051be:	d3f8      	bcc.n	4051b2 <quorem+0xa2>
  4051c0:	f8c0 8010 	str.w	r8, [r0, #16]
  4051c4:	4604      	mov	r4, r0
  4051c6:	f001 fd37 	bl	406c38 <__mcmp>
  4051ca:	2800      	cmp	r0, #0
  4051cc:	db2e      	blt.n	40522c <quorem+0x11c>
  4051ce:	f109 0901 	add.w	r9, r9, #1
  4051d2:	465d      	mov	r5, fp
  4051d4:	2300      	movs	r3, #0
  4051d6:	f857 1b04 	ldr.w	r1, [r7], #4
  4051da:	6828      	ldr	r0, [r5, #0]
  4051dc:	b28a      	uxth	r2, r1
  4051de:	1a9a      	subs	r2, r3, r2
  4051e0:	0c0b      	lsrs	r3, r1, #16
  4051e2:	fa12 f280 	uxtah	r2, r2, r0
  4051e6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4051ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4051ee:	b292      	uxth	r2, r2
  4051f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4051f4:	45ba      	cmp	sl, r7
  4051f6:	f845 2b04 	str.w	r2, [r5], #4
  4051fa:	ea4f 4323 	mov.w	r3, r3, asr #16
  4051fe:	d2ea      	bcs.n	4051d6 <quorem+0xc6>
  405200:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405204:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405208:	b982      	cbnz	r2, 40522c <quorem+0x11c>
  40520a:	1f1a      	subs	r2, r3, #4
  40520c:	4593      	cmp	fp, r2
  40520e:	d20b      	bcs.n	405228 <quorem+0x118>
  405210:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405214:	b942      	cbnz	r2, 405228 <quorem+0x118>
  405216:	3b08      	subs	r3, #8
  405218:	e002      	b.n	405220 <quorem+0x110>
  40521a:	681a      	ldr	r2, [r3, #0]
  40521c:	3b04      	subs	r3, #4
  40521e:	b91a      	cbnz	r2, 405228 <quorem+0x118>
  405220:	459b      	cmp	fp, r3
  405222:	f108 38ff 	add.w	r8, r8, #4294967295
  405226:	d3f8      	bcc.n	40521a <quorem+0x10a>
  405228:	f8c4 8010 	str.w	r8, [r4, #16]
  40522c:	4648      	mov	r0, r9
  40522e:	b003      	add	sp, #12
  405230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405234:	2000      	movs	r0, #0
  405236:	4770      	bx	lr

00405238 <_dtoa_r>:
  405238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40523c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40523e:	b09b      	sub	sp, #108	; 0x6c
  405240:	4604      	mov	r4, r0
  405242:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405244:	4692      	mov	sl, r2
  405246:	469b      	mov	fp, r3
  405248:	b141      	cbz	r1, 40525c <_dtoa_r+0x24>
  40524a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40524c:	604a      	str	r2, [r1, #4]
  40524e:	2301      	movs	r3, #1
  405250:	4093      	lsls	r3, r2
  405252:	608b      	str	r3, [r1, #8]
  405254:	f001 fb18 	bl	406888 <_Bfree>
  405258:	2300      	movs	r3, #0
  40525a:	6423      	str	r3, [r4, #64]	; 0x40
  40525c:	f1bb 0f00 	cmp.w	fp, #0
  405260:	465d      	mov	r5, fp
  405262:	db35      	blt.n	4052d0 <_dtoa_r+0x98>
  405264:	2300      	movs	r3, #0
  405266:	6033      	str	r3, [r6, #0]
  405268:	4b9d      	ldr	r3, [pc, #628]	; (4054e0 <_dtoa_r+0x2a8>)
  40526a:	43ab      	bics	r3, r5
  40526c:	d015      	beq.n	40529a <_dtoa_r+0x62>
  40526e:	4650      	mov	r0, sl
  405270:	4659      	mov	r1, fp
  405272:	2200      	movs	r2, #0
  405274:	2300      	movs	r3, #0
  405276:	f002 fb3b 	bl	4078f0 <__aeabi_dcmpeq>
  40527a:	4680      	mov	r8, r0
  40527c:	2800      	cmp	r0, #0
  40527e:	d02d      	beq.n	4052dc <_dtoa_r+0xa4>
  405280:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405282:	2301      	movs	r3, #1
  405284:	6013      	str	r3, [r2, #0]
  405286:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405288:	2b00      	cmp	r3, #0
  40528a:	f000 80bd 	beq.w	405408 <_dtoa_r+0x1d0>
  40528e:	4895      	ldr	r0, [pc, #596]	; (4054e4 <_dtoa_r+0x2ac>)
  405290:	6018      	str	r0, [r3, #0]
  405292:	3801      	subs	r0, #1
  405294:	b01b      	add	sp, #108	; 0x6c
  405296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40529a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40529c:	f242 730f 	movw	r3, #9999	; 0x270f
  4052a0:	6013      	str	r3, [r2, #0]
  4052a2:	f1ba 0f00 	cmp.w	sl, #0
  4052a6:	d10d      	bne.n	4052c4 <_dtoa_r+0x8c>
  4052a8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4052ac:	b955      	cbnz	r5, 4052c4 <_dtoa_r+0x8c>
  4052ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4052b0:	488d      	ldr	r0, [pc, #564]	; (4054e8 <_dtoa_r+0x2b0>)
  4052b2:	2b00      	cmp	r3, #0
  4052b4:	d0ee      	beq.n	405294 <_dtoa_r+0x5c>
  4052b6:	f100 0308 	add.w	r3, r0, #8
  4052ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4052bc:	6013      	str	r3, [r2, #0]
  4052be:	b01b      	add	sp, #108	; 0x6c
  4052c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4052c6:	4889      	ldr	r0, [pc, #548]	; (4054ec <_dtoa_r+0x2b4>)
  4052c8:	2b00      	cmp	r3, #0
  4052ca:	d0e3      	beq.n	405294 <_dtoa_r+0x5c>
  4052cc:	1cc3      	adds	r3, r0, #3
  4052ce:	e7f4      	b.n	4052ba <_dtoa_r+0x82>
  4052d0:	2301      	movs	r3, #1
  4052d2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4052d6:	6033      	str	r3, [r6, #0]
  4052d8:	46ab      	mov	fp, r5
  4052da:	e7c5      	b.n	405268 <_dtoa_r+0x30>
  4052dc:	aa18      	add	r2, sp, #96	; 0x60
  4052de:	ab19      	add	r3, sp, #100	; 0x64
  4052e0:	9201      	str	r2, [sp, #4]
  4052e2:	9300      	str	r3, [sp, #0]
  4052e4:	4652      	mov	r2, sl
  4052e6:	465b      	mov	r3, fp
  4052e8:	4620      	mov	r0, r4
  4052ea:	f001 fd45 	bl	406d78 <__d2b>
  4052ee:	0d2b      	lsrs	r3, r5, #20
  4052f0:	4681      	mov	r9, r0
  4052f2:	d071      	beq.n	4053d8 <_dtoa_r+0x1a0>
  4052f4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4052f8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4052fc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4052fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405302:	4650      	mov	r0, sl
  405304:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405308:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40530c:	2200      	movs	r2, #0
  40530e:	4b78      	ldr	r3, [pc, #480]	; (4054f0 <_dtoa_r+0x2b8>)
  405310:	f7fd fe86 	bl	403020 <__aeabi_dsub>
  405314:	a36c      	add	r3, pc, #432	; (adr r3, 4054c8 <_dtoa_r+0x290>)
  405316:	e9d3 2300 	ldrd	r2, r3, [r3]
  40531a:	f7fe f835 	bl	403388 <__aeabi_dmul>
  40531e:	a36c      	add	r3, pc, #432	; (adr r3, 4054d0 <_dtoa_r+0x298>)
  405320:	e9d3 2300 	ldrd	r2, r3, [r3]
  405324:	f7fd fe7e 	bl	403024 <__adddf3>
  405328:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40532c:	4630      	mov	r0, r6
  40532e:	f7fd ffc5 	bl	4032bc <__aeabi_i2d>
  405332:	a369      	add	r3, pc, #420	; (adr r3, 4054d8 <_dtoa_r+0x2a0>)
  405334:	e9d3 2300 	ldrd	r2, r3, [r3]
  405338:	f7fe f826 	bl	403388 <__aeabi_dmul>
  40533c:	4602      	mov	r2, r0
  40533e:	460b      	mov	r3, r1
  405340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405344:	f7fd fe6e 	bl	403024 <__adddf3>
  405348:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40534c:	f002 fb18 	bl	407980 <__aeabi_d2iz>
  405350:	2200      	movs	r2, #0
  405352:	9002      	str	r0, [sp, #8]
  405354:	2300      	movs	r3, #0
  405356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40535a:	f002 fad3 	bl	407904 <__aeabi_dcmplt>
  40535e:	2800      	cmp	r0, #0
  405360:	f040 8173 	bne.w	40564a <_dtoa_r+0x412>
  405364:	9d02      	ldr	r5, [sp, #8]
  405366:	2d16      	cmp	r5, #22
  405368:	f200 815d 	bhi.w	405626 <_dtoa_r+0x3ee>
  40536c:	4b61      	ldr	r3, [pc, #388]	; (4054f4 <_dtoa_r+0x2bc>)
  40536e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405372:	e9d3 0100 	ldrd	r0, r1, [r3]
  405376:	4652      	mov	r2, sl
  405378:	465b      	mov	r3, fp
  40537a:	f002 fae1 	bl	407940 <__aeabi_dcmpgt>
  40537e:	2800      	cmp	r0, #0
  405380:	f000 81c5 	beq.w	40570e <_dtoa_r+0x4d6>
  405384:	1e6b      	subs	r3, r5, #1
  405386:	9302      	str	r3, [sp, #8]
  405388:	2300      	movs	r3, #0
  40538a:	930e      	str	r3, [sp, #56]	; 0x38
  40538c:	1bbf      	subs	r7, r7, r6
  40538e:	1e7b      	subs	r3, r7, #1
  405390:	9306      	str	r3, [sp, #24]
  405392:	f100 8154 	bmi.w	40563e <_dtoa_r+0x406>
  405396:	2300      	movs	r3, #0
  405398:	9308      	str	r3, [sp, #32]
  40539a:	9b02      	ldr	r3, [sp, #8]
  40539c:	2b00      	cmp	r3, #0
  40539e:	f2c0 8145 	blt.w	40562c <_dtoa_r+0x3f4>
  4053a2:	9a06      	ldr	r2, [sp, #24]
  4053a4:	930d      	str	r3, [sp, #52]	; 0x34
  4053a6:	4611      	mov	r1, r2
  4053a8:	4419      	add	r1, r3
  4053aa:	2300      	movs	r3, #0
  4053ac:	9106      	str	r1, [sp, #24]
  4053ae:	930c      	str	r3, [sp, #48]	; 0x30
  4053b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053b2:	2b09      	cmp	r3, #9
  4053b4:	d82a      	bhi.n	40540c <_dtoa_r+0x1d4>
  4053b6:	2b05      	cmp	r3, #5
  4053b8:	f340 865b 	ble.w	406072 <_dtoa_r+0xe3a>
  4053bc:	3b04      	subs	r3, #4
  4053be:	9324      	str	r3, [sp, #144]	; 0x90
  4053c0:	2500      	movs	r5, #0
  4053c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053c4:	3b02      	subs	r3, #2
  4053c6:	2b03      	cmp	r3, #3
  4053c8:	f200 8642 	bhi.w	406050 <_dtoa_r+0xe18>
  4053cc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4053d0:	02c903d4 	.word	0x02c903d4
  4053d4:	046103df 	.word	0x046103df
  4053d8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4053da:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4053dc:	443e      	add	r6, r7
  4053de:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4053e2:	2b20      	cmp	r3, #32
  4053e4:	f340 818e 	ble.w	405704 <_dtoa_r+0x4cc>
  4053e8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4053ec:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4053f0:	409d      	lsls	r5, r3
  4053f2:	fa2a f000 	lsr.w	r0, sl, r0
  4053f6:	4328      	orrs	r0, r5
  4053f8:	f7fd ff50 	bl	40329c <__aeabi_ui2d>
  4053fc:	2301      	movs	r3, #1
  4053fe:	3e01      	subs	r6, #1
  405400:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405404:	9314      	str	r3, [sp, #80]	; 0x50
  405406:	e781      	b.n	40530c <_dtoa_r+0xd4>
  405408:	483b      	ldr	r0, [pc, #236]	; (4054f8 <_dtoa_r+0x2c0>)
  40540a:	e743      	b.n	405294 <_dtoa_r+0x5c>
  40540c:	2100      	movs	r1, #0
  40540e:	6461      	str	r1, [r4, #68]	; 0x44
  405410:	4620      	mov	r0, r4
  405412:	9125      	str	r1, [sp, #148]	; 0x94
  405414:	f001 fa12 	bl	40683c <_Balloc>
  405418:	f04f 33ff 	mov.w	r3, #4294967295
  40541c:	930a      	str	r3, [sp, #40]	; 0x28
  40541e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405420:	930f      	str	r3, [sp, #60]	; 0x3c
  405422:	2301      	movs	r3, #1
  405424:	9004      	str	r0, [sp, #16]
  405426:	6420      	str	r0, [r4, #64]	; 0x40
  405428:	9224      	str	r2, [sp, #144]	; 0x90
  40542a:	930b      	str	r3, [sp, #44]	; 0x2c
  40542c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40542e:	2b00      	cmp	r3, #0
  405430:	f2c0 80d9 	blt.w	4055e6 <_dtoa_r+0x3ae>
  405434:	9a02      	ldr	r2, [sp, #8]
  405436:	2a0e      	cmp	r2, #14
  405438:	f300 80d5 	bgt.w	4055e6 <_dtoa_r+0x3ae>
  40543c:	4b2d      	ldr	r3, [pc, #180]	; (4054f4 <_dtoa_r+0x2bc>)
  40543e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405442:	e9d3 2300 	ldrd	r2, r3, [r3]
  405446:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40544a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40544c:	2b00      	cmp	r3, #0
  40544e:	f2c0 83ba 	blt.w	405bc6 <_dtoa_r+0x98e>
  405452:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405456:	4650      	mov	r0, sl
  405458:	462a      	mov	r2, r5
  40545a:	4633      	mov	r3, r6
  40545c:	4659      	mov	r1, fp
  40545e:	f7fe f8bd 	bl	4035dc <__aeabi_ddiv>
  405462:	f002 fa8d 	bl	407980 <__aeabi_d2iz>
  405466:	4680      	mov	r8, r0
  405468:	f7fd ff28 	bl	4032bc <__aeabi_i2d>
  40546c:	462a      	mov	r2, r5
  40546e:	4633      	mov	r3, r6
  405470:	f7fd ff8a 	bl	403388 <__aeabi_dmul>
  405474:	460b      	mov	r3, r1
  405476:	4602      	mov	r2, r0
  405478:	4659      	mov	r1, fp
  40547a:	4650      	mov	r0, sl
  40547c:	f7fd fdd0 	bl	403020 <__aeabi_dsub>
  405480:	9d04      	ldr	r5, [sp, #16]
  405482:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405486:	702b      	strb	r3, [r5, #0]
  405488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40548a:	2b01      	cmp	r3, #1
  40548c:	4606      	mov	r6, r0
  40548e:	460f      	mov	r7, r1
  405490:	f105 0501 	add.w	r5, r5, #1
  405494:	d068      	beq.n	405568 <_dtoa_r+0x330>
  405496:	2200      	movs	r2, #0
  405498:	4b18      	ldr	r3, [pc, #96]	; (4054fc <_dtoa_r+0x2c4>)
  40549a:	f7fd ff75 	bl	403388 <__aeabi_dmul>
  40549e:	2200      	movs	r2, #0
  4054a0:	2300      	movs	r3, #0
  4054a2:	4606      	mov	r6, r0
  4054a4:	460f      	mov	r7, r1
  4054a6:	f002 fa23 	bl	4078f0 <__aeabi_dcmpeq>
  4054aa:	2800      	cmp	r0, #0
  4054ac:	f040 8088 	bne.w	4055c0 <_dtoa_r+0x388>
  4054b0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4054b4:	f04f 0a00 	mov.w	sl, #0
  4054b8:	f8df b040 	ldr.w	fp, [pc, #64]	; 4054fc <_dtoa_r+0x2c4>
  4054bc:	940c      	str	r4, [sp, #48]	; 0x30
  4054be:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4054c2:	e028      	b.n	405516 <_dtoa_r+0x2de>
  4054c4:	f3af 8000 	nop.w
  4054c8:	636f4361 	.word	0x636f4361
  4054cc:	3fd287a7 	.word	0x3fd287a7
  4054d0:	8b60c8b3 	.word	0x8b60c8b3
  4054d4:	3fc68a28 	.word	0x3fc68a28
  4054d8:	509f79fb 	.word	0x509f79fb
  4054dc:	3fd34413 	.word	0x3fd34413
  4054e0:	7ff00000 	.word	0x7ff00000
  4054e4:	00408471 	.word	0x00408471
  4054e8:	00408494 	.word	0x00408494
  4054ec:	004084a0 	.word	0x004084a0
  4054f0:	3ff80000 	.word	0x3ff80000
  4054f4:	004084d0 	.word	0x004084d0
  4054f8:	00408470 	.word	0x00408470
  4054fc:	40240000 	.word	0x40240000
  405500:	f7fd ff42 	bl	403388 <__aeabi_dmul>
  405504:	2200      	movs	r2, #0
  405506:	2300      	movs	r3, #0
  405508:	4606      	mov	r6, r0
  40550a:	460f      	mov	r7, r1
  40550c:	f002 f9f0 	bl	4078f0 <__aeabi_dcmpeq>
  405510:	2800      	cmp	r0, #0
  405512:	f040 83c1 	bne.w	405c98 <_dtoa_r+0xa60>
  405516:	4642      	mov	r2, r8
  405518:	464b      	mov	r3, r9
  40551a:	4630      	mov	r0, r6
  40551c:	4639      	mov	r1, r7
  40551e:	f7fe f85d 	bl	4035dc <__aeabi_ddiv>
  405522:	f002 fa2d 	bl	407980 <__aeabi_d2iz>
  405526:	4604      	mov	r4, r0
  405528:	f7fd fec8 	bl	4032bc <__aeabi_i2d>
  40552c:	4642      	mov	r2, r8
  40552e:	464b      	mov	r3, r9
  405530:	f7fd ff2a 	bl	403388 <__aeabi_dmul>
  405534:	4602      	mov	r2, r0
  405536:	460b      	mov	r3, r1
  405538:	4630      	mov	r0, r6
  40553a:	4639      	mov	r1, r7
  40553c:	f7fd fd70 	bl	403020 <__aeabi_dsub>
  405540:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405544:	9e04      	ldr	r6, [sp, #16]
  405546:	f805 eb01 	strb.w	lr, [r5], #1
  40554a:	eba5 0e06 	sub.w	lr, r5, r6
  40554e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405550:	45b6      	cmp	lr, r6
  405552:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405556:	4652      	mov	r2, sl
  405558:	465b      	mov	r3, fp
  40555a:	d1d1      	bne.n	405500 <_dtoa_r+0x2c8>
  40555c:	46a0      	mov	r8, r4
  40555e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405562:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405564:	4606      	mov	r6, r0
  405566:	460f      	mov	r7, r1
  405568:	4632      	mov	r2, r6
  40556a:	463b      	mov	r3, r7
  40556c:	4630      	mov	r0, r6
  40556e:	4639      	mov	r1, r7
  405570:	f7fd fd58 	bl	403024 <__adddf3>
  405574:	4606      	mov	r6, r0
  405576:	460f      	mov	r7, r1
  405578:	4602      	mov	r2, r0
  40557a:	460b      	mov	r3, r1
  40557c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405580:	f002 f9c0 	bl	407904 <__aeabi_dcmplt>
  405584:	b948      	cbnz	r0, 40559a <_dtoa_r+0x362>
  405586:	4632      	mov	r2, r6
  405588:	463b      	mov	r3, r7
  40558a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40558e:	f002 f9af 	bl	4078f0 <__aeabi_dcmpeq>
  405592:	b1a8      	cbz	r0, 4055c0 <_dtoa_r+0x388>
  405594:	f018 0f01 	tst.w	r8, #1
  405598:	d012      	beq.n	4055c0 <_dtoa_r+0x388>
  40559a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40559e:	9a04      	ldr	r2, [sp, #16]
  4055a0:	1e6b      	subs	r3, r5, #1
  4055a2:	e004      	b.n	4055ae <_dtoa_r+0x376>
  4055a4:	429a      	cmp	r2, r3
  4055a6:	f000 8401 	beq.w	405dac <_dtoa_r+0xb74>
  4055aa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4055ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4055b2:	f103 0501 	add.w	r5, r3, #1
  4055b6:	d0f5      	beq.n	4055a4 <_dtoa_r+0x36c>
  4055b8:	f108 0801 	add.w	r8, r8, #1
  4055bc:	f883 8000 	strb.w	r8, [r3]
  4055c0:	4649      	mov	r1, r9
  4055c2:	4620      	mov	r0, r4
  4055c4:	f001 f960 	bl	406888 <_Bfree>
  4055c8:	2200      	movs	r2, #0
  4055ca:	9b02      	ldr	r3, [sp, #8]
  4055cc:	702a      	strb	r2, [r5, #0]
  4055ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4055d0:	3301      	adds	r3, #1
  4055d2:	6013      	str	r3, [r2, #0]
  4055d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4055d6:	2b00      	cmp	r3, #0
  4055d8:	f000 839e 	beq.w	405d18 <_dtoa_r+0xae0>
  4055dc:	9804      	ldr	r0, [sp, #16]
  4055de:	601d      	str	r5, [r3, #0]
  4055e0:	b01b      	add	sp, #108	; 0x6c
  4055e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4055e8:	2a00      	cmp	r2, #0
  4055ea:	d03e      	beq.n	40566a <_dtoa_r+0x432>
  4055ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4055ee:	2a01      	cmp	r2, #1
  4055f0:	f340 8311 	ble.w	405c16 <_dtoa_r+0x9de>
  4055f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4055f8:	1e5f      	subs	r7, r3, #1
  4055fa:	42ba      	cmp	r2, r7
  4055fc:	f2c0 838f 	blt.w	405d1e <_dtoa_r+0xae6>
  405600:	1bd7      	subs	r7, r2, r7
  405602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405604:	2b00      	cmp	r3, #0
  405606:	f2c0 848b 	blt.w	405f20 <_dtoa_r+0xce8>
  40560a:	9d08      	ldr	r5, [sp, #32]
  40560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40560e:	9a08      	ldr	r2, [sp, #32]
  405610:	441a      	add	r2, r3
  405612:	9208      	str	r2, [sp, #32]
  405614:	9a06      	ldr	r2, [sp, #24]
  405616:	2101      	movs	r1, #1
  405618:	441a      	add	r2, r3
  40561a:	4620      	mov	r0, r4
  40561c:	9206      	str	r2, [sp, #24]
  40561e:	f001 f9cd 	bl	4069bc <__i2b>
  405622:	4606      	mov	r6, r0
  405624:	e024      	b.n	405670 <_dtoa_r+0x438>
  405626:	2301      	movs	r3, #1
  405628:	930e      	str	r3, [sp, #56]	; 0x38
  40562a:	e6af      	b.n	40538c <_dtoa_r+0x154>
  40562c:	9a08      	ldr	r2, [sp, #32]
  40562e:	9b02      	ldr	r3, [sp, #8]
  405630:	1ad2      	subs	r2, r2, r3
  405632:	425b      	negs	r3, r3
  405634:	930c      	str	r3, [sp, #48]	; 0x30
  405636:	2300      	movs	r3, #0
  405638:	9208      	str	r2, [sp, #32]
  40563a:	930d      	str	r3, [sp, #52]	; 0x34
  40563c:	e6b8      	b.n	4053b0 <_dtoa_r+0x178>
  40563e:	f1c7 0301 	rsb	r3, r7, #1
  405642:	9308      	str	r3, [sp, #32]
  405644:	2300      	movs	r3, #0
  405646:	9306      	str	r3, [sp, #24]
  405648:	e6a7      	b.n	40539a <_dtoa_r+0x162>
  40564a:	9d02      	ldr	r5, [sp, #8]
  40564c:	4628      	mov	r0, r5
  40564e:	f7fd fe35 	bl	4032bc <__aeabi_i2d>
  405652:	4602      	mov	r2, r0
  405654:	460b      	mov	r3, r1
  405656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40565a:	f002 f949 	bl	4078f0 <__aeabi_dcmpeq>
  40565e:	2800      	cmp	r0, #0
  405660:	f47f ae80 	bne.w	405364 <_dtoa_r+0x12c>
  405664:	1e6b      	subs	r3, r5, #1
  405666:	9302      	str	r3, [sp, #8]
  405668:	e67c      	b.n	405364 <_dtoa_r+0x12c>
  40566a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40566c:	9d08      	ldr	r5, [sp, #32]
  40566e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405670:	2d00      	cmp	r5, #0
  405672:	dd0c      	ble.n	40568e <_dtoa_r+0x456>
  405674:	9906      	ldr	r1, [sp, #24]
  405676:	2900      	cmp	r1, #0
  405678:	460b      	mov	r3, r1
  40567a:	dd08      	ble.n	40568e <_dtoa_r+0x456>
  40567c:	42a9      	cmp	r1, r5
  40567e:	9a08      	ldr	r2, [sp, #32]
  405680:	bfa8      	it	ge
  405682:	462b      	movge	r3, r5
  405684:	1ad2      	subs	r2, r2, r3
  405686:	1aed      	subs	r5, r5, r3
  405688:	1acb      	subs	r3, r1, r3
  40568a:	9208      	str	r2, [sp, #32]
  40568c:	9306      	str	r3, [sp, #24]
  40568e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405690:	b1d3      	cbz	r3, 4056c8 <_dtoa_r+0x490>
  405692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405694:	2b00      	cmp	r3, #0
  405696:	f000 82b7 	beq.w	405c08 <_dtoa_r+0x9d0>
  40569a:	2f00      	cmp	r7, #0
  40569c:	dd10      	ble.n	4056c0 <_dtoa_r+0x488>
  40569e:	4631      	mov	r1, r6
  4056a0:	463a      	mov	r2, r7
  4056a2:	4620      	mov	r0, r4
  4056a4:	f001 fa26 	bl	406af4 <__pow5mult>
  4056a8:	464a      	mov	r2, r9
  4056aa:	4601      	mov	r1, r0
  4056ac:	4606      	mov	r6, r0
  4056ae:	4620      	mov	r0, r4
  4056b0:	f001 f98e 	bl	4069d0 <__multiply>
  4056b4:	4649      	mov	r1, r9
  4056b6:	4680      	mov	r8, r0
  4056b8:	4620      	mov	r0, r4
  4056ba:	f001 f8e5 	bl	406888 <_Bfree>
  4056be:	46c1      	mov	r9, r8
  4056c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4056c2:	1bda      	subs	r2, r3, r7
  4056c4:	f040 82a1 	bne.w	405c0a <_dtoa_r+0x9d2>
  4056c8:	2101      	movs	r1, #1
  4056ca:	4620      	mov	r0, r4
  4056cc:	f001 f976 	bl	4069bc <__i2b>
  4056d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4056d2:	2b00      	cmp	r3, #0
  4056d4:	4680      	mov	r8, r0
  4056d6:	dd1c      	ble.n	405712 <_dtoa_r+0x4da>
  4056d8:	4601      	mov	r1, r0
  4056da:	461a      	mov	r2, r3
  4056dc:	4620      	mov	r0, r4
  4056de:	f001 fa09 	bl	406af4 <__pow5mult>
  4056e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056e4:	2b01      	cmp	r3, #1
  4056e6:	4680      	mov	r8, r0
  4056e8:	f340 8254 	ble.w	405b94 <_dtoa_r+0x95c>
  4056ec:	2300      	movs	r3, #0
  4056ee:	930c      	str	r3, [sp, #48]	; 0x30
  4056f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4056f4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4056f8:	6918      	ldr	r0, [r3, #16]
  4056fa:	f001 f90f 	bl	40691c <__hi0bits>
  4056fe:	f1c0 0020 	rsb	r0, r0, #32
  405702:	e010      	b.n	405726 <_dtoa_r+0x4ee>
  405704:	f1c3 0520 	rsb	r5, r3, #32
  405708:	fa0a f005 	lsl.w	r0, sl, r5
  40570c:	e674      	b.n	4053f8 <_dtoa_r+0x1c0>
  40570e:	900e      	str	r0, [sp, #56]	; 0x38
  405710:	e63c      	b.n	40538c <_dtoa_r+0x154>
  405712:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405714:	2b01      	cmp	r3, #1
  405716:	f340 8287 	ble.w	405c28 <_dtoa_r+0x9f0>
  40571a:	2300      	movs	r3, #0
  40571c:	930c      	str	r3, [sp, #48]	; 0x30
  40571e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405720:	2001      	movs	r0, #1
  405722:	2b00      	cmp	r3, #0
  405724:	d1e4      	bne.n	4056f0 <_dtoa_r+0x4b8>
  405726:	9a06      	ldr	r2, [sp, #24]
  405728:	4410      	add	r0, r2
  40572a:	f010 001f 	ands.w	r0, r0, #31
  40572e:	f000 80a1 	beq.w	405874 <_dtoa_r+0x63c>
  405732:	f1c0 0320 	rsb	r3, r0, #32
  405736:	2b04      	cmp	r3, #4
  405738:	f340 849e 	ble.w	406078 <_dtoa_r+0xe40>
  40573c:	9b08      	ldr	r3, [sp, #32]
  40573e:	f1c0 001c 	rsb	r0, r0, #28
  405742:	4403      	add	r3, r0
  405744:	9308      	str	r3, [sp, #32]
  405746:	4613      	mov	r3, r2
  405748:	4403      	add	r3, r0
  40574a:	4405      	add	r5, r0
  40574c:	9306      	str	r3, [sp, #24]
  40574e:	9b08      	ldr	r3, [sp, #32]
  405750:	2b00      	cmp	r3, #0
  405752:	dd05      	ble.n	405760 <_dtoa_r+0x528>
  405754:	4649      	mov	r1, r9
  405756:	461a      	mov	r2, r3
  405758:	4620      	mov	r0, r4
  40575a:	f001 fa1b 	bl	406b94 <__lshift>
  40575e:	4681      	mov	r9, r0
  405760:	9b06      	ldr	r3, [sp, #24]
  405762:	2b00      	cmp	r3, #0
  405764:	dd05      	ble.n	405772 <_dtoa_r+0x53a>
  405766:	4641      	mov	r1, r8
  405768:	461a      	mov	r2, r3
  40576a:	4620      	mov	r0, r4
  40576c:	f001 fa12 	bl	406b94 <__lshift>
  405770:	4680      	mov	r8, r0
  405772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405774:	2b00      	cmp	r3, #0
  405776:	f040 8086 	bne.w	405886 <_dtoa_r+0x64e>
  40577a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40577c:	2b00      	cmp	r3, #0
  40577e:	f340 8266 	ble.w	405c4e <_dtoa_r+0xa16>
  405782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405784:	2b00      	cmp	r3, #0
  405786:	f000 8098 	beq.w	4058ba <_dtoa_r+0x682>
  40578a:	2d00      	cmp	r5, #0
  40578c:	dd05      	ble.n	40579a <_dtoa_r+0x562>
  40578e:	4631      	mov	r1, r6
  405790:	462a      	mov	r2, r5
  405792:	4620      	mov	r0, r4
  405794:	f001 f9fe 	bl	406b94 <__lshift>
  405798:	4606      	mov	r6, r0
  40579a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40579c:	2b00      	cmp	r3, #0
  40579e:	f040 8337 	bne.w	405e10 <_dtoa_r+0xbd8>
  4057a2:	9606      	str	r6, [sp, #24]
  4057a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057a6:	9a04      	ldr	r2, [sp, #16]
  4057a8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4057ac:	3b01      	subs	r3, #1
  4057ae:	18d3      	adds	r3, r2, r3
  4057b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4057b2:	f00a 0301 	and.w	r3, sl, #1
  4057b6:	930c      	str	r3, [sp, #48]	; 0x30
  4057b8:	4617      	mov	r7, r2
  4057ba:	46c2      	mov	sl, r8
  4057bc:	4651      	mov	r1, sl
  4057be:	4648      	mov	r0, r9
  4057c0:	f7ff fca6 	bl	405110 <quorem>
  4057c4:	4631      	mov	r1, r6
  4057c6:	4605      	mov	r5, r0
  4057c8:	4648      	mov	r0, r9
  4057ca:	f001 fa35 	bl	406c38 <__mcmp>
  4057ce:	465a      	mov	r2, fp
  4057d0:	900a      	str	r0, [sp, #40]	; 0x28
  4057d2:	4651      	mov	r1, sl
  4057d4:	4620      	mov	r0, r4
  4057d6:	f001 fa4b 	bl	406c70 <__mdiff>
  4057da:	68c2      	ldr	r2, [r0, #12]
  4057dc:	4680      	mov	r8, r0
  4057de:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4057e2:	2a00      	cmp	r2, #0
  4057e4:	f040 822b 	bne.w	405c3e <_dtoa_r+0xa06>
  4057e8:	4601      	mov	r1, r0
  4057ea:	4648      	mov	r0, r9
  4057ec:	9308      	str	r3, [sp, #32]
  4057ee:	f001 fa23 	bl	406c38 <__mcmp>
  4057f2:	4641      	mov	r1, r8
  4057f4:	9006      	str	r0, [sp, #24]
  4057f6:	4620      	mov	r0, r4
  4057f8:	f001 f846 	bl	406888 <_Bfree>
  4057fc:	9a06      	ldr	r2, [sp, #24]
  4057fe:	9b08      	ldr	r3, [sp, #32]
  405800:	b932      	cbnz	r2, 405810 <_dtoa_r+0x5d8>
  405802:	9924      	ldr	r1, [sp, #144]	; 0x90
  405804:	b921      	cbnz	r1, 405810 <_dtoa_r+0x5d8>
  405806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405808:	2a00      	cmp	r2, #0
  40580a:	f000 83ef 	beq.w	405fec <_dtoa_r+0xdb4>
  40580e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405810:	990a      	ldr	r1, [sp, #40]	; 0x28
  405812:	2900      	cmp	r1, #0
  405814:	f2c0 829f 	blt.w	405d56 <_dtoa_r+0xb1e>
  405818:	d105      	bne.n	405826 <_dtoa_r+0x5ee>
  40581a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40581c:	b919      	cbnz	r1, 405826 <_dtoa_r+0x5ee>
  40581e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405820:	2900      	cmp	r1, #0
  405822:	f000 8298 	beq.w	405d56 <_dtoa_r+0xb1e>
  405826:	2a00      	cmp	r2, #0
  405828:	f300 8306 	bgt.w	405e38 <_dtoa_r+0xc00>
  40582c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40582e:	703b      	strb	r3, [r7, #0]
  405830:	f107 0801 	add.w	r8, r7, #1
  405834:	4297      	cmp	r7, r2
  405836:	4645      	mov	r5, r8
  405838:	f000 830c 	beq.w	405e54 <_dtoa_r+0xc1c>
  40583c:	4649      	mov	r1, r9
  40583e:	2300      	movs	r3, #0
  405840:	220a      	movs	r2, #10
  405842:	4620      	mov	r0, r4
  405844:	f001 f82a 	bl	40689c <__multadd>
  405848:	455e      	cmp	r6, fp
  40584a:	4681      	mov	r9, r0
  40584c:	4631      	mov	r1, r6
  40584e:	f04f 0300 	mov.w	r3, #0
  405852:	f04f 020a 	mov.w	r2, #10
  405856:	4620      	mov	r0, r4
  405858:	f000 81eb 	beq.w	405c32 <_dtoa_r+0x9fa>
  40585c:	f001 f81e 	bl	40689c <__multadd>
  405860:	4659      	mov	r1, fp
  405862:	4606      	mov	r6, r0
  405864:	2300      	movs	r3, #0
  405866:	220a      	movs	r2, #10
  405868:	4620      	mov	r0, r4
  40586a:	f001 f817 	bl	40689c <__multadd>
  40586e:	4647      	mov	r7, r8
  405870:	4683      	mov	fp, r0
  405872:	e7a3      	b.n	4057bc <_dtoa_r+0x584>
  405874:	201c      	movs	r0, #28
  405876:	9b08      	ldr	r3, [sp, #32]
  405878:	4403      	add	r3, r0
  40587a:	9308      	str	r3, [sp, #32]
  40587c:	9b06      	ldr	r3, [sp, #24]
  40587e:	4403      	add	r3, r0
  405880:	4405      	add	r5, r0
  405882:	9306      	str	r3, [sp, #24]
  405884:	e763      	b.n	40574e <_dtoa_r+0x516>
  405886:	4641      	mov	r1, r8
  405888:	4648      	mov	r0, r9
  40588a:	f001 f9d5 	bl	406c38 <__mcmp>
  40588e:	2800      	cmp	r0, #0
  405890:	f6bf af73 	bge.w	40577a <_dtoa_r+0x542>
  405894:	9f02      	ldr	r7, [sp, #8]
  405896:	4649      	mov	r1, r9
  405898:	2300      	movs	r3, #0
  40589a:	220a      	movs	r2, #10
  40589c:	4620      	mov	r0, r4
  40589e:	3f01      	subs	r7, #1
  4058a0:	9702      	str	r7, [sp, #8]
  4058a2:	f000 fffb 	bl	40689c <__multadd>
  4058a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058a8:	4681      	mov	r9, r0
  4058aa:	2b00      	cmp	r3, #0
  4058ac:	f040 83b6 	bne.w	40601c <_dtoa_r+0xde4>
  4058b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4058b2:	2b00      	cmp	r3, #0
  4058b4:	f340 83bf 	ble.w	406036 <_dtoa_r+0xdfe>
  4058b8:	930a      	str	r3, [sp, #40]	; 0x28
  4058ba:	f8dd b010 	ldr.w	fp, [sp, #16]
  4058be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4058c0:	465d      	mov	r5, fp
  4058c2:	e002      	b.n	4058ca <_dtoa_r+0x692>
  4058c4:	f000 ffea 	bl	40689c <__multadd>
  4058c8:	4681      	mov	r9, r0
  4058ca:	4641      	mov	r1, r8
  4058cc:	4648      	mov	r0, r9
  4058ce:	f7ff fc1f 	bl	405110 <quorem>
  4058d2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4058d6:	f805 ab01 	strb.w	sl, [r5], #1
  4058da:	eba5 030b 	sub.w	r3, r5, fp
  4058de:	42bb      	cmp	r3, r7
  4058e0:	f04f 020a 	mov.w	r2, #10
  4058e4:	f04f 0300 	mov.w	r3, #0
  4058e8:	4649      	mov	r1, r9
  4058ea:	4620      	mov	r0, r4
  4058ec:	dbea      	blt.n	4058c4 <_dtoa_r+0x68c>
  4058ee:	9b04      	ldr	r3, [sp, #16]
  4058f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4058f2:	2a01      	cmp	r2, #1
  4058f4:	bfac      	ite	ge
  4058f6:	189b      	addge	r3, r3, r2
  4058f8:	3301      	addlt	r3, #1
  4058fa:	461d      	mov	r5, r3
  4058fc:	f04f 0b00 	mov.w	fp, #0
  405900:	4649      	mov	r1, r9
  405902:	2201      	movs	r2, #1
  405904:	4620      	mov	r0, r4
  405906:	f001 f945 	bl	406b94 <__lshift>
  40590a:	4641      	mov	r1, r8
  40590c:	4681      	mov	r9, r0
  40590e:	f001 f993 	bl	406c38 <__mcmp>
  405912:	2800      	cmp	r0, #0
  405914:	f340 823d 	ble.w	405d92 <_dtoa_r+0xb5a>
  405918:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40591c:	9904      	ldr	r1, [sp, #16]
  40591e:	1e6b      	subs	r3, r5, #1
  405920:	e004      	b.n	40592c <_dtoa_r+0x6f4>
  405922:	428b      	cmp	r3, r1
  405924:	f000 81ae 	beq.w	405c84 <_dtoa_r+0xa4c>
  405928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40592c:	2a39      	cmp	r2, #57	; 0x39
  40592e:	f103 0501 	add.w	r5, r3, #1
  405932:	d0f6      	beq.n	405922 <_dtoa_r+0x6ea>
  405934:	3201      	adds	r2, #1
  405936:	701a      	strb	r2, [r3, #0]
  405938:	4641      	mov	r1, r8
  40593a:	4620      	mov	r0, r4
  40593c:	f000 ffa4 	bl	406888 <_Bfree>
  405940:	2e00      	cmp	r6, #0
  405942:	f43f ae3d 	beq.w	4055c0 <_dtoa_r+0x388>
  405946:	f1bb 0f00 	cmp.w	fp, #0
  40594a:	d005      	beq.n	405958 <_dtoa_r+0x720>
  40594c:	45b3      	cmp	fp, r6
  40594e:	d003      	beq.n	405958 <_dtoa_r+0x720>
  405950:	4659      	mov	r1, fp
  405952:	4620      	mov	r0, r4
  405954:	f000 ff98 	bl	406888 <_Bfree>
  405958:	4631      	mov	r1, r6
  40595a:	4620      	mov	r0, r4
  40595c:	f000 ff94 	bl	406888 <_Bfree>
  405960:	e62e      	b.n	4055c0 <_dtoa_r+0x388>
  405962:	2300      	movs	r3, #0
  405964:	930b      	str	r3, [sp, #44]	; 0x2c
  405966:	9b02      	ldr	r3, [sp, #8]
  405968:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40596a:	4413      	add	r3, r2
  40596c:	930f      	str	r3, [sp, #60]	; 0x3c
  40596e:	3301      	adds	r3, #1
  405970:	2b01      	cmp	r3, #1
  405972:	461f      	mov	r7, r3
  405974:	461e      	mov	r6, r3
  405976:	930a      	str	r3, [sp, #40]	; 0x28
  405978:	bfb8      	it	lt
  40597a:	2701      	movlt	r7, #1
  40597c:	2100      	movs	r1, #0
  40597e:	2f17      	cmp	r7, #23
  405980:	6461      	str	r1, [r4, #68]	; 0x44
  405982:	d90a      	bls.n	40599a <_dtoa_r+0x762>
  405984:	2201      	movs	r2, #1
  405986:	2304      	movs	r3, #4
  405988:	005b      	lsls	r3, r3, #1
  40598a:	f103 0014 	add.w	r0, r3, #20
  40598e:	4287      	cmp	r7, r0
  405990:	4611      	mov	r1, r2
  405992:	f102 0201 	add.w	r2, r2, #1
  405996:	d2f7      	bcs.n	405988 <_dtoa_r+0x750>
  405998:	6461      	str	r1, [r4, #68]	; 0x44
  40599a:	4620      	mov	r0, r4
  40599c:	f000 ff4e 	bl	40683c <_Balloc>
  4059a0:	2e0e      	cmp	r6, #14
  4059a2:	9004      	str	r0, [sp, #16]
  4059a4:	6420      	str	r0, [r4, #64]	; 0x40
  4059a6:	f63f ad41 	bhi.w	40542c <_dtoa_r+0x1f4>
  4059aa:	2d00      	cmp	r5, #0
  4059ac:	f43f ad3e 	beq.w	40542c <_dtoa_r+0x1f4>
  4059b0:	9902      	ldr	r1, [sp, #8]
  4059b2:	2900      	cmp	r1, #0
  4059b4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4059b8:	f340 8202 	ble.w	405dc0 <_dtoa_r+0xb88>
  4059bc:	4bb8      	ldr	r3, [pc, #736]	; (405ca0 <_dtoa_r+0xa68>)
  4059be:	f001 020f 	and.w	r2, r1, #15
  4059c2:	110d      	asrs	r5, r1, #4
  4059c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4059c8:	06e9      	lsls	r1, r5, #27
  4059ca:	e9d3 6700 	ldrd	r6, r7, [r3]
  4059ce:	f140 81ae 	bpl.w	405d2e <_dtoa_r+0xaf6>
  4059d2:	4bb4      	ldr	r3, [pc, #720]	; (405ca4 <_dtoa_r+0xa6c>)
  4059d4:	4650      	mov	r0, sl
  4059d6:	4659      	mov	r1, fp
  4059d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4059dc:	f7fd fdfe 	bl	4035dc <__aeabi_ddiv>
  4059e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4059e4:	f005 050f 	and.w	r5, r5, #15
  4059e8:	f04f 0a03 	mov.w	sl, #3
  4059ec:	b18d      	cbz	r5, 405a12 <_dtoa_r+0x7da>
  4059ee:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405ca4 <_dtoa_r+0xa6c>
  4059f2:	07ea      	lsls	r2, r5, #31
  4059f4:	d509      	bpl.n	405a0a <_dtoa_r+0x7d2>
  4059f6:	4630      	mov	r0, r6
  4059f8:	4639      	mov	r1, r7
  4059fa:	e9d8 2300 	ldrd	r2, r3, [r8]
  4059fe:	f7fd fcc3 	bl	403388 <__aeabi_dmul>
  405a02:	f10a 0a01 	add.w	sl, sl, #1
  405a06:	4606      	mov	r6, r0
  405a08:	460f      	mov	r7, r1
  405a0a:	106d      	asrs	r5, r5, #1
  405a0c:	f108 0808 	add.w	r8, r8, #8
  405a10:	d1ef      	bne.n	4059f2 <_dtoa_r+0x7ba>
  405a12:	463b      	mov	r3, r7
  405a14:	4632      	mov	r2, r6
  405a16:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405a1a:	f7fd fddf 	bl	4035dc <__aeabi_ddiv>
  405a1e:	4607      	mov	r7, r0
  405a20:	4688      	mov	r8, r1
  405a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a24:	b143      	cbz	r3, 405a38 <_dtoa_r+0x800>
  405a26:	2200      	movs	r2, #0
  405a28:	4b9f      	ldr	r3, [pc, #636]	; (405ca8 <_dtoa_r+0xa70>)
  405a2a:	4638      	mov	r0, r7
  405a2c:	4641      	mov	r1, r8
  405a2e:	f001 ff69 	bl	407904 <__aeabi_dcmplt>
  405a32:	2800      	cmp	r0, #0
  405a34:	f040 8286 	bne.w	405f44 <_dtoa_r+0xd0c>
  405a38:	4650      	mov	r0, sl
  405a3a:	f7fd fc3f 	bl	4032bc <__aeabi_i2d>
  405a3e:	463a      	mov	r2, r7
  405a40:	4643      	mov	r3, r8
  405a42:	f7fd fca1 	bl	403388 <__aeabi_dmul>
  405a46:	4b99      	ldr	r3, [pc, #612]	; (405cac <_dtoa_r+0xa74>)
  405a48:	2200      	movs	r2, #0
  405a4a:	f7fd faeb 	bl	403024 <__adddf3>
  405a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a50:	4605      	mov	r5, r0
  405a52:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405a56:	2b00      	cmp	r3, #0
  405a58:	f000 813e 	beq.w	405cd8 <_dtoa_r+0xaa0>
  405a5c:	9b02      	ldr	r3, [sp, #8]
  405a5e:	9315      	str	r3, [sp, #84]	; 0x54
  405a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a62:	9312      	str	r3, [sp, #72]	; 0x48
  405a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a66:	2b00      	cmp	r3, #0
  405a68:	f000 81fa 	beq.w	405e60 <_dtoa_r+0xc28>
  405a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a6e:	4b8c      	ldr	r3, [pc, #560]	; (405ca0 <_dtoa_r+0xa68>)
  405a70:	498f      	ldr	r1, [pc, #572]	; (405cb0 <_dtoa_r+0xa78>)
  405a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405a76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405a7a:	2000      	movs	r0, #0
  405a7c:	f7fd fdae 	bl	4035dc <__aeabi_ddiv>
  405a80:	462a      	mov	r2, r5
  405a82:	4633      	mov	r3, r6
  405a84:	f7fd facc 	bl	403020 <__aeabi_dsub>
  405a88:	4682      	mov	sl, r0
  405a8a:	468b      	mov	fp, r1
  405a8c:	4638      	mov	r0, r7
  405a8e:	4641      	mov	r1, r8
  405a90:	f001 ff76 	bl	407980 <__aeabi_d2iz>
  405a94:	4605      	mov	r5, r0
  405a96:	f7fd fc11 	bl	4032bc <__aeabi_i2d>
  405a9a:	4602      	mov	r2, r0
  405a9c:	460b      	mov	r3, r1
  405a9e:	4638      	mov	r0, r7
  405aa0:	4641      	mov	r1, r8
  405aa2:	f7fd fabd 	bl	403020 <__aeabi_dsub>
  405aa6:	3530      	adds	r5, #48	; 0x30
  405aa8:	fa5f f885 	uxtb.w	r8, r5
  405aac:	9d04      	ldr	r5, [sp, #16]
  405aae:	4606      	mov	r6, r0
  405ab0:	460f      	mov	r7, r1
  405ab2:	f885 8000 	strb.w	r8, [r5]
  405ab6:	4602      	mov	r2, r0
  405ab8:	460b      	mov	r3, r1
  405aba:	4650      	mov	r0, sl
  405abc:	4659      	mov	r1, fp
  405abe:	3501      	adds	r5, #1
  405ac0:	f001 ff3e 	bl	407940 <__aeabi_dcmpgt>
  405ac4:	2800      	cmp	r0, #0
  405ac6:	d154      	bne.n	405b72 <_dtoa_r+0x93a>
  405ac8:	4632      	mov	r2, r6
  405aca:	463b      	mov	r3, r7
  405acc:	2000      	movs	r0, #0
  405ace:	4976      	ldr	r1, [pc, #472]	; (405ca8 <_dtoa_r+0xa70>)
  405ad0:	f7fd faa6 	bl	403020 <__aeabi_dsub>
  405ad4:	4602      	mov	r2, r0
  405ad6:	460b      	mov	r3, r1
  405ad8:	4650      	mov	r0, sl
  405ada:	4659      	mov	r1, fp
  405adc:	f001 ff30 	bl	407940 <__aeabi_dcmpgt>
  405ae0:	2800      	cmp	r0, #0
  405ae2:	f040 8270 	bne.w	405fc6 <_dtoa_r+0xd8e>
  405ae6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ae8:	2a01      	cmp	r2, #1
  405aea:	f000 8111 	beq.w	405d10 <_dtoa_r+0xad8>
  405aee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405af0:	9a04      	ldr	r2, [sp, #16]
  405af2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405af6:	4413      	add	r3, r2
  405af8:	4699      	mov	r9, r3
  405afa:	e00d      	b.n	405b18 <_dtoa_r+0x8e0>
  405afc:	2000      	movs	r0, #0
  405afe:	496a      	ldr	r1, [pc, #424]	; (405ca8 <_dtoa_r+0xa70>)
  405b00:	f7fd fa8e 	bl	403020 <__aeabi_dsub>
  405b04:	4652      	mov	r2, sl
  405b06:	465b      	mov	r3, fp
  405b08:	f001 fefc 	bl	407904 <__aeabi_dcmplt>
  405b0c:	2800      	cmp	r0, #0
  405b0e:	f040 8258 	bne.w	405fc2 <_dtoa_r+0xd8a>
  405b12:	454d      	cmp	r5, r9
  405b14:	f000 80fa 	beq.w	405d0c <_dtoa_r+0xad4>
  405b18:	4650      	mov	r0, sl
  405b1a:	4659      	mov	r1, fp
  405b1c:	2200      	movs	r2, #0
  405b1e:	4b65      	ldr	r3, [pc, #404]	; (405cb4 <_dtoa_r+0xa7c>)
  405b20:	f7fd fc32 	bl	403388 <__aeabi_dmul>
  405b24:	2200      	movs	r2, #0
  405b26:	4b63      	ldr	r3, [pc, #396]	; (405cb4 <_dtoa_r+0xa7c>)
  405b28:	4682      	mov	sl, r0
  405b2a:	468b      	mov	fp, r1
  405b2c:	4630      	mov	r0, r6
  405b2e:	4639      	mov	r1, r7
  405b30:	f7fd fc2a 	bl	403388 <__aeabi_dmul>
  405b34:	460f      	mov	r7, r1
  405b36:	4606      	mov	r6, r0
  405b38:	f001 ff22 	bl	407980 <__aeabi_d2iz>
  405b3c:	4680      	mov	r8, r0
  405b3e:	f7fd fbbd 	bl	4032bc <__aeabi_i2d>
  405b42:	4602      	mov	r2, r0
  405b44:	460b      	mov	r3, r1
  405b46:	4630      	mov	r0, r6
  405b48:	4639      	mov	r1, r7
  405b4a:	f7fd fa69 	bl	403020 <__aeabi_dsub>
  405b4e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405b52:	fa5f f888 	uxtb.w	r8, r8
  405b56:	4652      	mov	r2, sl
  405b58:	465b      	mov	r3, fp
  405b5a:	f805 8b01 	strb.w	r8, [r5], #1
  405b5e:	4606      	mov	r6, r0
  405b60:	460f      	mov	r7, r1
  405b62:	f001 fecf 	bl	407904 <__aeabi_dcmplt>
  405b66:	4632      	mov	r2, r6
  405b68:	463b      	mov	r3, r7
  405b6a:	2800      	cmp	r0, #0
  405b6c:	d0c6      	beq.n	405afc <_dtoa_r+0x8c4>
  405b6e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b74:	9302      	str	r3, [sp, #8]
  405b76:	e523      	b.n	4055c0 <_dtoa_r+0x388>
  405b78:	2300      	movs	r3, #0
  405b7a:	930b      	str	r3, [sp, #44]	; 0x2c
  405b7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405b7e:	2b00      	cmp	r3, #0
  405b80:	f340 80dc 	ble.w	405d3c <_dtoa_r+0xb04>
  405b84:	461f      	mov	r7, r3
  405b86:	461e      	mov	r6, r3
  405b88:	930f      	str	r3, [sp, #60]	; 0x3c
  405b8a:	930a      	str	r3, [sp, #40]	; 0x28
  405b8c:	e6f6      	b.n	40597c <_dtoa_r+0x744>
  405b8e:	2301      	movs	r3, #1
  405b90:	930b      	str	r3, [sp, #44]	; 0x2c
  405b92:	e7f3      	b.n	405b7c <_dtoa_r+0x944>
  405b94:	f1ba 0f00 	cmp.w	sl, #0
  405b98:	f47f ada8 	bne.w	4056ec <_dtoa_r+0x4b4>
  405b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405ba0:	2b00      	cmp	r3, #0
  405ba2:	f47f adba 	bne.w	40571a <_dtoa_r+0x4e2>
  405ba6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405baa:	0d3f      	lsrs	r7, r7, #20
  405bac:	053f      	lsls	r7, r7, #20
  405bae:	2f00      	cmp	r7, #0
  405bb0:	f000 820d 	beq.w	405fce <_dtoa_r+0xd96>
  405bb4:	9b08      	ldr	r3, [sp, #32]
  405bb6:	3301      	adds	r3, #1
  405bb8:	9308      	str	r3, [sp, #32]
  405bba:	9b06      	ldr	r3, [sp, #24]
  405bbc:	3301      	adds	r3, #1
  405bbe:	9306      	str	r3, [sp, #24]
  405bc0:	2301      	movs	r3, #1
  405bc2:	930c      	str	r3, [sp, #48]	; 0x30
  405bc4:	e5ab      	b.n	40571e <_dtoa_r+0x4e6>
  405bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bc8:	2b00      	cmp	r3, #0
  405bca:	f73f ac42 	bgt.w	405452 <_dtoa_r+0x21a>
  405bce:	f040 8221 	bne.w	406014 <_dtoa_r+0xddc>
  405bd2:	2200      	movs	r2, #0
  405bd4:	4b38      	ldr	r3, [pc, #224]	; (405cb8 <_dtoa_r+0xa80>)
  405bd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405bda:	f7fd fbd5 	bl	403388 <__aeabi_dmul>
  405bde:	4652      	mov	r2, sl
  405be0:	465b      	mov	r3, fp
  405be2:	f001 fea3 	bl	40792c <__aeabi_dcmpge>
  405be6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405bea:	4646      	mov	r6, r8
  405bec:	2800      	cmp	r0, #0
  405bee:	d041      	beq.n	405c74 <_dtoa_r+0xa3c>
  405bf0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bf2:	9d04      	ldr	r5, [sp, #16]
  405bf4:	43db      	mvns	r3, r3
  405bf6:	9302      	str	r3, [sp, #8]
  405bf8:	4641      	mov	r1, r8
  405bfa:	4620      	mov	r0, r4
  405bfc:	f000 fe44 	bl	406888 <_Bfree>
  405c00:	2e00      	cmp	r6, #0
  405c02:	f43f acdd 	beq.w	4055c0 <_dtoa_r+0x388>
  405c06:	e6a7      	b.n	405958 <_dtoa_r+0x720>
  405c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405c0a:	4649      	mov	r1, r9
  405c0c:	4620      	mov	r0, r4
  405c0e:	f000 ff71 	bl	406af4 <__pow5mult>
  405c12:	4681      	mov	r9, r0
  405c14:	e558      	b.n	4056c8 <_dtoa_r+0x490>
  405c16:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405c18:	2a00      	cmp	r2, #0
  405c1a:	f000 8187 	beq.w	405f2c <_dtoa_r+0xcf4>
  405c1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405c22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405c24:	9d08      	ldr	r5, [sp, #32]
  405c26:	e4f2      	b.n	40560e <_dtoa_r+0x3d6>
  405c28:	f1ba 0f00 	cmp.w	sl, #0
  405c2c:	f47f ad75 	bne.w	40571a <_dtoa_r+0x4e2>
  405c30:	e7b4      	b.n	405b9c <_dtoa_r+0x964>
  405c32:	f000 fe33 	bl	40689c <__multadd>
  405c36:	4647      	mov	r7, r8
  405c38:	4606      	mov	r6, r0
  405c3a:	4683      	mov	fp, r0
  405c3c:	e5be      	b.n	4057bc <_dtoa_r+0x584>
  405c3e:	4601      	mov	r1, r0
  405c40:	4620      	mov	r0, r4
  405c42:	9306      	str	r3, [sp, #24]
  405c44:	f000 fe20 	bl	406888 <_Bfree>
  405c48:	2201      	movs	r2, #1
  405c4a:	9b06      	ldr	r3, [sp, #24]
  405c4c:	e5e0      	b.n	405810 <_dtoa_r+0x5d8>
  405c4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c50:	2b02      	cmp	r3, #2
  405c52:	f77f ad96 	ble.w	405782 <_dtoa_r+0x54a>
  405c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c58:	2b00      	cmp	r3, #0
  405c5a:	d1c9      	bne.n	405bf0 <_dtoa_r+0x9b8>
  405c5c:	4641      	mov	r1, r8
  405c5e:	2205      	movs	r2, #5
  405c60:	4620      	mov	r0, r4
  405c62:	f000 fe1b 	bl	40689c <__multadd>
  405c66:	4601      	mov	r1, r0
  405c68:	4680      	mov	r8, r0
  405c6a:	4648      	mov	r0, r9
  405c6c:	f000 ffe4 	bl	406c38 <__mcmp>
  405c70:	2800      	cmp	r0, #0
  405c72:	ddbd      	ble.n	405bf0 <_dtoa_r+0x9b8>
  405c74:	9a02      	ldr	r2, [sp, #8]
  405c76:	9904      	ldr	r1, [sp, #16]
  405c78:	2331      	movs	r3, #49	; 0x31
  405c7a:	3201      	adds	r2, #1
  405c7c:	9202      	str	r2, [sp, #8]
  405c7e:	700b      	strb	r3, [r1, #0]
  405c80:	1c4d      	adds	r5, r1, #1
  405c82:	e7b9      	b.n	405bf8 <_dtoa_r+0x9c0>
  405c84:	9a02      	ldr	r2, [sp, #8]
  405c86:	3201      	adds	r2, #1
  405c88:	9202      	str	r2, [sp, #8]
  405c8a:	9a04      	ldr	r2, [sp, #16]
  405c8c:	2331      	movs	r3, #49	; 0x31
  405c8e:	7013      	strb	r3, [r2, #0]
  405c90:	e652      	b.n	405938 <_dtoa_r+0x700>
  405c92:	2301      	movs	r3, #1
  405c94:	930b      	str	r3, [sp, #44]	; 0x2c
  405c96:	e666      	b.n	405966 <_dtoa_r+0x72e>
  405c98:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405c9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405c9e:	e48f      	b.n	4055c0 <_dtoa_r+0x388>
  405ca0:	004084d0 	.word	0x004084d0
  405ca4:	004084a8 	.word	0x004084a8
  405ca8:	3ff00000 	.word	0x3ff00000
  405cac:	401c0000 	.word	0x401c0000
  405cb0:	3fe00000 	.word	0x3fe00000
  405cb4:	40240000 	.word	0x40240000
  405cb8:	40140000 	.word	0x40140000
  405cbc:	4650      	mov	r0, sl
  405cbe:	f7fd fafd 	bl	4032bc <__aeabi_i2d>
  405cc2:	463a      	mov	r2, r7
  405cc4:	4643      	mov	r3, r8
  405cc6:	f7fd fb5f 	bl	403388 <__aeabi_dmul>
  405cca:	2200      	movs	r2, #0
  405ccc:	4bc1      	ldr	r3, [pc, #772]	; (405fd4 <_dtoa_r+0xd9c>)
  405cce:	f7fd f9a9 	bl	403024 <__adddf3>
  405cd2:	4605      	mov	r5, r0
  405cd4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405cd8:	4641      	mov	r1, r8
  405cda:	2200      	movs	r2, #0
  405cdc:	4bbe      	ldr	r3, [pc, #760]	; (405fd8 <_dtoa_r+0xda0>)
  405cde:	4638      	mov	r0, r7
  405ce0:	f7fd f99e 	bl	403020 <__aeabi_dsub>
  405ce4:	462a      	mov	r2, r5
  405ce6:	4633      	mov	r3, r6
  405ce8:	4682      	mov	sl, r0
  405cea:	468b      	mov	fp, r1
  405cec:	f001 fe28 	bl	407940 <__aeabi_dcmpgt>
  405cf0:	4680      	mov	r8, r0
  405cf2:	2800      	cmp	r0, #0
  405cf4:	f040 8110 	bne.w	405f18 <_dtoa_r+0xce0>
  405cf8:	462a      	mov	r2, r5
  405cfa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405cfe:	4650      	mov	r0, sl
  405d00:	4659      	mov	r1, fp
  405d02:	f001 fdff 	bl	407904 <__aeabi_dcmplt>
  405d06:	b118      	cbz	r0, 405d10 <_dtoa_r+0xad8>
  405d08:	4646      	mov	r6, r8
  405d0a:	e771      	b.n	405bf0 <_dtoa_r+0x9b8>
  405d0c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405d10:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405d14:	f7ff bb8a 	b.w	40542c <_dtoa_r+0x1f4>
  405d18:	9804      	ldr	r0, [sp, #16]
  405d1a:	f7ff babb 	b.w	405294 <_dtoa_r+0x5c>
  405d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405d22:	970c      	str	r7, [sp, #48]	; 0x30
  405d24:	1afb      	subs	r3, r7, r3
  405d26:	441a      	add	r2, r3
  405d28:	920d      	str	r2, [sp, #52]	; 0x34
  405d2a:	2700      	movs	r7, #0
  405d2c:	e469      	b.n	405602 <_dtoa_r+0x3ca>
  405d2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405d32:	f04f 0a02 	mov.w	sl, #2
  405d36:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405d3a:	e657      	b.n	4059ec <_dtoa_r+0x7b4>
  405d3c:	2100      	movs	r1, #0
  405d3e:	2301      	movs	r3, #1
  405d40:	6461      	str	r1, [r4, #68]	; 0x44
  405d42:	4620      	mov	r0, r4
  405d44:	9325      	str	r3, [sp, #148]	; 0x94
  405d46:	f000 fd79 	bl	40683c <_Balloc>
  405d4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d4c:	9004      	str	r0, [sp, #16]
  405d4e:	6420      	str	r0, [r4, #64]	; 0x40
  405d50:	930a      	str	r3, [sp, #40]	; 0x28
  405d52:	930f      	str	r3, [sp, #60]	; 0x3c
  405d54:	e629      	b.n	4059aa <_dtoa_r+0x772>
  405d56:	2a00      	cmp	r2, #0
  405d58:	46d0      	mov	r8, sl
  405d5a:	f8cd b018 	str.w	fp, [sp, #24]
  405d5e:	469a      	mov	sl, r3
  405d60:	dd11      	ble.n	405d86 <_dtoa_r+0xb4e>
  405d62:	4649      	mov	r1, r9
  405d64:	2201      	movs	r2, #1
  405d66:	4620      	mov	r0, r4
  405d68:	f000 ff14 	bl	406b94 <__lshift>
  405d6c:	4641      	mov	r1, r8
  405d6e:	4681      	mov	r9, r0
  405d70:	f000 ff62 	bl	406c38 <__mcmp>
  405d74:	2800      	cmp	r0, #0
  405d76:	f340 8146 	ble.w	406006 <_dtoa_r+0xdce>
  405d7a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405d7e:	f000 8106 	beq.w	405f8e <_dtoa_r+0xd56>
  405d82:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405d86:	46b3      	mov	fp, r6
  405d88:	f887 a000 	strb.w	sl, [r7]
  405d8c:	1c7d      	adds	r5, r7, #1
  405d8e:	9e06      	ldr	r6, [sp, #24]
  405d90:	e5d2      	b.n	405938 <_dtoa_r+0x700>
  405d92:	d104      	bne.n	405d9e <_dtoa_r+0xb66>
  405d94:	f01a 0f01 	tst.w	sl, #1
  405d98:	d001      	beq.n	405d9e <_dtoa_r+0xb66>
  405d9a:	e5bd      	b.n	405918 <_dtoa_r+0x6e0>
  405d9c:	4615      	mov	r5, r2
  405d9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405da2:	2b30      	cmp	r3, #48	; 0x30
  405da4:	f105 32ff 	add.w	r2, r5, #4294967295
  405da8:	d0f8      	beq.n	405d9c <_dtoa_r+0xb64>
  405daa:	e5c5      	b.n	405938 <_dtoa_r+0x700>
  405dac:	9904      	ldr	r1, [sp, #16]
  405dae:	2230      	movs	r2, #48	; 0x30
  405db0:	700a      	strb	r2, [r1, #0]
  405db2:	9a02      	ldr	r2, [sp, #8]
  405db4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405db8:	3201      	adds	r2, #1
  405dba:	9202      	str	r2, [sp, #8]
  405dbc:	f7ff bbfc 	b.w	4055b8 <_dtoa_r+0x380>
  405dc0:	f000 80bb 	beq.w	405f3a <_dtoa_r+0xd02>
  405dc4:	9b02      	ldr	r3, [sp, #8]
  405dc6:	425d      	negs	r5, r3
  405dc8:	4b84      	ldr	r3, [pc, #528]	; (405fdc <_dtoa_r+0xda4>)
  405dca:	f005 020f 	and.w	r2, r5, #15
  405dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405dda:	f7fd fad5 	bl	403388 <__aeabi_dmul>
  405dde:	112d      	asrs	r5, r5, #4
  405de0:	4607      	mov	r7, r0
  405de2:	4688      	mov	r8, r1
  405de4:	f000 812c 	beq.w	406040 <_dtoa_r+0xe08>
  405de8:	4e7d      	ldr	r6, [pc, #500]	; (405fe0 <_dtoa_r+0xda8>)
  405dea:	f04f 0a02 	mov.w	sl, #2
  405dee:	07eb      	lsls	r3, r5, #31
  405df0:	d509      	bpl.n	405e06 <_dtoa_r+0xbce>
  405df2:	4638      	mov	r0, r7
  405df4:	4641      	mov	r1, r8
  405df6:	e9d6 2300 	ldrd	r2, r3, [r6]
  405dfa:	f7fd fac5 	bl	403388 <__aeabi_dmul>
  405dfe:	f10a 0a01 	add.w	sl, sl, #1
  405e02:	4607      	mov	r7, r0
  405e04:	4688      	mov	r8, r1
  405e06:	106d      	asrs	r5, r5, #1
  405e08:	f106 0608 	add.w	r6, r6, #8
  405e0c:	d1ef      	bne.n	405dee <_dtoa_r+0xbb6>
  405e0e:	e608      	b.n	405a22 <_dtoa_r+0x7ea>
  405e10:	6871      	ldr	r1, [r6, #4]
  405e12:	4620      	mov	r0, r4
  405e14:	f000 fd12 	bl	40683c <_Balloc>
  405e18:	6933      	ldr	r3, [r6, #16]
  405e1a:	3302      	adds	r3, #2
  405e1c:	009a      	lsls	r2, r3, #2
  405e1e:	4605      	mov	r5, r0
  405e20:	f106 010c 	add.w	r1, r6, #12
  405e24:	300c      	adds	r0, #12
  405e26:	f000 fc63 	bl	4066f0 <memcpy>
  405e2a:	4629      	mov	r1, r5
  405e2c:	2201      	movs	r2, #1
  405e2e:	4620      	mov	r0, r4
  405e30:	f000 feb0 	bl	406b94 <__lshift>
  405e34:	9006      	str	r0, [sp, #24]
  405e36:	e4b5      	b.n	4057a4 <_dtoa_r+0x56c>
  405e38:	2b39      	cmp	r3, #57	; 0x39
  405e3a:	f8cd b018 	str.w	fp, [sp, #24]
  405e3e:	46d0      	mov	r8, sl
  405e40:	f000 80a5 	beq.w	405f8e <_dtoa_r+0xd56>
  405e44:	f103 0a01 	add.w	sl, r3, #1
  405e48:	46b3      	mov	fp, r6
  405e4a:	f887 a000 	strb.w	sl, [r7]
  405e4e:	1c7d      	adds	r5, r7, #1
  405e50:	9e06      	ldr	r6, [sp, #24]
  405e52:	e571      	b.n	405938 <_dtoa_r+0x700>
  405e54:	465a      	mov	r2, fp
  405e56:	46d0      	mov	r8, sl
  405e58:	46b3      	mov	fp, r6
  405e5a:	469a      	mov	sl, r3
  405e5c:	4616      	mov	r6, r2
  405e5e:	e54f      	b.n	405900 <_dtoa_r+0x6c8>
  405e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405e62:	495e      	ldr	r1, [pc, #376]	; (405fdc <_dtoa_r+0xda4>)
  405e64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405e68:	462a      	mov	r2, r5
  405e6a:	4633      	mov	r3, r6
  405e6c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405e70:	f7fd fa8a 	bl	403388 <__aeabi_dmul>
  405e74:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405e78:	4638      	mov	r0, r7
  405e7a:	4641      	mov	r1, r8
  405e7c:	f001 fd80 	bl	407980 <__aeabi_d2iz>
  405e80:	4605      	mov	r5, r0
  405e82:	f7fd fa1b 	bl	4032bc <__aeabi_i2d>
  405e86:	460b      	mov	r3, r1
  405e88:	4602      	mov	r2, r0
  405e8a:	4641      	mov	r1, r8
  405e8c:	4638      	mov	r0, r7
  405e8e:	f7fd f8c7 	bl	403020 <__aeabi_dsub>
  405e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405e94:	460f      	mov	r7, r1
  405e96:	9904      	ldr	r1, [sp, #16]
  405e98:	3530      	adds	r5, #48	; 0x30
  405e9a:	2b01      	cmp	r3, #1
  405e9c:	700d      	strb	r5, [r1, #0]
  405e9e:	4606      	mov	r6, r0
  405ea0:	f101 0501 	add.w	r5, r1, #1
  405ea4:	d026      	beq.n	405ef4 <_dtoa_r+0xcbc>
  405ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ea8:	9a04      	ldr	r2, [sp, #16]
  405eaa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405fe8 <_dtoa_r+0xdb0>
  405eae:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405eb2:	4413      	add	r3, r2
  405eb4:	f04f 0a00 	mov.w	sl, #0
  405eb8:	4699      	mov	r9, r3
  405eba:	4652      	mov	r2, sl
  405ebc:	465b      	mov	r3, fp
  405ebe:	4630      	mov	r0, r6
  405ec0:	4639      	mov	r1, r7
  405ec2:	f7fd fa61 	bl	403388 <__aeabi_dmul>
  405ec6:	460f      	mov	r7, r1
  405ec8:	4606      	mov	r6, r0
  405eca:	f001 fd59 	bl	407980 <__aeabi_d2iz>
  405ece:	4680      	mov	r8, r0
  405ed0:	f7fd f9f4 	bl	4032bc <__aeabi_i2d>
  405ed4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405ed8:	4602      	mov	r2, r0
  405eda:	460b      	mov	r3, r1
  405edc:	4630      	mov	r0, r6
  405ede:	4639      	mov	r1, r7
  405ee0:	f7fd f89e 	bl	403020 <__aeabi_dsub>
  405ee4:	f805 8b01 	strb.w	r8, [r5], #1
  405ee8:	454d      	cmp	r5, r9
  405eea:	4606      	mov	r6, r0
  405eec:	460f      	mov	r7, r1
  405eee:	d1e4      	bne.n	405eba <_dtoa_r+0xc82>
  405ef0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405ef4:	4b3b      	ldr	r3, [pc, #236]	; (405fe4 <_dtoa_r+0xdac>)
  405ef6:	2200      	movs	r2, #0
  405ef8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405efc:	f7fd f892 	bl	403024 <__adddf3>
  405f00:	4632      	mov	r2, r6
  405f02:	463b      	mov	r3, r7
  405f04:	f001 fcfe 	bl	407904 <__aeabi_dcmplt>
  405f08:	2800      	cmp	r0, #0
  405f0a:	d046      	beq.n	405f9a <_dtoa_r+0xd62>
  405f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f0e:	9302      	str	r3, [sp, #8]
  405f10:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405f14:	f7ff bb43 	b.w	40559e <_dtoa_r+0x366>
  405f18:	f04f 0800 	mov.w	r8, #0
  405f1c:	4646      	mov	r6, r8
  405f1e:	e6a9      	b.n	405c74 <_dtoa_r+0xa3c>
  405f20:	9b08      	ldr	r3, [sp, #32]
  405f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f24:	1a9d      	subs	r5, r3, r2
  405f26:	2300      	movs	r3, #0
  405f28:	f7ff bb71 	b.w	40560e <_dtoa_r+0x3d6>
  405f2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405f2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405f30:	9d08      	ldr	r5, [sp, #32]
  405f32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405f36:	f7ff bb6a 	b.w	40560e <_dtoa_r+0x3d6>
  405f3a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405f3e:	f04f 0a02 	mov.w	sl, #2
  405f42:	e56e      	b.n	405a22 <_dtoa_r+0x7ea>
  405f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f46:	2b00      	cmp	r3, #0
  405f48:	f43f aeb8 	beq.w	405cbc <_dtoa_r+0xa84>
  405f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f4e:	2b00      	cmp	r3, #0
  405f50:	f77f aede 	ble.w	405d10 <_dtoa_r+0xad8>
  405f54:	2200      	movs	r2, #0
  405f56:	4b24      	ldr	r3, [pc, #144]	; (405fe8 <_dtoa_r+0xdb0>)
  405f58:	4638      	mov	r0, r7
  405f5a:	4641      	mov	r1, r8
  405f5c:	f7fd fa14 	bl	403388 <__aeabi_dmul>
  405f60:	4607      	mov	r7, r0
  405f62:	4688      	mov	r8, r1
  405f64:	f10a 0001 	add.w	r0, sl, #1
  405f68:	f7fd f9a8 	bl	4032bc <__aeabi_i2d>
  405f6c:	463a      	mov	r2, r7
  405f6e:	4643      	mov	r3, r8
  405f70:	f7fd fa0a 	bl	403388 <__aeabi_dmul>
  405f74:	2200      	movs	r2, #0
  405f76:	4b17      	ldr	r3, [pc, #92]	; (405fd4 <_dtoa_r+0xd9c>)
  405f78:	f7fd f854 	bl	403024 <__adddf3>
  405f7c:	9a02      	ldr	r2, [sp, #8]
  405f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f80:	9312      	str	r3, [sp, #72]	; 0x48
  405f82:	3a01      	subs	r2, #1
  405f84:	4605      	mov	r5, r0
  405f86:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405f8a:	9215      	str	r2, [sp, #84]	; 0x54
  405f8c:	e56a      	b.n	405a64 <_dtoa_r+0x82c>
  405f8e:	2239      	movs	r2, #57	; 0x39
  405f90:	46b3      	mov	fp, r6
  405f92:	703a      	strb	r2, [r7, #0]
  405f94:	9e06      	ldr	r6, [sp, #24]
  405f96:	1c7d      	adds	r5, r7, #1
  405f98:	e4c0      	b.n	40591c <_dtoa_r+0x6e4>
  405f9a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405f9e:	2000      	movs	r0, #0
  405fa0:	4910      	ldr	r1, [pc, #64]	; (405fe4 <_dtoa_r+0xdac>)
  405fa2:	f7fd f83d 	bl	403020 <__aeabi_dsub>
  405fa6:	4632      	mov	r2, r6
  405fa8:	463b      	mov	r3, r7
  405faa:	f001 fcc9 	bl	407940 <__aeabi_dcmpgt>
  405fae:	b908      	cbnz	r0, 405fb4 <_dtoa_r+0xd7c>
  405fb0:	e6ae      	b.n	405d10 <_dtoa_r+0xad8>
  405fb2:	4615      	mov	r5, r2
  405fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405fb8:	2b30      	cmp	r3, #48	; 0x30
  405fba:	f105 32ff 	add.w	r2, r5, #4294967295
  405fbe:	d0f8      	beq.n	405fb2 <_dtoa_r+0xd7a>
  405fc0:	e5d7      	b.n	405b72 <_dtoa_r+0x93a>
  405fc2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405fc8:	9302      	str	r3, [sp, #8]
  405fca:	f7ff bae8 	b.w	40559e <_dtoa_r+0x366>
  405fce:	970c      	str	r7, [sp, #48]	; 0x30
  405fd0:	f7ff bba5 	b.w	40571e <_dtoa_r+0x4e6>
  405fd4:	401c0000 	.word	0x401c0000
  405fd8:	40140000 	.word	0x40140000
  405fdc:	004084d0 	.word	0x004084d0
  405fe0:	004084a8 	.word	0x004084a8
  405fe4:	3fe00000 	.word	0x3fe00000
  405fe8:	40240000 	.word	0x40240000
  405fec:	2b39      	cmp	r3, #57	; 0x39
  405fee:	f8cd b018 	str.w	fp, [sp, #24]
  405ff2:	46d0      	mov	r8, sl
  405ff4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405ff8:	469a      	mov	sl, r3
  405ffa:	d0c8      	beq.n	405f8e <_dtoa_r+0xd56>
  405ffc:	f1bb 0f00 	cmp.w	fp, #0
  406000:	f73f aebf 	bgt.w	405d82 <_dtoa_r+0xb4a>
  406004:	e6bf      	b.n	405d86 <_dtoa_r+0xb4e>
  406006:	f47f aebe 	bne.w	405d86 <_dtoa_r+0xb4e>
  40600a:	f01a 0f01 	tst.w	sl, #1
  40600e:	f43f aeba 	beq.w	405d86 <_dtoa_r+0xb4e>
  406012:	e6b2      	b.n	405d7a <_dtoa_r+0xb42>
  406014:	f04f 0800 	mov.w	r8, #0
  406018:	4646      	mov	r6, r8
  40601a:	e5e9      	b.n	405bf0 <_dtoa_r+0x9b8>
  40601c:	4631      	mov	r1, r6
  40601e:	2300      	movs	r3, #0
  406020:	220a      	movs	r2, #10
  406022:	4620      	mov	r0, r4
  406024:	f000 fc3a 	bl	40689c <__multadd>
  406028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40602a:	2b00      	cmp	r3, #0
  40602c:	4606      	mov	r6, r0
  40602e:	dd0a      	ble.n	406046 <_dtoa_r+0xe0e>
  406030:	930a      	str	r3, [sp, #40]	; 0x28
  406032:	f7ff bbaa 	b.w	40578a <_dtoa_r+0x552>
  406036:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406038:	2b02      	cmp	r3, #2
  40603a:	dc23      	bgt.n	406084 <_dtoa_r+0xe4c>
  40603c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40603e:	e43b      	b.n	4058b8 <_dtoa_r+0x680>
  406040:	f04f 0a02 	mov.w	sl, #2
  406044:	e4ed      	b.n	405a22 <_dtoa_r+0x7ea>
  406046:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406048:	2b02      	cmp	r3, #2
  40604a:	dc1b      	bgt.n	406084 <_dtoa_r+0xe4c>
  40604c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40604e:	e7ef      	b.n	406030 <_dtoa_r+0xdf8>
  406050:	2500      	movs	r5, #0
  406052:	6465      	str	r5, [r4, #68]	; 0x44
  406054:	4629      	mov	r1, r5
  406056:	4620      	mov	r0, r4
  406058:	f000 fbf0 	bl	40683c <_Balloc>
  40605c:	f04f 33ff 	mov.w	r3, #4294967295
  406060:	930a      	str	r3, [sp, #40]	; 0x28
  406062:	930f      	str	r3, [sp, #60]	; 0x3c
  406064:	2301      	movs	r3, #1
  406066:	9004      	str	r0, [sp, #16]
  406068:	9525      	str	r5, [sp, #148]	; 0x94
  40606a:	6420      	str	r0, [r4, #64]	; 0x40
  40606c:	930b      	str	r3, [sp, #44]	; 0x2c
  40606e:	f7ff b9dd 	b.w	40542c <_dtoa_r+0x1f4>
  406072:	2501      	movs	r5, #1
  406074:	f7ff b9a5 	b.w	4053c2 <_dtoa_r+0x18a>
  406078:	f43f ab69 	beq.w	40574e <_dtoa_r+0x516>
  40607c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406080:	f7ff bbf9 	b.w	405876 <_dtoa_r+0x63e>
  406084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406086:	930a      	str	r3, [sp, #40]	; 0x28
  406088:	e5e5      	b.n	405c56 <_dtoa_r+0xa1e>
  40608a:	bf00      	nop

0040608c <__libc_fini_array>:
  40608c:	b538      	push	{r3, r4, r5, lr}
  40608e:	4c0a      	ldr	r4, [pc, #40]	; (4060b8 <__libc_fini_array+0x2c>)
  406090:	4d0a      	ldr	r5, [pc, #40]	; (4060bc <__libc_fini_array+0x30>)
  406092:	1b64      	subs	r4, r4, r5
  406094:	10a4      	asrs	r4, r4, #2
  406096:	d00a      	beq.n	4060ae <__libc_fini_array+0x22>
  406098:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40609c:	3b01      	subs	r3, #1
  40609e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4060a2:	3c01      	subs	r4, #1
  4060a4:	f855 3904 	ldr.w	r3, [r5], #-4
  4060a8:	4798      	blx	r3
  4060aa:	2c00      	cmp	r4, #0
  4060ac:	d1f9      	bne.n	4060a2 <__libc_fini_array+0x16>
  4060ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4060b2:	f002 bb0b 	b.w	4086cc <_fini>
  4060b6:	bf00      	nop
  4060b8:	004086dc 	.word	0x004086dc
  4060bc:	004086d8 	.word	0x004086d8

004060c0 <_localeconv_r>:
  4060c0:	4a04      	ldr	r2, [pc, #16]	; (4060d4 <_localeconv_r+0x14>)
  4060c2:	4b05      	ldr	r3, [pc, #20]	; (4060d8 <_localeconv_r+0x18>)
  4060c4:	6812      	ldr	r2, [r2, #0]
  4060c6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4060c8:	2800      	cmp	r0, #0
  4060ca:	bf08      	it	eq
  4060cc:	4618      	moveq	r0, r3
  4060ce:	30f0      	adds	r0, #240	; 0xf0
  4060d0:	4770      	bx	lr
  4060d2:	bf00      	nop
  4060d4:	20400024 	.word	0x20400024
  4060d8:	20400864 	.word	0x20400864

004060dc <__retarget_lock_acquire_recursive>:
  4060dc:	4770      	bx	lr
  4060de:	bf00      	nop

004060e0 <__retarget_lock_release_recursive>:
  4060e0:	4770      	bx	lr
  4060e2:	bf00      	nop

004060e4 <_malloc_r>:
  4060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060e8:	f101 060b 	add.w	r6, r1, #11
  4060ec:	2e16      	cmp	r6, #22
  4060ee:	b083      	sub	sp, #12
  4060f0:	4605      	mov	r5, r0
  4060f2:	f240 809e 	bls.w	406232 <_malloc_r+0x14e>
  4060f6:	f036 0607 	bics.w	r6, r6, #7
  4060fa:	f100 80bd 	bmi.w	406278 <_malloc_r+0x194>
  4060fe:	42b1      	cmp	r1, r6
  406100:	f200 80ba 	bhi.w	406278 <_malloc_r+0x194>
  406104:	f000 fb8e 	bl	406824 <__malloc_lock>
  406108:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40610c:	f0c0 8293 	bcc.w	406636 <_malloc_r+0x552>
  406110:	0a73      	lsrs	r3, r6, #9
  406112:	f000 80b8 	beq.w	406286 <_malloc_r+0x1a2>
  406116:	2b04      	cmp	r3, #4
  406118:	f200 8179 	bhi.w	40640e <_malloc_r+0x32a>
  40611c:	09b3      	lsrs	r3, r6, #6
  40611e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406122:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406126:	00c3      	lsls	r3, r0, #3
  406128:	4fbf      	ldr	r7, [pc, #764]	; (406428 <_malloc_r+0x344>)
  40612a:	443b      	add	r3, r7
  40612c:	f1a3 0108 	sub.w	r1, r3, #8
  406130:	685c      	ldr	r4, [r3, #4]
  406132:	42a1      	cmp	r1, r4
  406134:	d106      	bne.n	406144 <_malloc_r+0x60>
  406136:	e00c      	b.n	406152 <_malloc_r+0x6e>
  406138:	2a00      	cmp	r2, #0
  40613a:	f280 80aa 	bge.w	406292 <_malloc_r+0x1ae>
  40613e:	68e4      	ldr	r4, [r4, #12]
  406140:	42a1      	cmp	r1, r4
  406142:	d006      	beq.n	406152 <_malloc_r+0x6e>
  406144:	6863      	ldr	r3, [r4, #4]
  406146:	f023 0303 	bic.w	r3, r3, #3
  40614a:	1b9a      	subs	r2, r3, r6
  40614c:	2a0f      	cmp	r2, #15
  40614e:	ddf3      	ble.n	406138 <_malloc_r+0x54>
  406150:	4670      	mov	r0, lr
  406152:	693c      	ldr	r4, [r7, #16]
  406154:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40643c <_malloc_r+0x358>
  406158:	4574      	cmp	r4, lr
  40615a:	f000 81ab 	beq.w	4064b4 <_malloc_r+0x3d0>
  40615e:	6863      	ldr	r3, [r4, #4]
  406160:	f023 0303 	bic.w	r3, r3, #3
  406164:	1b9a      	subs	r2, r3, r6
  406166:	2a0f      	cmp	r2, #15
  406168:	f300 8190 	bgt.w	40648c <_malloc_r+0x3a8>
  40616c:	2a00      	cmp	r2, #0
  40616e:	f8c7 e014 	str.w	lr, [r7, #20]
  406172:	f8c7 e010 	str.w	lr, [r7, #16]
  406176:	f280 809d 	bge.w	4062b4 <_malloc_r+0x1d0>
  40617a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40617e:	f080 8161 	bcs.w	406444 <_malloc_r+0x360>
  406182:	08db      	lsrs	r3, r3, #3
  406184:	f103 0c01 	add.w	ip, r3, #1
  406188:	1099      	asrs	r1, r3, #2
  40618a:	687a      	ldr	r2, [r7, #4]
  40618c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406190:	f8c4 8008 	str.w	r8, [r4, #8]
  406194:	2301      	movs	r3, #1
  406196:	408b      	lsls	r3, r1
  406198:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40619c:	4313      	orrs	r3, r2
  40619e:	3908      	subs	r1, #8
  4061a0:	60e1      	str	r1, [r4, #12]
  4061a2:	607b      	str	r3, [r7, #4]
  4061a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4061a8:	f8c8 400c 	str.w	r4, [r8, #12]
  4061ac:	1082      	asrs	r2, r0, #2
  4061ae:	2401      	movs	r4, #1
  4061b0:	4094      	lsls	r4, r2
  4061b2:	429c      	cmp	r4, r3
  4061b4:	f200 808b 	bhi.w	4062ce <_malloc_r+0x1ea>
  4061b8:	421c      	tst	r4, r3
  4061ba:	d106      	bne.n	4061ca <_malloc_r+0xe6>
  4061bc:	f020 0003 	bic.w	r0, r0, #3
  4061c0:	0064      	lsls	r4, r4, #1
  4061c2:	421c      	tst	r4, r3
  4061c4:	f100 0004 	add.w	r0, r0, #4
  4061c8:	d0fa      	beq.n	4061c0 <_malloc_r+0xdc>
  4061ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4061ce:	46cc      	mov	ip, r9
  4061d0:	4680      	mov	r8, r0
  4061d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4061d6:	459c      	cmp	ip, r3
  4061d8:	d107      	bne.n	4061ea <_malloc_r+0x106>
  4061da:	e16d      	b.n	4064b8 <_malloc_r+0x3d4>
  4061dc:	2a00      	cmp	r2, #0
  4061de:	f280 817b 	bge.w	4064d8 <_malloc_r+0x3f4>
  4061e2:	68db      	ldr	r3, [r3, #12]
  4061e4:	459c      	cmp	ip, r3
  4061e6:	f000 8167 	beq.w	4064b8 <_malloc_r+0x3d4>
  4061ea:	6859      	ldr	r1, [r3, #4]
  4061ec:	f021 0103 	bic.w	r1, r1, #3
  4061f0:	1b8a      	subs	r2, r1, r6
  4061f2:	2a0f      	cmp	r2, #15
  4061f4:	ddf2      	ble.n	4061dc <_malloc_r+0xf8>
  4061f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4061fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4061fe:	9300      	str	r3, [sp, #0]
  406200:	199c      	adds	r4, r3, r6
  406202:	4628      	mov	r0, r5
  406204:	f046 0601 	orr.w	r6, r6, #1
  406208:	f042 0501 	orr.w	r5, r2, #1
  40620c:	605e      	str	r6, [r3, #4]
  40620e:	f8c8 c00c 	str.w	ip, [r8, #12]
  406212:	f8cc 8008 	str.w	r8, [ip, #8]
  406216:	617c      	str	r4, [r7, #20]
  406218:	613c      	str	r4, [r7, #16]
  40621a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40621e:	f8c4 e008 	str.w	lr, [r4, #8]
  406222:	6065      	str	r5, [r4, #4]
  406224:	505a      	str	r2, [r3, r1]
  406226:	f000 fb03 	bl	406830 <__malloc_unlock>
  40622a:	9b00      	ldr	r3, [sp, #0]
  40622c:	f103 0408 	add.w	r4, r3, #8
  406230:	e01e      	b.n	406270 <_malloc_r+0x18c>
  406232:	2910      	cmp	r1, #16
  406234:	d820      	bhi.n	406278 <_malloc_r+0x194>
  406236:	f000 faf5 	bl	406824 <__malloc_lock>
  40623a:	2610      	movs	r6, #16
  40623c:	2318      	movs	r3, #24
  40623e:	2002      	movs	r0, #2
  406240:	4f79      	ldr	r7, [pc, #484]	; (406428 <_malloc_r+0x344>)
  406242:	443b      	add	r3, r7
  406244:	f1a3 0208 	sub.w	r2, r3, #8
  406248:	685c      	ldr	r4, [r3, #4]
  40624a:	4294      	cmp	r4, r2
  40624c:	f000 813d 	beq.w	4064ca <_malloc_r+0x3e6>
  406250:	6863      	ldr	r3, [r4, #4]
  406252:	68e1      	ldr	r1, [r4, #12]
  406254:	68a6      	ldr	r6, [r4, #8]
  406256:	f023 0303 	bic.w	r3, r3, #3
  40625a:	4423      	add	r3, r4
  40625c:	4628      	mov	r0, r5
  40625e:	685a      	ldr	r2, [r3, #4]
  406260:	60f1      	str	r1, [r6, #12]
  406262:	f042 0201 	orr.w	r2, r2, #1
  406266:	608e      	str	r6, [r1, #8]
  406268:	605a      	str	r2, [r3, #4]
  40626a:	f000 fae1 	bl	406830 <__malloc_unlock>
  40626e:	3408      	adds	r4, #8
  406270:	4620      	mov	r0, r4
  406272:	b003      	add	sp, #12
  406274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406278:	2400      	movs	r4, #0
  40627a:	230c      	movs	r3, #12
  40627c:	4620      	mov	r0, r4
  40627e:	602b      	str	r3, [r5, #0]
  406280:	b003      	add	sp, #12
  406282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406286:	2040      	movs	r0, #64	; 0x40
  406288:	f44f 7300 	mov.w	r3, #512	; 0x200
  40628c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406290:	e74a      	b.n	406128 <_malloc_r+0x44>
  406292:	4423      	add	r3, r4
  406294:	68e1      	ldr	r1, [r4, #12]
  406296:	685a      	ldr	r2, [r3, #4]
  406298:	68a6      	ldr	r6, [r4, #8]
  40629a:	f042 0201 	orr.w	r2, r2, #1
  40629e:	60f1      	str	r1, [r6, #12]
  4062a0:	4628      	mov	r0, r5
  4062a2:	608e      	str	r6, [r1, #8]
  4062a4:	605a      	str	r2, [r3, #4]
  4062a6:	f000 fac3 	bl	406830 <__malloc_unlock>
  4062aa:	3408      	adds	r4, #8
  4062ac:	4620      	mov	r0, r4
  4062ae:	b003      	add	sp, #12
  4062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062b4:	4423      	add	r3, r4
  4062b6:	4628      	mov	r0, r5
  4062b8:	685a      	ldr	r2, [r3, #4]
  4062ba:	f042 0201 	orr.w	r2, r2, #1
  4062be:	605a      	str	r2, [r3, #4]
  4062c0:	f000 fab6 	bl	406830 <__malloc_unlock>
  4062c4:	3408      	adds	r4, #8
  4062c6:	4620      	mov	r0, r4
  4062c8:	b003      	add	sp, #12
  4062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062ce:	68bc      	ldr	r4, [r7, #8]
  4062d0:	6863      	ldr	r3, [r4, #4]
  4062d2:	f023 0803 	bic.w	r8, r3, #3
  4062d6:	45b0      	cmp	r8, r6
  4062d8:	d304      	bcc.n	4062e4 <_malloc_r+0x200>
  4062da:	eba8 0306 	sub.w	r3, r8, r6
  4062de:	2b0f      	cmp	r3, #15
  4062e0:	f300 8085 	bgt.w	4063ee <_malloc_r+0x30a>
  4062e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406440 <_malloc_r+0x35c>
  4062e8:	4b50      	ldr	r3, [pc, #320]	; (40642c <_malloc_r+0x348>)
  4062ea:	f8d9 2000 	ldr.w	r2, [r9]
  4062ee:	681b      	ldr	r3, [r3, #0]
  4062f0:	3201      	adds	r2, #1
  4062f2:	4433      	add	r3, r6
  4062f4:	eb04 0a08 	add.w	sl, r4, r8
  4062f8:	f000 8155 	beq.w	4065a6 <_malloc_r+0x4c2>
  4062fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406300:	330f      	adds	r3, #15
  406302:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406306:	f02b 0b0f 	bic.w	fp, fp, #15
  40630a:	4659      	mov	r1, fp
  40630c:	4628      	mov	r0, r5
  40630e:	f000 fd8f 	bl	406e30 <_sbrk_r>
  406312:	1c41      	adds	r1, r0, #1
  406314:	4602      	mov	r2, r0
  406316:	f000 80fc 	beq.w	406512 <_malloc_r+0x42e>
  40631a:	4582      	cmp	sl, r0
  40631c:	f200 80f7 	bhi.w	40650e <_malloc_r+0x42a>
  406320:	4b43      	ldr	r3, [pc, #268]	; (406430 <_malloc_r+0x34c>)
  406322:	6819      	ldr	r1, [r3, #0]
  406324:	4459      	add	r1, fp
  406326:	6019      	str	r1, [r3, #0]
  406328:	f000 814d 	beq.w	4065c6 <_malloc_r+0x4e2>
  40632c:	f8d9 0000 	ldr.w	r0, [r9]
  406330:	3001      	adds	r0, #1
  406332:	bf1b      	ittet	ne
  406334:	eba2 0a0a 	subne.w	sl, r2, sl
  406338:	4451      	addne	r1, sl
  40633a:	f8c9 2000 	streq.w	r2, [r9]
  40633e:	6019      	strne	r1, [r3, #0]
  406340:	f012 0107 	ands.w	r1, r2, #7
  406344:	f000 8115 	beq.w	406572 <_malloc_r+0x48e>
  406348:	f1c1 0008 	rsb	r0, r1, #8
  40634c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406350:	4402      	add	r2, r0
  406352:	3108      	adds	r1, #8
  406354:	eb02 090b 	add.w	r9, r2, fp
  406358:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40635c:	eba1 0909 	sub.w	r9, r1, r9
  406360:	4649      	mov	r1, r9
  406362:	4628      	mov	r0, r5
  406364:	9301      	str	r3, [sp, #4]
  406366:	9200      	str	r2, [sp, #0]
  406368:	f000 fd62 	bl	406e30 <_sbrk_r>
  40636c:	1c43      	adds	r3, r0, #1
  40636e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406372:	f000 8143 	beq.w	4065fc <_malloc_r+0x518>
  406376:	1a80      	subs	r0, r0, r2
  406378:	4448      	add	r0, r9
  40637a:	f040 0001 	orr.w	r0, r0, #1
  40637e:	6819      	ldr	r1, [r3, #0]
  406380:	60ba      	str	r2, [r7, #8]
  406382:	4449      	add	r1, r9
  406384:	42bc      	cmp	r4, r7
  406386:	6050      	str	r0, [r2, #4]
  406388:	6019      	str	r1, [r3, #0]
  40638a:	d017      	beq.n	4063bc <_malloc_r+0x2d8>
  40638c:	f1b8 0f0f 	cmp.w	r8, #15
  406390:	f240 80fb 	bls.w	40658a <_malloc_r+0x4a6>
  406394:	6860      	ldr	r0, [r4, #4]
  406396:	f1a8 020c 	sub.w	r2, r8, #12
  40639a:	f022 0207 	bic.w	r2, r2, #7
  40639e:	eb04 0e02 	add.w	lr, r4, r2
  4063a2:	f000 0001 	and.w	r0, r0, #1
  4063a6:	f04f 0c05 	mov.w	ip, #5
  4063aa:	4310      	orrs	r0, r2
  4063ac:	2a0f      	cmp	r2, #15
  4063ae:	6060      	str	r0, [r4, #4]
  4063b0:	f8ce c004 	str.w	ip, [lr, #4]
  4063b4:	f8ce c008 	str.w	ip, [lr, #8]
  4063b8:	f200 8117 	bhi.w	4065ea <_malloc_r+0x506>
  4063bc:	4b1d      	ldr	r3, [pc, #116]	; (406434 <_malloc_r+0x350>)
  4063be:	68bc      	ldr	r4, [r7, #8]
  4063c0:	681a      	ldr	r2, [r3, #0]
  4063c2:	4291      	cmp	r1, r2
  4063c4:	bf88      	it	hi
  4063c6:	6019      	strhi	r1, [r3, #0]
  4063c8:	4b1b      	ldr	r3, [pc, #108]	; (406438 <_malloc_r+0x354>)
  4063ca:	681a      	ldr	r2, [r3, #0]
  4063cc:	4291      	cmp	r1, r2
  4063ce:	6862      	ldr	r2, [r4, #4]
  4063d0:	bf88      	it	hi
  4063d2:	6019      	strhi	r1, [r3, #0]
  4063d4:	f022 0203 	bic.w	r2, r2, #3
  4063d8:	4296      	cmp	r6, r2
  4063da:	eba2 0306 	sub.w	r3, r2, r6
  4063de:	d801      	bhi.n	4063e4 <_malloc_r+0x300>
  4063e0:	2b0f      	cmp	r3, #15
  4063e2:	dc04      	bgt.n	4063ee <_malloc_r+0x30a>
  4063e4:	4628      	mov	r0, r5
  4063e6:	f000 fa23 	bl	406830 <__malloc_unlock>
  4063ea:	2400      	movs	r4, #0
  4063ec:	e740      	b.n	406270 <_malloc_r+0x18c>
  4063ee:	19a2      	adds	r2, r4, r6
  4063f0:	f043 0301 	orr.w	r3, r3, #1
  4063f4:	f046 0601 	orr.w	r6, r6, #1
  4063f8:	6066      	str	r6, [r4, #4]
  4063fa:	4628      	mov	r0, r5
  4063fc:	60ba      	str	r2, [r7, #8]
  4063fe:	6053      	str	r3, [r2, #4]
  406400:	f000 fa16 	bl	406830 <__malloc_unlock>
  406404:	3408      	adds	r4, #8
  406406:	4620      	mov	r0, r4
  406408:	b003      	add	sp, #12
  40640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40640e:	2b14      	cmp	r3, #20
  406410:	d971      	bls.n	4064f6 <_malloc_r+0x412>
  406412:	2b54      	cmp	r3, #84	; 0x54
  406414:	f200 80a3 	bhi.w	40655e <_malloc_r+0x47a>
  406418:	0b33      	lsrs	r3, r6, #12
  40641a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40641e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406422:	00c3      	lsls	r3, r0, #3
  406424:	e680      	b.n	406128 <_malloc_r+0x44>
  406426:	bf00      	nop
  406428:	20400454 	.word	0x20400454
  40642c:	20400ca0 	.word	0x20400ca0
  406430:	20400c70 	.word	0x20400c70
  406434:	20400c98 	.word	0x20400c98
  406438:	20400c9c 	.word	0x20400c9c
  40643c:	2040045c 	.word	0x2040045c
  406440:	2040085c 	.word	0x2040085c
  406444:	0a5a      	lsrs	r2, r3, #9
  406446:	2a04      	cmp	r2, #4
  406448:	d95b      	bls.n	406502 <_malloc_r+0x41e>
  40644a:	2a14      	cmp	r2, #20
  40644c:	f200 80ae 	bhi.w	4065ac <_malloc_r+0x4c8>
  406450:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406454:	00c9      	lsls	r1, r1, #3
  406456:	325b      	adds	r2, #91	; 0x5b
  406458:	eb07 0c01 	add.w	ip, r7, r1
  40645c:	5879      	ldr	r1, [r7, r1]
  40645e:	f1ac 0c08 	sub.w	ip, ip, #8
  406462:	458c      	cmp	ip, r1
  406464:	f000 8088 	beq.w	406578 <_malloc_r+0x494>
  406468:	684a      	ldr	r2, [r1, #4]
  40646a:	f022 0203 	bic.w	r2, r2, #3
  40646e:	4293      	cmp	r3, r2
  406470:	d273      	bcs.n	40655a <_malloc_r+0x476>
  406472:	6889      	ldr	r1, [r1, #8]
  406474:	458c      	cmp	ip, r1
  406476:	d1f7      	bne.n	406468 <_malloc_r+0x384>
  406478:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40647c:	687b      	ldr	r3, [r7, #4]
  40647e:	60e2      	str	r2, [r4, #12]
  406480:	f8c4 c008 	str.w	ip, [r4, #8]
  406484:	6094      	str	r4, [r2, #8]
  406486:	f8cc 400c 	str.w	r4, [ip, #12]
  40648a:	e68f      	b.n	4061ac <_malloc_r+0xc8>
  40648c:	19a1      	adds	r1, r4, r6
  40648e:	f046 0c01 	orr.w	ip, r6, #1
  406492:	f042 0601 	orr.w	r6, r2, #1
  406496:	f8c4 c004 	str.w	ip, [r4, #4]
  40649a:	4628      	mov	r0, r5
  40649c:	6179      	str	r1, [r7, #20]
  40649e:	6139      	str	r1, [r7, #16]
  4064a0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4064a4:	f8c1 e008 	str.w	lr, [r1, #8]
  4064a8:	604e      	str	r6, [r1, #4]
  4064aa:	50e2      	str	r2, [r4, r3]
  4064ac:	f000 f9c0 	bl	406830 <__malloc_unlock>
  4064b0:	3408      	adds	r4, #8
  4064b2:	e6dd      	b.n	406270 <_malloc_r+0x18c>
  4064b4:	687b      	ldr	r3, [r7, #4]
  4064b6:	e679      	b.n	4061ac <_malloc_r+0xc8>
  4064b8:	f108 0801 	add.w	r8, r8, #1
  4064bc:	f018 0f03 	tst.w	r8, #3
  4064c0:	f10c 0c08 	add.w	ip, ip, #8
  4064c4:	f47f ae85 	bne.w	4061d2 <_malloc_r+0xee>
  4064c8:	e02d      	b.n	406526 <_malloc_r+0x442>
  4064ca:	68dc      	ldr	r4, [r3, #12]
  4064cc:	42a3      	cmp	r3, r4
  4064ce:	bf08      	it	eq
  4064d0:	3002      	addeq	r0, #2
  4064d2:	f43f ae3e 	beq.w	406152 <_malloc_r+0x6e>
  4064d6:	e6bb      	b.n	406250 <_malloc_r+0x16c>
  4064d8:	4419      	add	r1, r3
  4064da:	461c      	mov	r4, r3
  4064dc:	684a      	ldr	r2, [r1, #4]
  4064de:	68db      	ldr	r3, [r3, #12]
  4064e0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4064e4:	f042 0201 	orr.w	r2, r2, #1
  4064e8:	604a      	str	r2, [r1, #4]
  4064ea:	4628      	mov	r0, r5
  4064ec:	60f3      	str	r3, [r6, #12]
  4064ee:	609e      	str	r6, [r3, #8]
  4064f0:	f000 f99e 	bl	406830 <__malloc_unlock>
  4064f4:	e6bc      	b.n	406270 <_malloc_r+0x18c>
  4064f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4064fa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4064fe:	00c3      	lsls	r3, r0, #3
  406500:	e612      	b.n	406128 <_malloc_r+0x44>
  406502:	099a      	lsrs	r2, r3, #6
  406504:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406508:	00c9      	lsls	r1, r1, #3
  40650a:	3238      	adds	r2, #56	; 0x38
  40650c:	e7a4      	b.n	406458 <_malloc_r+0x374>
  40650e:	42bc      	cmp	r4, r7
  406510:	d054      	beq.n	4065bc <_malloc_r+0x4d8>
  406512:	68bc      	ldr	r4, [r7, #8]
  406514:	6862      	ldr	r2, [r4, #4]
  406516:	f022 0203 	bic.w	r2, r2, #3
  40651a:	e75d      	b.n	4063d8 <_malloc_r+0x2f4>
  40651c:	f859 3908 	ldr.w	r3, [r9], #-8
  406520:	4599      	cmp	r9, r3
  406522:	f040 8086 	bne.w	406632 <_malloc_r+0x54e>
  406526:	f010 0f03 	tst.w	r0, #3
  40652a:	f100 30ff 	add.w	r0, r0, #4294967295
  40652e:	d1f5      	bne.n	40651c <_malloc_r+0x438>
  406530:	687b      	ldr	r3, [r7, #4]
  406532:	ea23 0304 	bic.w	r3, r3, r4
  406536:	607b      	str	r3, [r7, #4]
  406538:	0064      	lsls	r4, r4, #1
  40653a:	429c      	cmp	r4, r3
  40653c:	f63f aec7 	bhi.w	4062ce <_malloc_r+0x1ea>
  406540:	2c00      	cmp	r4, #0
  406542:	f43f aec4 	beq.w	4062ce <_malloc_r+0x1ea>
  406546:	421c      	tst	r4, r3
  406548:	4640      	mov	r0, r8
  40654a:	f47f ae3e 	bne.w	4061ca <_malloc_r+0xe6>
  40654e:	0064      	lsls	r4, r4, #1
  406550:	421c      	tst	r4, r3
  406552:	f100 0004 	add.w	r0, r0, #4
  406556:	d0fa      	beq.n	40654e <_malloc_r+0x46a>
  406558:	e637      	b.n	4061ca <_malloc_r+0xe6>
  40655a:	468c      	mov	ip, r1
  40655c:	e78c      	b.n	406478 <_malloc_r+0x394>
  40655e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406562:	d815      	bhi.n	406590 <_malloc_r+0x4ac>
  406564:	0bf3      	lsrs	r3, r6, #15
  406566:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40656a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40656e:	00c3      	lsls	r3, r0, #3
  406570:	e5da      	b.n	406128 <_malloc_r+0x44>
  406572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406576:	e6ed      	b.n	406354 <_malloc_r+0x270>
  406578:	687b      	ldr	r3, [r7, #4]
  40657a:	1092      	asrs	r2, r2, #2
  40657c:	2101      	movs	r1, #1
  40657e:	fa01 f202 	lsl.w	r2, r1, r2
  406582:	4313      	orrs	r3, r2
  406584:	607b      	str	r3, [r7, #4]
  406586:	4662      	mov	r2, ip
  406588:	e779      	b.n	40647e <_malloc_r+0x39a>
  40658a:	2301      	movs	r3, #1
  40658c:	6053      	str	r3, [r2, #4]
  40658e:	e729      	b.n	4063e4 <_malloc_r+0x300>
  406590:	f240 5254 	movw	r2, #1364	; 0x554
  406594:	4293      	cmp	r3, r2
  406596:	d822      	bhi.n	4065de <_malloc_r+0x4fa>
  406598:	0cb3      	lsrs	r3, r6, #18
  40659a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40659e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4065a2:	00c3      	lsls	r3, r0, #3
  4065a4:	e5c0      	b.n	406128 <_malloc_r+0x44>
  4065a6:	f103 0b10 	add.w	fp, r3, #16
  4065aa:	e6ae      	b.n	40630a <_malloc_r+0x226>
  4065ac:	2a54      	cmp	r2, #84	; 0x54
  4065ae:	d829      	bhi.n	406604 <_malloc_r+0x520>
  4065b0:	0b1a      	lsrs	r2, r3, #12
  4065b2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4065b6:	00c9      	lsls	r1, r1, #3
  4065b8:	326e      	adds	r2, #110	; 0x6e
  4065ba:	e74d      	b.n	406458 <_malloc_r+0x374>
  4065bc:	4b20      	ldr	r3, [pc, #128]	; (406640 <_malloc_r+0x55c>)
  4065be:	6819      	ldr	r1, [r3, #0]
  4065c0:	4459      	add	r1, fp
  4065c2:	6019      	str	r1, [r3, #0]
  4065c4:	e6b2      	b.n	40632c <_malloc_r+0x248>
  4065c6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4065ca:	2800      	cmp	r0, #0
  4065cc:	f47f aeae 	bne.w	40632c <_malloc_r+0x248>
  4065d0:	eb08 030b 	add.w	r3, r8, fp
  4065d4:	68ba      	ldr	r2, [r7, #8]
  4065d6:	f043 0301 	orr.w	r3, r3, #1
  4065da:	6053      	str	r3, [r2, #4]
  4065dc:	e6ee      	b.n	4063bc <_malloc_r+0x2d8>
  4065de:	207f      	movs	r0, #127	; 0x7f
  4065e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4065e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4065e8:	e59e      	b.n	406128 <_malloc_r+0x44>
  4065ea:	f104 0108 	add.w	r1, r4, #8
  4065ee:	4628      	mov	r0, r5
  4065f0:	9300      	str	r3, [sp, #0]
  4065f2:	f000 fe13 	bl	40721c <_free_r>
  4065f6:	9b00      	ldr	r3, [sp, #0]
  4065f8:	6819      	ldr	r1, [r3, #0]
  4065fa:	e6df      	b.n	4063bc <_malloc_r+0x2d8>
  4065fc:	2001      	movs	r0, #1
  4065fe:	f04f 0900 	mov.w	r9, #0
  406602:	e6bc      	b.n	40637e <_malloc_r+0x29a>
  406604:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406608:	d805      	bhi.n	406616 <_malloc_r+0x532>
  40660a:	0bda      	lsrs	r2, r3, #15
  40660c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406610:	00c9      	lsls	r1, r1, #3
  406612:	3277      	adds	r2, #119	; 0x77
  406614:	e720      	b.n	406458 <_malloc_r+0x374>
  406616:	f240 5154 	movw	r1, #1364	; 0x554
  40661a:	428a      	cmp	r2, r1
  40661c:	d805      	bhi.n	40662a <_malloc_r+0x546>
  40661e:	0c9a      	lsrs	r2, r3, #18
  406620:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406624:	00c9      	lsls	r1, r1, #3
  406626:	327c      	adds	r2, #124	; 0x7c
  406628:	e716      	b.n	406458 <_malloc_r+0x374>
  40662a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40662e:	227e      	movs	r2, #126	; 0x7e
  406630:	e712      	b.n	406458 <_malloc_r+0x374>
  406632:	687b      	ldr	r3, [r7, #4]
  406634:	e780      	b.n	406538 <_malloc_r+0x454>
  406636:	08f0      	lsrs	r0, r6, #3
  406638:	f106 0308 	add.w	r3, r6, #8
  40663c:	e600      	b.n	406240 <_malloc_r+0x15c>
  40663e:	bf00      	nop
  406640:	20400c70 	.word	0x20400c70
	...

00406650 <memchr>:
  406650:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406654:	2a10      	cmp	r2, #16
  406656:	db2b      	blt.n	4066b0 <memchr+0x60>
  406658:	f010 0f07 	tst.w	r0, #7
  40665c:	d008      	beq.n	406670 <memchr+0x20>
  40665e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406662:	3a01      	subs	r2, #1
  406664:	428b      	cmp	r3, r1
  406666:	d02d      	beq.n	4066c4 <memchr+0x74>
  406668:	f010 0f07 	tst.w	r0, #7
  40666c:	b342      	cbz	r2, 4066c0 <memchr+0x70>
  40666e:	d1f6      	bne.n	40665e <memchr+0xe>
  406670:	b4f0      	push	{r4, r5, r6, r7}
  406672:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406676:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40667a:	f022 0407 	bic.w	r4, r2, #7
  40667e:	f07f 0700 	mvns.w	r7, #0
  406682:	2300      	movs	r3, #0
  406684:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406688:	3c08      	subs	r4, #8
  40668a:	ea85 0501 	eor.w	r5, r5, r1
  40668e:	ea86 0601 	eor.w	r6, r6, r1
  406692:	fa85 f547 	uadd8	r5, r5, r7
  406696:	faa3 f587 	sel	r5, r3, r7
  40669a:	fa86 f647 	uadd8	r6, r6, r7
  40669e:	faa5 f687 	sel	r6, r5, r7
  4066a2:	b98e      	cbnz	r6, 4066c8 <memchr+0x78>
  4066a4:	d1ee      	bne.n	406684 <memchr+0x34>
  4066a6:	bcf0      	pop	{r4, r5, r6, r7}
  4066a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4066ac:	f002 0207 	and.w	r2, r2, #7
  4066b0:	b132      	cbz	r2, 4066c0 <memchr+0x70>
  4066b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4066b6:	3a01      	subs	r2, #1
  4066b8:	ea83 0301 	eor.w	r3, r3, r1
  4066bc:	b113      	cbz	r3, 4066c4 <memchr+0x74>
  4066be:	d1f8      	bne.n	4066b2 <memchr+0x62>
  4066c0:	2000      	movs	r0, #0
  4066c2:	4770      	bx	lr
  4066c4:	3801      	subs	r0, #1
  4066c6:	4770      	bx	lr
  4066c8:	2d00      	cmp	r5, #0
  4066ca:	bf06      	itte	eq
  4066cc:	4635      	moveq	r5, r6
  4066ce:	3803      	subeq	r0, #3
  4066d0:	3807      	subne	r0, #7
  4066d2:	f015 0f01 	tst.w	r5, #1
  4066d6:	d107      	bne.n	4066e8 <memchr+0x98>
  4066d8:	3001      	adds	r0, #1
  4066da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4066de:	bf02      	ittt	eq
  4066e0:	3001      	addeq	r0, #1
  4066e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4066e6:	3001      	addeq	r0, #1
  4066e8:	bcf0      	pop	{r4, r5, r6, r7}
  4066ea:	3801      	subs	r0, #1
  4066ec:	4770      	bx	lr
  4066ee:	bf00      	nop

004066f0 <memcpy>:
  4066f0:	4684      	mov	ip, r0
  4066f2:	ea41 0300 	orr.w	r3, r1, r0
  4066f6:	f013 0303 	ands.w	r3, r3, #3
  4066fa:	d16d      	bne.n	4067d8 <memcpy+0xe8>
  4066fc:	3a40      	subs	r2, #64	; 0x40
  4066fe:	d341      	bcc.n	406784 <memcpy+0x94>
  406700:	f851 3b04 	ldr.w	r3, [r1], #4
  406704:	f840 3b04 	str.w	r3, [r0], #4
  406708:	f851 3b04 	ldr.w	r3, [r1], #4
  40670c:	f840 3b04 	str.w	r3, [r0], #4
  406710:	f851 3b04 	ldr.w	r3, [r1], #4
  406714:	f840 3b04 	str.w	r3, [r0], #4
  406718:	f851 3b04 	ldr.w	r3, [r1], #4
  40671c:	f840 3b04 	str.w	r3, [r0], #4
  406720:	f851 3b04 	ldr.w	r3, [r1], #4
  406724:	f840 3b04 	str.w	r3, [r0], #4
  406728:	f851 3b04 	ldr.w	r3, [r1], #4
  40672c:	f840 3b04 	str.w	r3, [r0], #4
  406730:	f851 3b04 	ldr.w	r3, [r1], #4
  406734:	f840 3b04 	str.w	r3, [r0], #4
  406738:	f851 3b04 	ldr.w	r3, [r1], #4
  40673c:	f840 3b04 	str.w	r3, [r0], #4
  406740:	f851 3b04 	ldr.w	r3, [r1], #4
  406744:	f840 3b04 	str.w	r3, [r0], #4
  406748:	f851 3b04 	ldr.w	r3, [r1], #4
  40674c:	f840 3b04 	str.w	r3, [r0], #4
  406750:	f851 3b04 	ldr.w	r3, [r1], #4
  406754:	f840 3b04 	str.w	r3, [r0], #4
  406758:	f851 3b04 	ldr.w	r3, [r1], #4
  40675c:	f840 3b04 	str.w	r3, [r0], #4
  406760:	f851 3b04 	ldr.w	r3, [r1], #4
  406764:	f840 3b04 	str.w	r3, [r0], #4
  406768:	f851 3b04 	ldr.w	r3, [r1], #4
  40676c:	f840 3b04 	str.w	r3, [r0], #4
  406770:	f851 3b04 	ldr.w	r3, [r1], #4
  406774:	f840 3b04 	str.w	r3, [r0], #4
  406778:	f851 3b04 	ldr.w	r3, [r1], #4
  40677c:	f840 3b04 	str.w	r3, [r0], #4
  406780:	3a40      	subs	r2, #64	; 0x40
  406782:	d2bd      	bcs.n	406700 <memcpy+0x10>
  406784:	3230      	adds	r2, #48	; 0x30
  406786:	d311      	bcc.n	4067ac <memcpy+0xbc>
  406788:	f851 3b04 	ldr.w	r3, [r1], #4
  40678c:	f840 3b04 	str.w	r3, [r0], #4
  406790:	f851 3b04 	ldr.w	r3, [r1], #4
  406794:	f840 3b04 	str.w	r3, [r0], #4
  406798:	f851 3b04 	ldr.w	r3, [r1], #4
  40679c:	f840 3b04 	str.w	r3, [r0], #4
  4067a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067a4:	f840 3b04 	str.w	r3, [r0], #4
  4067a8:	3a10      	subs	r2, #16
  4067aa:	d2ed      	bcs.n	406788 <memcpy+0x98>
  4067ac:	320c      	adds	r2, #12
  4067ae:	d305      	bcc.n	4067bc <memcpy+0xcc>
  4067b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067b4:	f840 3b04 	str.w	r3, [r0], #4
  4067b8:	3a04      	subs	r2, #4
  4067ba:	d2f9      	bcs.n	4067b0 <memcpy+0xc0>
  4067bc:	3204      	adds	r2, #4
  4067be:	d008      	beq.n	4067d2 <memcpy+0xe2>
  4067c0:	07d2      	lsls	r2, r2, #31
  4067c2:	bf1c      	itt	ne
  4067c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4067c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4067cc:	d301      	bcc.n	4067d2 <memcpy+0xe2>
  4067ce:	880b      	ldrh	r3, [r1, #0]
  4067d0:	8003      	strh	r3, [r0, #0]
  4067d2:	4660      	mov	r0, ip
  4067d4:	4770      	bx	lr
  4067d6:	bf00      	nop
  4067d8:	2a08      	cmp	r2, #8
  4067da:	d313      	bcc.n	406804 <memcpy+0x114>
  4067dc:	078b      	lsls	r3, r1, #30
  4067de:	d08d      	beq.n	4066fc <memcpy+0xc>
  4067e0:	f010 0303 	ands.w	r3, r0, #3
  4067e4:	d08a      	beq.n	4066fc <memcpy+0xc>
  4067e6:	f1c3 0304 	rsb	r3, r3, #4
  4067ea:	1ad2      	subs	r2, r2, r3
  4067ec:	07db      	lsls	r3, r3, #31
  4067ee:	bf1c      	itt	ne
  4067f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4067f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4067f8:	d380      	bcc.n	4066fc <memcpy+0xc>
  4067fa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4067fe:	f820 3b02 	strh.w	r3, [r0], #2
  406802:	e77b      	b.n	4066fc <memcpy+0xc>
  406804:	3a04      	subs	r2, #4
  406806:	d3d9      	bcc.n	4067bc <memcpy+0xcc>
  406808:	3a01      	subs	r2, #1
  40680a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40680e:	f800 3b01 	strb.w	r3, [r0], #1
  406812:	d2f9      	bcs.n	406808 <memcpy+0x118>
  406814:	780b      	ldrb	r3, [r1, #0]
  406816:	7003      	strb	r3, [r0, #0]
  406818:	784b      	ldrb	r3, [r1, #1]
  40681a:	7043      	strb	r3, [r0, #1]
  40681c:	788b      	ldrb	r3, [r1, #2]
  40681e:	7083      	strb	r3, [r0, #2]
  406820:	4660      	mov	r0, ip
  406822:	4770      	bx	lr

00406824 <__malloc_lock>:
  406824:	4801      	ldr	r0, [pc, #4]	; (40682c <__malloc_lock+0x8>)
  406826:	f7ff bc59 	b.w	4060dc <__retarget_lock_acquire_recursive>
  40682a:	bf00      	nop
  40682c:	20400cc0 	.word	0x20400cc0

00406830 <__malloc_unlock>:
  406830:	4801      	ldr	r0, [pc, #4]	; (406838 <__malloc_unlock+0x8>)
  406832:	f7ff bc55 	b.w	4060e0 <__retarget_lock_release_recursive>
  406836:	bf00      	nop
  406838:	20400cc0 	.word	0x20400cc0

0040683c <_Balloc>:
  40683c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40683e:	b570      	push	{r4, r5, r6, lr}
  406840:	4605      	mov	r5, r0
  406842:	460c      	mov	r4, r1
  406844:	b14b      	cbz	r3, 40685a <_Balloc+0x1e>
  406846:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40684a:	b180      	cbz	r0, 40686e <_Balloc+0x32>
  40684c:	6802      	ldr	r2, [r0, #0]
  40684e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406852:	2300      	movs	r3, #0
  406854:	6103      	str	r3, [r0, #16]
  406856:	60c3      	str	r3, [r0, #12]
  406858:	bd70      	pop	{r4, r5, r6, pc}
  40685a:	2221      	movs	r2, #33	; 0x21
  40685c:	2104      	movs	r1, #4
  40685e:	f000 fc5d 	bl	40711c <_calloc_r>
  406862:	64e8      	str	r0, [r5, #76]	; 0x4c
  406864:	4603      	mov	r3, r0
  406866:	2800      	cmp	r0, #0
  406868:	d1ed      	bne.n	406846 <_Balloc+0xa>
  40686a:	2000      	movs	r0, #0
  40686c:	bd70      	pop	{r4, r5, r6, pc}
  40686e:	2101      	movs	r1, #1
  406870:	fa01 f604 	lsl.w	r6, r1, r4
  406874:	1d72      	adds	r2, r6, #5
  406876:	4628      	mov	r0, r5
  406878:	0092      	lsls	r2, r2, #2
  40687a:	f000 fc4f 	bl	40711c <_calloc_r>
  40687e:	2800      	cmp	r0, #0
  406880:	d0f3      	beq.n	40686a <_Balloc+0x2e>
  406882:	6044      	str	r4, [r0, #4]
  406884:	6086      	str	r6, [r0, #8]
  406886:	e7e4      	b.n	406852 <_Balloc+0x16>

00406888 <_Bfree>:
  406888:	b131      	cbz	r1, 406898 <_Bfree+0x10>
  40688a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40688c:	684a      	ldr	r2, [r1, #4]
  40688e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406892:	6008      	str	r0, [r1, #0]
  406894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406898:	4770      	bx	lr
  40689a:	bf00      	nop

0040689c <__multadd>:
  40689c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40689e:	690c      	ldr	r4, [r1, #16]
  4068a0:	b083      	sub	sp, #12
  4068a2:	460d      	mov	r5, r1
  4068a4:	4606      	mov	r6, r0
  4068a6:	f101 0e14 	add.w	lr, r1, #20
  4068aa:	2700      	movs	r7, #0
  4068ac:	f8de 0000 	ldr.w	r0, [lr]
  4068b0:	b281      	uxth	r1, r0
  4068b2:	fb02 3301 	mla	r3, r2, r1, r3
  4068b6:	0c01      	lsrs	r1, r0, #16
  4068b8:	0c18      	lsrs	r0, r3, #16
  4068ba:	fb02 0101 	mla	r1, r2, r1, r0
  4068be:	b29b      	uxth	r3, r3
  4068c0:	3701      	adds	r7, #1
  4068c2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4068c6:	42bc      	cmp	r4, r7
  4068c8:	f84e 3b04 	str.w	r3, [lr], #4
  4068cc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4068d0:	dcec      	bgt.n	4068ac <__multadd+0x10>
  4068d2:	b13b      	cbz	r3, 4068e4 <__multadd+0x48>
  4068d4:	68aa      	ldr	r2, [r5, #8]
  4068d6:	4294      	cmp	r4, r2
  4068d8:	da07      	bge.n	4068ea <__multadd+0x4e>
  4068da:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4068de:	3401      	adds	r4, #1
  4068e0:	6153      	str	r3, [r2, #20]
  4068e2:	612c      	str	r4, [r5, #16]
  4068e4:	4628      	mov	r0, r5
  4068e6:	b003      	add	sp, #12
  4068e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4068ea:	6869      	ldr	r1, [r5, #4]
  4068ec:	9301      	str	r3, [sp, #4]
  4068ee:	3101      	adds	r1, #1
  4068f0:	4630      	mov	r0, r6
  4068f2:	f7ff ffa3 	bl	40683c <_Balloc>
  4068f6:	692a      	ldr	r2, [r5, #16]
  4068f8:	3202      	adds	r2, #2
  4068fa:	f105 010c 	add.w	r1, r5, #12
  4068fe:	4607      	mov	r7, r0
  406900:	0092      	lsls	r2, r2, #2
  406902:	300c      	adds	r0, #12
  406904:	f7ff fef4 	bl	4066f0 <memcpy>
  406908:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40690a:	6869      	ldr	r1, [r5, #4]
  40690c:	9b01      	ldr	r3, [sp, #4]
  40690e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406912:	6028      	str	r0, [r5, #0]
  406914:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406918:	463d      	mov	r5, r7
  40691a:	e7de      	b.n	4068da <__multadd+0x3e>

0040691c <__hi0bits>:
  40691c:	0c02      	lsrs	r2, r0, #16
  40691e:	0412      	lsls	r2, r2, #16
  406920:	4603      	mov	r3, r0
  406922:	b9b2      	cbnz	r2, 406952 <__hi0bits+0x36>
  406924:	0403      	lsls	r3, r0, #16
  406926:	2010      	movs	r0, #16
  406928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40692c:	bf04      	itt	eq
  40692e:	021b      	lsleq	r3, r3, #8
  406930:	3008      	addeq	r0, #8
  406932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406936:	bf04      	itt	eq
  406938:	011b      	lsleq	r3, r3, #4
  40693a:	3004      	addeq	r0, #4
  40693c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406940:	bf04      	itt	eq
  406942:	009b      	lsleq	r3, r3, #2
  406944:	3002      	addeq	r0, #2
  406946:	2b00      	cmp	r3, #0
  406948:	db02      	blt.n	406950 <__hi0bits+0x34>
  40694a:	005b      	lsls	r3, r3, #1
  40694c:	d403      	bmi.n	406956 <__hi0bits+0x3a>
  40694e:	2020      	movs	r0, #32
  406950:	4770      	bx	lr
  406952:	2000      	movs	r0, #0
  406954:	e7e8      	b.n	406928 <__hi0bits+0xc>
  406956:	3001      	adds	r0, #1
  406958:	4770      	bx	lr
  40695a:	bf00      	nop

0040695c <__lo0bits>:
  40695c:	6803      	ldr	r3, [r0, #0]
  40695e:	f013 0207 	ands.w	r2, r3, #7
  406962:	4601      	mov	r1, r0
  406964:	d007      	beq.n	406976 <__lo0bits+0x1a>
  406966:	07da      	lsls	r2, r3, #31
  406968:	d421      	bmi.n	4069ae <__lo0bits+0x52>
  40696a:	0798      	lsls	r0, r3, #30
  40696c:	d421      	bmi.n	4069b2 <__lo0bits+0x56>
  40696e:	089b      	lsrs	r3, r3, #2
  406970:	600b      	str	r3, [r1, #0]
  406972:	2002      	movs	r0, #2
  406974:	4770      	bx	lr
  406976:	b298      	uxth	r0, r3
  406978:	b198      	cbz	r0, 4069a2 <__lo0bits+0x46>
  40697a:	4610      	mov	r0, r2
  40697c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406980:	bf04      	itt	eq
  406982:	0a1b      	lsreq	r3, r3, #8
  406984:	3008      	addeq	r0, #8
  406986:	071a      	lsls	r2, r3, #28
  406988:	bf04      	itt	eq
  40698a:	091b      	lsreq	r3, r3, #4
  40698c:	3004      	addeq	r0, #4
  40698e:	079a      	lsls	r2, r3, #30
  406990:	bf04      	itt	eq
  406992:	089b      	lsreq	r3, r3, #2
  406994:	3002      	addeq	r0, #2
  406996:	07da      	lsls	r2, r3, #31
  406998:	d407      	bmi.n	4069aa <__lo0bits+0x4e>
  40699a:	085b      	lsrs	r3, r3, #1
  40699c:	d104      	bne.n	4069a8 <__lo0bits+0x4c>
  40699e:	2020      	movs	r0, #32
  4069a0:	4770      	bx	lr
  4069a2:	0c1b      	lsrs	r3, r3, #16
  4069a4:	2010      	movs	r0, #16
  4069a6:	e7e9      	b.n	40697c <__lo0bits+0x20>
  4069a8:	3001      	adds	r0, #1
  4069aa:	600b      	str	r3, [r1, #0]
  4069ac:	4770      	bx	lr
  4069ae:	2000      	movs	r0, #0
  4069b0:	4770      	bx	lr
  4069b2:	085b      	lsrs	r3, r3, #1
  4069b4:	600b      	str	r3, [r1, #0]
  4069b6:	2001      	movs	r0, #1
  4069b8:	4770      	bx	lr
  4069ba:	bf00      	nop

004069bc <__i2b>:
  4069bc:	b510      	push	{r4, lr}
  4069be:	460c      	mov	r4, r1
  4069c0:	2101      	movs	r1, #1
  4069c2:	f7ff ff3b 	bl	40683c <_Balloc>
  4069c6:	2201      	movs	r2, #1
  4069c8:	6144      	str	r4, [r0, #20]
  4069ca:	6102      	str	r2, [r0, #16]
  4069cc:	bd10      	pop	{r4, pc}
  4069ce:	bf00      	nop

004069d0 <__multiply>:
  4069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069d4:	690c      	ldr	r4, [r1, #16]
  4069d6:	6915      	ldr	r5, [r2, #16]
  4069d8:	42ac      	cmp	r4, r5
  4069da:	b083      	sub	sp, #12
  4069dc:	468b      	mov	fp, r1
  4069de:	4616      	mov	r6, r2
  4069e0:	da04      	bge.n	4069ec <__multiply+0x1c>
  4069e2:	4622      	mov	r2, r4
  4069e4:	46b3      	mov	fp, r6
  4069e6:	462c      	mov	r4, r5
  4069e8:	460e      	mov	r6, r1
  4069ea:	4615      	mov	r5, r2
  4069ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4069f0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4069f4:	eb04 0805 	add.w	r8, r4, r5
  4069f8:	4598      	cmp	r8, r3
  4069fa:	bfc8      	it	gt
  4069fc:	3101      	addgt	r1, #1
  4069fe:	f7ff ff1d 	bl	40683c <_Balloc>
  406a02:	f100 0914 	add.w	r9, r0, #20
  406a06:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406a0a:	45d1      	cmp	r9, sl
  406a0c:	9000      	str	r0, [sp, #0]
  406a0e:	d205      	bcs.n	406a1c <__multiply+0x4c>
  406a10:	464b      	mov	r3, r9
  406a12:	2100      	movs	r1, #0
  406a14:	f843 1b04 	str.w	r1, [r3], #4
  406a18:	459a      	cmp	sl, r3
  406a1a:	d8fb      	bhi.n	406a14 <__multiply+0x44>
  406a1c:	f106 0c14 	add.w	ip, r6, #20
  406a20:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406a24:	f10b 0b14 	add.w	fp, fp, #20
  406a28:	459c      	cmp	ip, r3
  406a2a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406a2e:	d24c      	bcs.n	406aca <__multiply+0xfa>
  406a30:	f8cd a004 	str.w	sl, [sp, #4]
  406a34:	469a      	mov	sl, r3
  406a36:	f8dc 5000 	ldr.w	r5, [ip]
  406a3a:	b2af      	uxth	r7, r5
  406a3c:	b1ef      	cbz	r7, 406a7a <__multiply+0xaa>
  406a3e:	2100      	movs	r1, #0
  406a40:	464d      	mov	r5, r9
  406a42:	465e      	mov	r6, fp
  406a44:	460c      	mov	r4, r1
  406a46:	f856 2b04 	ldr.w	r2, [r6], #4
  406a4a:	6828      	ldr	r0, [r5, #0]
  406a4c:	b293      	uxth	r3, r2
  406a4e:	b281      	uxth	r1, r0
  406a50:	fb07 1303 	mla	r3, r7, r3, r1
  406a54:	0c12      	lsrs	r2, r2, #16
  406a56:	0c01      	lsrs	r1, r0, #16
  406a58:	4423      	add	r3, r4
  406a5a:	fb07 1102 	mla	r1, r7, r2, r1
  406a5e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406a62:	b29b      	uxth	r3, r3
  406a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406a68:	45b6      	cmp	lr, r6
  406a6a:	f845 3b04 	str.w	r3, [r5], #4
  406a6e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406a72:	d8e8      	bhi.n	406a46 <__multiply+0x76>
  406a74:	602c      	str	r4, [r5, #0]
  406a76:	f8dc 5000 	ldr.w	r5, [ip]
  406a7a:	0c2d      	lsrs	r5, r5, #16
  406a7c:	d01d      	beq.n	406aba <__multiply+0xea>
  406a7e:	f8d9 3000 	ldr.w	r3, [r9]
  406a82:	4648      	mov	r0, r9
  406a84:	461c      	mov	r4, r3
  406a86:	4659      	mov	r1, fp
  406a88:	2200      	movs	r2, #0
  406a8a:	880e      	ldrh	r6, [r1, #0]
  406a8c:	0c24      	lsrs	r4, r4, #16
  406a8e:	fb05 4406 	mla	r4, r5, r6, r4
  406a92:	4422      	add	r2, r4
  406a94:	b29b      	uxth	r3, r3
  406a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406a9a:	f840 3b04 	str.w	r3, [r0], #4
  406a9e:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa2:	6804      	ldr	r4, [r0, #0]
  406aa4:	0c1b      	lsrs	r3, r3, #16
  406aa6:	b2a6      	uxth	r6, r4
  406aa8:	fb05 6303 	mla	r3, r5, r3, r6
  406aac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406ab0:	458e      	cmp	lr, r1
  406ab2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406ab6:	d8e8      	bhi.n	406a8a <__multiply+0xba>
  406ab8:	6003      	str	r3, [r0, #0]
  406aba:	f10c 0c04 	add.w	ip, ip, #4
  406abe:	45e2      	cmp	sl, ip
  406ac0:	f109 0904 	add.w	r9, r9, #4
  406ac4:	d8b7      	bhi.n	406a36 <__multiply+0x66>
  406ac6:	f8dd a004 	ldr.w	sl, [sp, #4]
  406aca:	f1b8 0f00 	cmp.w	r8, #0
  406ace:	dd0b      	ble.n	406ae8 <__multiply+0x118>
  406ad0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406ad4:	f1aa 0a04 	sub.w	sl, sl, #4
  406ad8:	b11b      	cbz	r3, 406ae2 <__multiply+0x112>
  406ada:	e005      	b.n	406ae8 <__multiply+0x118>
  406adc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406ae0:	b913      	cbnz	r3, 406ae8 <__multiply+0x118>
  406ae2:	f1b8 0801 	subs.w	r8, r8, #1
  406ae6:	d1f9      	bne.n	406adc <__multiply+0x10c>
  406ae8:	9800      	ldr	r0, [sp, #0]
  406aea:	f8c0 8010 	str.w	r8, [r0, #16]
  406aee:	b003      	add	sp, #12
  406af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406af4 <__pow5mult>:
  406af4:	f012 0303 	ands.w	r3, r2, #3
  406af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406afc:	4614      	mov	r4, r2
  406afe:	4607      	mov	r7, r0
  406b00:	d12e      	bne.n	406b60 <__pow5mult+0x6c>
  406b02:	460d      	mov	r5, r1
  406b04:	10a4      	asrs	r4, r4, #2
  406b06:	d01c      	beq.n	406b42 <__pow5mult+0x4e>
  406b08:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406b0a:	b396      	cbz	r6, 406b72 <__pow5mult+0x7e>
  406b0c:	07e3      	lsls	r3, r4, #31
  406b0e:	f04f 0800 	mov.w	r8, #0
  406b12:	d406      	bmi.n	406b22 <__pow5mult+0x2e>
  406b14:	1064      	asrs	r4, r4, #1
  406b16:	d014      	beq.n	406b42 <__pow5mult+0x4e>
  406b18:	6830      	ldr	r0, [r6, #0]
  406b1a:	b1a8      	cbz	r0, 406b48 <__pow5mult+0x54>
  406b1c:	4606      	mov	r6, r0
  406b1e:	07e3      	lsls	r3, r4, #31
  406b20:	d5f8      	bpl.n	406b14 <__pow5mult+0x20>
  406b22:	4632      	mov	r2, r6
  406b24:	4629      	mov	r1, r5
  406b26:	4638      	mov	r0, r7
  406b28:	f7ff ff52 	bl	4069d0 <__multiply>
  406b2c:	b1b5      	cbz	r5, 406b5c <__pow5mult+0x68>
  406b2e:	686a      	ldr	r2, [r5, #4]
  406b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406b32:	1064      	asrs	r4, r4, #1
  406b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406b38:	6029      	str	r1, [r5, #0]
  406b3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406b3e:	4605      	mov	r5, r0
  406b40:	d1ea      	bne.n	406b18 <__pow5mult+0x24>
  406b42:	4628      	mov	r0, r5
  406b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b48:	4632      	mov	r2, r6
  406b4a:	4631      	mov	r1, r6
  406b4c:	4638      	mov	r0, r7
  406b4e:	f7ff ff3f 	bl	4069d0 <__multiply>
  406b52:	6030      	str	r0, [r6, #0]
  406b54:	f8c0 8000 	str.w	r8, [r0]
  406b58:	4606      	mov	r6, r0
  406b5a:	e7e0      	b.n	406b1e <__pow5mult+0x2a>
  406b5c:	4605      	mov	r5, r0
  406b5e:	e7d9      	b.n	406b14 <__pow5mult+0x20>
  406b60:	1e5a      	subs	r2, r3, #1
  406b62:	4d0b      	ldr	r5, [pc, #44]	; (406b90 <__pow5mult+0x9c>)
  406b64:	2300      	movs	r3, #0
  406b66:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406b6a:	f7ff fe97 	bl	40689c <__multadd>
  406b6e:	4605      	mov	r5, r0
  406b70:	e7c8      	b.n	406b04 <__pow5mult+0x10>
  406b72:	2101      	movs	r1, #1
  406b74:	4638      	mov	r0, r7
  406b76:	f7ff fe61 	bl	40683c <_Balloc>
  406b7a:	f240 2171 	movw	r1, #625	; 0x271
  406b7e:	2201      	movs	r2, #1
  406b80:	2300      	movs	r3, #0
  406b82:	6141      	str	r1, [r0, #20]
  406b84:	6102      	str	r2, [r0, #16]
  406b86:	4606      	mov	r6, r0
  406b88:	64b8      	str	r0, [r7, #72]	; 0x48
  406b8a:	6003      	str	r3, [r0, #0]
  406b8c:	e7be      	b.n	406b0c <__pow5mult+0x18>
  406b8e:	bf00      	nop
  406b90:	00408598 	.word	0x00408598

00406b94 <__lshift>:
  406b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406b98:	4691      	mov	r9, r2
  406b9a:	690a      	ldr	r2, [r1, #16]
  406b9c:	688b      	ldr	r3, [r1, #8]
  406b9e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406ba2:	eb04 0802 	add.w	r8, r4, r2
  406ba6:	f108 0501 	add.w	r5, r8, #1
  406baa:	429d      	cmp	r5, r3
  406bac:	460e      	mov	r6, r1
  406bae:	4607      	mov	r7, r0
  406bb0:	6849      	ldr	r1, [r1, #4]
  406bb2:	dd04      	ble.n	406bbe <__lshift+0x2a>
  406bb4:	005b      	lsls	r3, r3, #1
  406bb6:	429d      	cmp	r5, r3
  406bb8:	f101 0101 	add.w	r1, r1, #1
  406bbc:	dcfa      	bgt.n	406bb4 <__lshift+0x20>
  406bbe:	4638      	mov	r0, r7
  406bc0:	f7ff fe3c 	bl	40683c <_Balloc>
  406bc4:	2c00      	cmp	r4, #0
  406bc6:	f100 0314 	add.w	r3, r0, #20
  406bca:	dd06      	ble.n	406bda <__lshift+0x46>
  406bcc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406bd0:	2100      	movs	r1, #0
  406bd2:	f843 1b04 	str.w	r1, [r3], #4
  406bd6:	429a      	cmp	r2, r3
  406bd8:	d1fb      	bne.n	406bd2 <__lshift+0x3e>
  406bda:	6934      	ldr	r4, [r6, #16]
  406bdc:	f106 0114 	add.w	r1, r6, #20
  406be0:	f019 091f 	ands.w	r9, r9, #31
  406be4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406be8:	d01d      	beq.n	406c26 <__lshift+0x92>
  406bea:	f1c9 0c20 	rsb	ip, r9, #32
  406bee:	2200      	movs	r2, #0
  406bf0:	680c      	ldr	r4, [r1, #0]
  406bf2:	fa04 f409 	lsl.w	r4, r4, r9
  406bf6:	4314      	orrs	r4, r2
  406bf8:	f843 4b04 	str.w	r4, [r3], #4
  406bfc:	f851 2b04 	ldr.w	r2, [r1], #4
  406c00:	458e      	cmp	lr, r1
  406c02:	fa22 f20c 	lsr.w	r2, r2, ip
  406c06:	d8f3      	bhi.n	406bf0 <__lshift+0x5c>
  406c08:	601a      	str	r2, [r3, #0]
  406c0a:	b10a      	cbz	r2, 406c10 <__lshift+0x7c>
  406c0c:	f108 0502 	add.w	r5, r8, #2
  406c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406c12:	6872      	ldr	r2, [r6, #4]
  406c14:	3d01      	subs	r5, #1
  406c16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406c1a:	6105      	str	r5, [r0, #16]
  406c1c:	6031      	str	r1, [r6, #0]
  406c1e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c26:	3b04      	subs	r3, #4
  406c28:	f851 2b04 	ldr.w	r2, [r1], #4
  406c2c:	f843 2f04 	str.w	r2, [r3, #4]!
  406c30:	458e      	cmp	lr, r1
  406c32:	d8f9      	bhi.n	406c28 <__lshift+0x94>
  406c34:	e7ec      	b.n	406c10 <__lshift+0x7c>
  406c36:	bf00      	nop

00406c38 <__mcmp>:
  406c38:	b430      	push	{r4, r5}
  406c3a:	690b      	ldr	r3, [r1, #16]
  406c3c:	4605      	mov	r5, r0
  406c3e:	6900      	ldr	r0, [r0, #16]
  406c40:	1ac0      	subs	r0, r0, r3
  406c42:	d10f      	bne.n	406c64 <__mcmp+0x2c>
  406c44:	009b      	lsls	r3, r3, #2
  406c46:	3514      	adds	r5, #20
  406c48:	3114      	adds	r1, #20
  406c4a:	4419      	add	r1, r3
  406c4c:	442b      	add	r3, r5
  406c4e:	e001      	b.n	406c54 <__mcmp+0x1c>
  406c50:	429d      	cmp	r5, r3
  406c52:	d207      	bcs.n	406c64 <__mcmp+0x2c>
  406c54:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406c58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406c5c:	4294      	cmp	r4, r2
  406c5e:	d0f7      	beq.n	406c50 <__mcmp+0x18>
  406c60:	d302      	bcc.n	406c68 <__mcmp+0x30>
  406c62:	2001      	movs	r0, #1
  406c64:	bc30      	pop	{r4, r5}
  406c66:	4770      	bx	lr
  406c68:	f04f 30ff 	mov.w	r0, #4294967295
  406c6c:	e7fa      	b.n	406c64 <__mcmp+0x2c>
  406c6e:	bf00      	nop

00406c70 <__mdiff>:
  406c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c74:	690f      	ldr	r7, [r1, #16]
  406c76:	460e      	mov	r6, r1
  406c78:	6911      	ldr	r1, [r2, #16]
  406c7a:	1a7f      	subs	r7, r7, r1
  406c7c:	2f00      	cmp	r7, #0
  406c7e:	4690      	mov	r8, r2
  406c80:	d117      	bne.n	406cb2 <__mdiff+0x42>
  406c82:	0089      	lsls	r1, r1, #2
  406c84:	f106 0514 	add.w	r5, r6, #20
  406c88:	f102 0e14 	add.w	lr, r2, #20
  406c8c:	186b      	adds	r3, r5, r1
  406c8e:	4471      	add	r1, lr
  406c90:	e001      	b.n	406c96 <__mdiff+0x26>
  406c92:	429d      	cmp	r5, r3
  406c94:	d25c      	bcs.n	406d50 <__mdiff+0xe0>
  406c96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406c9a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406c9e:	42a2      	cmp	r2, r4
  406ca0:	d0f7      	beq.n	406c92 <__mdiff+0x22>
  406ca2:	d25e      	bcs.n	406d62 <__mdiff+0xf2>
  406ca4:	4633      	mov	r3, r6
  406ca6:	462c      	mov	r4, r5
  406ca8:	4646      	mov	r6, r8
  406caa:	4675      	mov	r5, lr
  406cac:	4698      	mov	r8, r3
  406cae:	2701      	movs	r7, #1
  406cb0:	e005      	b.n	406cbe <__mdiff+0x4e>
  406cb2:	db58      	blt.n	406d66 <__mdiff+0xf6>
  406cb4:	f106 0514 	add.w	r5, r6, #20
  406cb8:	f108 0414 	add.w	r4, r8, #20
  406cbc:	2700      	movs	r7, #0
  406cbe:	6871      	ldr	r1, [r6, #4]
  406cc0:	f7ff fdbc 	bl	40683c <_Balloc>
  406cc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406cc8:	6936      	ldr	r6, [r6, #16]
  406cca:	60c7      	str	r7, [r0, #12]
  406ccc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406cd0:	46a6      	mov	lr, r4
  406cd2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406cd6:	f100 0414 	add.w	r4, r0, #20
  406cda:	2300      	movs	r3, #0
  406cdc:	f85e 1b04 	ldr.w	r1, [lr], #4
  406ce0:	f855 8b04 	ldr.w	r8, [r5], #4
  406ce4:	b28a      	uxth	r2, r1
  406ce6:	fa13 f388 	uxtah	r3, r3, r8
  406cea:	0c09      	lsrs	r1, r1, #16
  406cec:	1a9a      	subs	r2, r3, r2
  406cee:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406cf2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406cf6:	b292      	uxth	r2, r2
  406cf8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406cfc:	45f4      	cmp	ip, lr
  406cfe:	f844 2b04 	str.w	r2, [r4], #4
  406d02:	ea4f 4323 	mov.w	r3, r3, asr #16
  406d06:	d8e9      	bhi.n	406cdc <__mdiff+0x6c>
  406d08:	42af      	cmp	r7, r5
  406d0a:	d917      	bls.n	406d3c <__mdiff+0xcc>
  406d0c:	46a4      	mov	ip, r4
  406d0e:	46ae      	mov	lr, r5
  406d10:	f85e 2b04 	ldr.w	r2, [lr], #4
  406d14:	fa13 f382 	uxtah	r3, r3, r2
  406d18:	1419      	asrs	r1, r3, #16
  406d1a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406d1e:	b29b      	uxth	r3, r3
  406d20:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406d24:	4577      	cmp	r7, lr
  406d26:	f84c 2b04 	str.w	r2, [ip], #4
  406d2a:	ea4f 4321 	mov.w	r3, r1, asr #16
  406d2e:	d8ef      	bhi.n	406d10 <__mdiff+0xa0>
  406d30:	43ed      	mvns	r5, r5
  406d32:	442f      	add	r7, r5
  406d34:	f027 0703 	bic.w	r7, r7, #3
  406d38:	3704      	adds	r7, #4
  406d3a:	443c      	add	r4, r7
  406d3c:	3c04      	subs	r4, #4
  406d3e:	b922      	cbnz	r2, 406d4a <__mdiff+0xda>
  406d40:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406d44:	3e01      	subs	r6, #1
  406d46:	2b00      	cmp	r3, #0
  406d48:	d0fa      	beq.n	406d40 <__mdiff+0xd0>
  406d4a:	6106      	str	r6, [r0, #16]
  406d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d50:	2100      	movs	r1, #0
  406d52:	f7ff fd73 	bl	40683c <_Balloc>
  406d56:	2201      	movs	r2, #1
  406d58:	2300      	movs	r3, #0
  406d5a:	6102      	str	r2, [r0, #16]
  406d5c:	6143      	str	r3, [r0, #20]
  406d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d62:	4674      	mov	r4, lr
  406d64:	e7ab      	b.n	406cbe <__mdiff+0x4e>
  406d66:	4633      	mov	r3, r6
  406d68:	f106 0414 	add.w	r4, r6, #20
  406d6c:	f102 0514 	add.w	r5, r2, #20
  406d70:	4616      	mov	r6, r2
  406d72:	2701      	movs	r7, #1
  406d74:	4698      	mov	r8, r3
  406d76:	e7a2      	b.n	406cbe <__mdiff+0x4e>

00406d78 <__d2b>:
  406d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d7c:	b082      	sub	sp, #8
  406d7e:	2101      	movs	r1, #1
  406d80:	461c      	mov	r4, r3
  406d82:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406d86:	4615      	mov	r5, r2
  406d88:	9e08      	ldr	r6, [sp, #32]
  406d8a:	f7ff fd57 	bl	40683c <_Balloc>
  406d8e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406d92:	4680      	mov	r8, r0
  406d94:	b10f      	cbz	r7, 406d9a <__d2b+0x22>
  406d96:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406d9a:	9401      	str	r4, [sp, #4]
  406d9c:	b31d      	cbz	r5, 406de6 <__d2b+0x6e>
  406d9e:	a802      	add	r0, sp, #8
  406da0:	f840 5d08 	str.w	r5, [r0, #-8]!
  406da4:	f7ff fdda 	bl	40695c <__lo0bits>
  406da8:	2800      	cmp	r0, #0
  406daa:	d134      	bne.n	406e16 <__d2b+0x9e>
  406dac:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406db0:	f8c8 2014 	str.w	r2, [r8, #20]
  406db4:	2b00      	cmp	r3, #0
  406db6:	bf0c      	ite	eq
  406db8:	2101      	moveq	r1, #1
  406dba:	2102      	movne	r1, #2
  406dbc:	f8c8 3018 	str.w	r3, [r8, #24]
  406dc0:	f8c8 1010 	str.w	r1, [r8, #16]
  406dc4:	b9df      	cbnz	r7, 406dfe <__d2b+0x86>
  406dc6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406dca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406dce:	6030      	str	r0, [r6, #0]
  406dd0:	6918      	ldr	r0, [r3, #16]
  406dd2:	f7ff fda3 	bl	40691c <__hi0bits>
  406dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406dd8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406ddc:	6018      	str	r0, [r3, #0]
  406dde:	4640      	mov	r0, r8
  406de0:	b002      	add	sp, #8
  406de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406de6:	a801      	add	r0, sp, #4
  406de8:	f7ff fdb8 	bl	40695c <__lo0bits>
  406dec:	9b01      	ldr	r3, [sp, #4]
  406dee:	f8c8 3014 	str.w	r3, [r8, #20]
  406df2:	2101      	movs	r1, #1
  406df4:	3020      	adds	r0, #32
  406df6:	f8c8 1010 	str.w	r1, [r8, #16]
  406dfa:	2f00      	cmp	r7, #0
  406dfc:	d0e3      	beq.n	406dc6 <__d2b+0x4e>
  406dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e00:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406e04:	4407      	add	r7, r0
  406e06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406e0a:	6037      	str	r7, [r6, #0]
  406e0c:	6018      	str	r0, [r3, #0]
  406e0e:	4640      	mov	r0, r8
  406e10:	b002      	add	sp, #8
  406e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e16:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406e1a:	f1c0 0220 	rsb	r2, r0, #32
  406e1e:	fa03 f202 	lsl.w	r2, r3, r2
  406e22:	430a      	orrs	r2, r1
  406e24:	40c3      	lsrs	r3, r0
  406e26:	9301      	str	r3, [sp, #4]
  406e28:	f8c8 2014 	str.w	r2, [r8, #20]
  406e2c:	e7c2      	b.n	406db4 <__d2b+0x3c>
  406e2e:	bf00      	nop

00406e30 <_sbrk_r>:
  406e30:	b538      	push	{r3, r4, r5, lr}
  406e32:	4c07      	ldr	r4, [pc, #28]	; (406e50 <_sbrk_r+0x20>)
  406e34:	2300      	movs	r3, #0
  406e36:	4605      	mov	r5, r0
  406e38:	4608      	mov	r0, r1
  406e3a:	6023      	str	r3, [r4, #0]
  406e3c:	f7fb ff04 	bl	402c48 <_sbrk>
  406e40:	1c43      	adds	r3, r0, #1
  406e42:	d000      	beq.n	406e46 <_sbrk_r+0x16>
  406e44:	bd38      	pop	{r3, r4, r5, pc}
  406e46:	6823      	ldr	r3, [r4, #0]
  406e48:	2b00      	cmp	r3, #0
  406e4a:	d0fb      	beq.n	406e44 <_sbrk_r+0x14>
  406e4c:	602b      	str	r3, [r5, #0]
  406e4e:	bd38      	pop	{r3, r4, r5, pc}
  406e50:	20400cd4 	.word	0x20400cd4
	...

00406e80 <strlen>:
  406e80:	f890 f000 	pld	[r0]
  406e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406e88:	f020 0107 	bic.w	r1, r0, #7
  406e8c:	f06f 0c00 	mvn.w	ip, #0
  406e90:	f010 0407 	ands.w	r4, r0, #7
  406e94:	f891 f020 	pld	[r1, #32]
  406e98:	f040 8049 	bne.w	406f2e <strlen+0xae>
  406e9c:	f04f 0400 	mov.w	r4, #0
  406ea0:	f06f 0007 	mvn.w	r0, #7
  406ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406ea8:	f891 f040 	pld	[r1, #64]	; 0x40
  406eac:	f100 0008 	add.w	r0, r0, #8
  406eb0:	fa82 f24c 	uadd8	r2, r2, ip
  406eb4:	faa4 f28c 	sel	r2, r4, ip
  406eb8:	fa83 f34c 	uadd8	r3, r3, ip
  406ebc:	faa2 f38c 	sel	r3, r2, ip
  406ec0:	bb4b      	cbnz	r3, 406f16 <strlen+0x96>
  406ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406ec6:	fa82 f24c 	uadd8	r2, r2, ip
  406eca:	f100 0008 	add.w	r0, r0, #8
  406ece:	faa4 f28c 	sel	r2, r4, ip
  406ed2:	fa83 f34c 	uadd8	r3, r3, ip
  406ed6:	faa2 f38c 	sel	r3, r2, ip
  406eda:	b9e3      	cbnz	r3, 406f16 <strlen+0x96>
  406edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406ee0:	fa82 f24c 	uadd8	r2, r2, ip
  406ee4:	f100 0008 	add.w	r0, r0, #8
  406ee8:	faa4 f28c 	sel	r2, r4, ip
  406eec:	fa83 f34c 	uadd8	r3, r3, ip
  406ef0:	faa2 f38c 	sel	r3, r2, ip
  406ef4:	b97b      	cbnz	r3, 406f16 <strlen+0x96>
  406ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406efa:	f101 0120 	add.w	r1, r1, #32
  406efe:	fa82 f24c 	uadd8	r2, r2, ip
  406f02:	f100 0008 	add.w	r0, r0, #8
  406f06:	faa4 f28c 	sel	r2, r4, ip
  406f0a:	fa83 f34c 	uadd8	r3, r3, ip
  406f0e:	faa2 f38c 	sel	r3, r2, ip
  406f12:	2b00      	cmp	r3, #0
  406f14:	d0c6      	beq.n	406ea4 <strlen+0x24>
  406f16:	2a00      	cmp	r2, #0
  406f18:	bf04      	itt	eq
  406f1a:	3004      	addeq	r0, #4
  406f1c:	461a      	moveq	r2, r3
  406f1e:	ba12      	rev	r2, r2
  406f20:	fab2 f282 	clz	r2, r2
  406f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406f2c:	4770      	bx	lr
  406f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406f32:	f004 0503 	and.w	r5, r4, #3
  406f36:	f1c4 0000 	rsb	r0, r4, #0
  406f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406f3e:	f014 0f04 	tst.w	r4, #4
  406f42:	f891 f040 	pld	[r1, #64]	; 0x40
  406f46:	fa0c f505 	lsl.w	r5, ip, r5
  406f4a:	ea62 0205 	orn	r2, r2, r5
  406f4e:	bf1c      	itt	ne
  406f50:	ea63 0305 	ornne	r3, r3, r5
  406f54:	4662      	movne	r2, ip
  406f56:	f04f 0400 	mov.w	r4, #0
  406f5a:	e7a9      	b.n	406eb0 <strlen+0x30>

00406f5c <__ssprint_r>:
  406f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f60:	6893      	ldr	r3, [r2, #8]
  406f62:	b083      	sub	sp, #12
  406f64:	4690      	mov	r8, r2
  406f66:	2b00      	cmp	r3, #0
  406f68:	d070      	beq.n	40704c <__ssprint_r+0xf0>
  406f6a:	4682      	mov	sl, r0
  406f6c:	460c      	mov	r4, r1
  406f6e:	6817      	ldr	r7, [r2, #0]
  406f70:	688d      	ldr	r5, [r1, #8]
  406f72:	6808      	ldr	r0, [r1, #0]
  406f74:	e042      	b.n	406ffc <__ssprint_r+0xa0>
  406f76:	89a3      	ldrh	r3, [r4, #12]
  406f78:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f7c:	d02e      	beq.n	406fdc <__ssprint_r+0x80>
  406f7e:	6965      	ldr	r5, [r4, #20]
  406f80:	6921      	ldr	r1, [r4, #16]
  406f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406f86:	eba0 0b01 	sub.w	fp, r0, r1
  406f8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406f8e:	f10b 0001 	add.w	r0, fp, #1
  406f92:	106d      	asrs	r5, r5, #1
  406f94:	4430      	add	r0, r6
  406f96:	42a8      	cmp	r0, r5
  406f98:	462a      	mov	r2, r5
  406f9a:	bf84      	itt	hi
  406f9c:	4605      	movhi	r5, r0
  406f9e:	462a      	movhi	r2, r5
  406fa0:	055b      	lsls	r3, r3, #21
  406fa2:	d538      	bpl.n	407016 <__ssprint_r+0xba>
  406fa4:	4611      	mov	r1, r2
  406fa6:	4650      	mov	r0, sl
  406fa8:	f7ff f89c 	bl	4060e4 <_malloc_r>
  406fac:	2800      	cmp	r0, #0
  406fae:	d03c      	beq.n	40702a <__ssprint_r+0xce>
  406fb0:	465a      	mov	r2, fp
  406fb2:	6921      	ldr	r1, [r4, #16]
  406fb4:	9001      	str	r0, [sp, #4]
  406fb6:	f7ff fb9b 	bl	4066f0 <memcpy>
  406fba:	89a2      	ldrh	r2, [r4, #12]
  406fbc:	9b01      	ldr	r3, [sp, #4]
  406fbe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406fc6:	81a2      	strh	r2, [r4, #12]
  406fc8:	eba5 020b 	sub.w	r2, r5, fp
  406fcc:	eb03 000b 	add.w	r0, r3, fp
  406fd0:	6165      	str	r5, [r4, #20]
  406fd2:	6123      	str	r3, [r4, #16]
  406fd4:	6020      	str	r0, [r4, #0]
  406fd6:	60a2      	str	r2, [r4, #8]
  406fd8:	4635      	mov	r5, r6
  406fda:	46b3      	mov	fp, r6
  406fdc:	465a      	mov	r2, fp
  406fde:	4649      	mov	r1, r9
  406fe0:	f000 fa18 	bl	407414 <memmove>
  406fe4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406fe8:	68a2      	ldr	r2, [r4, #8]
  406fea:	6820      	ldr	r0, [r4, #0]
  406fec:	1b55      	subs	r5, r2, r5
  406fee:	4458      	add	r0, fp
  406ff0:	1b9e      	subs	r6, r3, r6
  406ff2:	60a5      	str	r5, [r4, #8]
  406ff4:	6020      	str	r0, [r4, #0]
  406ff6:	f8c8 6008 	str.w	r6, [r8, #8]
  406ffa:	b33e      	cbz	r6, 40704c <__ssprint_r+0xf0>
  406ffc:	687e      	ldr	r6, [r7, #4]
  406ffe:	463b      	mov	r3, r7
  407000:	3708      	adds	r7, #8
  407002:	2e00      	cmp	r6, #0
  407004:	d0fa      	beq.n	406ffc <__ssprint_r+0xa0>
  407006:	42ae      	cmp	r6, r5
  407008:	f8d3 9000 	ldr.w	r9, [r3]
  40700c:	46ab      	mov	fp, r5
  40700e:	d2b2      	bcs.n	406f76 <__ssprint_r+0x1a>
  407010:	4635      	mov	r5, r6
  407012:	46b3      	mov	fp, r6
  407014:	e7e2      	b.n	406fdc <__ssprint_r+0x80>
  407016:	4650      	mov	r0, sl
  407018:	f000 fa60 	bl	4074dc <_realloc_r>
  40701c:	4603      	mov	r3, r0
  40701e:	2800      	cmp	r0, #0
  407020:	d1d2      	bne.n	406fc8 <__ssprint_r+0x6c>
  407022:	6921      	ldr	r1, [r4, #16]
  407024:	4650      	mov	r0, sl
  407026:	f000 f8f9 	bl	40721c <_free_r>
  40702a:	230c      	movs	r3, #12
  40702c:	f8ca 3000 	str.w	r3, [sl]
  407030:	89a3      	ldrh	r3, [r4, #12]
  407032:	2200      	movs	r2, #0
  407034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407038:	f04f 30ff 	mov.w	r0, #4294967295
  40703c:	81a3      	strh	r3, [r4, #12]
  40703e:	f8c8 2008 	str.w	r2, [r8, #8]
  407042:	f8c8 2004 	str.w	r2, [r8, #4]
  407046:	b003      	add	sp, #12
  407048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40704c:	2000      	movs	r0, #0
  40704e:	f8c8 0004 	str.w	r0, [r8, #4]
  407052:	b003      	add	sp, #12
  407054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407058 <__register_exitproc>:
  407058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40705c:	4d2c      	ldr	r5, [pc, #176]	; (407110 <__register_exitproc+0xb8>)
  40705e:	4606      	mov	r6, r0
  407060:	6828      	ldr	r0, [r5, #0]
  407062:	4698      	mov	r8, r3
  407064:	460f      	mov	r7, r1
  407066:	4691      	mov	r9, r2
  407068:	f7ff f838 	bl	4060dc <__retarget_lock_acquire_recursive>
  40706c:	4b29      	ldr	r3, [pc, #164]	; (407114 <__register_exitproc+0xbc>)
  40706e:	681c      	ldr	r4, [r3, #0]
  407070:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407074:	2b00      	cmp	r3, #0
  407076:	d03e      	beq.n	4070f6 <__register_exitproc+0x9e>
  407078:	685a      	ldr	r2, [r3, #4]
  40707a:	2a1f      	cmp	r2, #31
  40707c:	dc1c      	bgt.n	4070b8 <__register_exitproc+0x60>
  40707e:	f102 0e01 	add.w	lr, r2, #1
  407082:	b176      	cbz	r6, 4070a2 <__register_exitproc+0x4a>
  407084:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407088:	2401      	movs	r4, #1
  40708a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40708e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407092:	4094      	lsls	r4, r2
  407094:	4320      	orrs	r0, r4
  407096:	2e02      	cmp	r6, #2
  407098:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40709c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4070a0:	d023      	beq.n	4070ea <__register_exitproc+0x92>
  4070a2:	3202      	adds	r2, #2
  4070a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4070a8:	6828      	ldr	r0, [r5, #0]
  4070aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4070ae:	f7ff f817 	bl	4060e0 <__retarget_lock_release_recursive>
  4070b2:	2000      	movs	r0, #0
  4070b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4070b8:	4b17      	ldr	r3, [pc, #92]	; (407118 <__register_exitproc+0xc0>)
  4070ba:	b30b      	cbz	r3, 407100 <__register_exitproc+0xa8>
  4070bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4070c0:	f3af 8000 	nop.w
  4070c4:	4603      	mov	r3, r0
  4070c6:	b1d8      	cbz	r0, 407100 <__register_exitproc+0xa8>
  4070c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4070cc:	6002      	str	r2, [r0, #0]
  4070ce:	2100      	movs	r1, #0
  4070d0:	6041      	str	r1, [r0, #4]
  4070d2:	460a      	mov	r2, r1
  4070d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4070d8:	f04f 0e01 	mov.w	lr, #1
  4070dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4070e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4070e4:	2e00      	cmp	r6, #0
  4070e6:	d0dc      	beq.n	4070a2 <__register_exitproc+0x4a>
  4070e8:	e7cc      	b.n	407084 <__register_exitproc+0x2c>
  4070ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4070ee:	430c      	orrs	r4, r1
  4070f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4070f4:	e7d5      	b.n	4070a2 <__register_exitproc+0x4a>
  4070f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4070fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4070fe:	e7bb      	b.n	407078 <__register_exitproc+0x20>
  407100:	6828      	ldr	r0, [r5, #0]
  407102:	f7fe ffed 	bl	4060e0 <__retarget_lock_release_recursive>
  407106:	f04f 30ff 	mov.w	r0, #4294967295
  40710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40710e:	bf00      	nop
  407110:	20400450 	.word	0x20400450
  407114:	0040842c 	.word	0x0040842c
  407118:	00000000 	.word	0x00000000

0040711c <_calloc_r>:
  40711c:	b510      	push	{r4, lr}
  40711e:	fb02 f101 	mul.w	r1, r2, r1
  407122:	f7fe ffdf 	bl	4060e4 <_malloc_r>
  407126:	4604      	mov	r4, r0
  407128:	b1d8      	cbz	r0, 407162 <_calloc_r+0x46>
  40712a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40712e:	f022 0203 	bic.w	r2, r2, #3
  407132:	3a04      	subs	r2, #4
  407134:	2a24      	cmp	r2, #36	; 0x24
  407136:	d818      	bhi.n	40716a <_calloc_r+0x4e>
  407138:	2a13      	cmp	r2, #19
  40713a:	d914      	bls.n	407166 <_calloc_r+0x4a>
  40713c:	2300      	movs	r3, #0
  40713e:	2a1b      	cmp	r2, #27
  407140:	6003      	str	r3, [r0, #0]
  407142:	6043      	str	r3, [r0, #4]
  407144:	d916      	bls.n	407174 <_calloc_r+0x58>
  407146:	2a24      	cmp	r2, #36	; 0x24
  407148:	6083      	str	r3, [r0, #8]
  40714a:	60c3      	str	r3, [r0, #12]
  40714c:	bf11      	iteee	ne
  40714e:	f100 0210 	addne.w	r2, r0, #16
  407152:	6103      	streq	r3, [r0, #16]
  407154:	6143      	streq	r3, [r0, #20]
  407156:	f100 0218 	addeq.w	r2, r0, #24
  40715a:	2300      	movs	r3, #0
  40715c:	6013      	str	r3, [r2, #0]
  40715e:	6053      	str	r3, [r2, #4]
  407160:	6093      	str	r3, [r2, #8]
  407162:	4620      	mov	r0, r4
  407164:	bd10      	pop	{r4, pc}
  407166:	4602      	mov	r2, r0
  407168:	e7f7      	b.n	40715a <_calloc_r+0x3e>
  40716a:	2100      	movs	r1, #0
  40716c:	f7fc fd1e 	bl	403bac <memset>
  407170:	4620      	mov	r0, r4
  407172:	bd10      	pop	{r4, pc}
  407174:	f100 0208 	add.w	r2, r0, #8
  407178:	e7ef      	b.n	40715a <_calloc_r+0x3e>
  40717a:	bf00      	nop

0040717c <_malloc_trim_r>:
  40717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40717e:	4f24      	ldr	r7, [pc, #144]	; (407210 <_malloc_trim_r+0x94>)
  407180:	460c      	mov	r4, r1
  407182:	4606      	mov	r6, r0
  407184:	f7ff fb4e 	bl	406824 <__malloc_lock>
  407188:	68bb      	ldr	r3, [r7, #8]
  40718a:	685d      	ldr	r5, [r3, #4]
  40718c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407190:	310f      	adds	r1, #15
  407192:	f025 0503 	bic.w	r5, r5, #3
  407196:	4429      	add	r1, r5
  407198:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40719c:	f021 010f 	bic.w	r1, r1, #15
  4071a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4071a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4071a8:	db07      	blt.n	4071ba <_malloc_trim_r+0x3e>
  4071aa:	2100      	movs	r1, #0
  4071ac:	4630      	mov	r0, r6
  4071ae:	f7ff fe3f 	bl	406e30 <_sbrk_r>
  4071b2:	68bb      	ldr	r3, [r7, #8]
  4071b4:	442b      	add	r3, r5
  4071b6:	4298      	cmp	r0, r3
  4071b8:	d004      	beq.n	4071c4 <_malloc_trim_r+0x48>
  4071ba:	4630      	mov	r0, r6
  4071bc:	f7ff fb38 	bl	406830 <__malloc_unlock>
  4071c0:	2000      	movs	r0, #0
  4071c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4071c4:	4261      	negs	r1, r4
  4071c6:	4630      	mov	r0, r6
  4071c8:	f7ff fe32 	bl	406e30 <_sbrk_r>
  4071cc:	3001      	adds	r0, #1
  4071ce:	d00d      	beq.n	4071ec <_malloc_trim_r+0x70>
  4071d0:	4b10      	ldr	r3, [pc, #64]	; (407214 <_malloc_trim_r+0x98>)
  4071d2:	68ba      	ldr	r2, [r7, #8]
  4071d4:	6819      	ldr	r1, [r3, #0]
  4071d6:	1b2d      	subs	r5, r5, r4
  4071d8:	f045 0501 	orr.w	r5, r5, #1
  4071dc:	4630      	mov	r0, r6
  4071de:	1b09      	subs	r1, r1, r4
  4071e0:	6055      	str	r5, [r2, #4]
  4071e2:	6019      	str	r1, [r3, #0]
  4071e4:	f7ff fb24 	bl	406830 <__malloc_unlock>
  4071e8:	2001      	movs	r0, #1
  4071ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4071ec:	2100      	movs	r1, #0
  4071ee:	4630      	mov	r0, r6
  4071f0:	f7ff fe1e 	bl	406e30 <_sbrk_r>
  4071f4:	68ba      	ldr	r2, [r7, #8]
  4071f6:	1a83      	subs	r3, r0, r2
  4071f8:	2b0f      	cmp	r3, #15
  4071fa:	ddde      	ble.n	4071ba <_malloc_trim_r+0x3e>
  4071fc:	4c06      	ldr	r4, [pc, #24]	; (407218 <_malloc_trim_r+0x9c>)
  4071fe:	4905      	ldr	r1, [pc, #20]	; (407214 <_malloc_trim_r+0x98>)
  407200:	6824      	ldr	r4, [r4, #0]
  407202:	f043 0301 	orr.w	r3, r3, #1
  407206:	1b00      	subs	r0, r0, r4
  407208:	6053      	str	r3, [r2, #4]
  40720a:	6008      	str	r0, [r1, #0]
  40720c:	e7d5      	b.n	4071ba <_malloc_trim_r+0x3e>
  40720e:	bf00      	nop
  407210:	20400454 	.word	0x20400454
  407214:	20400c70 	.word	0x20400c70
  407218:	2040085c 	.word	0x2040085c

0040721c <_free_r>:
  40721c:	2900      	cmp	r1, #0
  40721e:	d044      	beq.n	4072aa <_free_r+0x8e>
  407220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407224:	460d      	mov	r5, r1
  407226:	4680      	mov	r8, r0
  407228:	f7ff fafc 	bl	406824 <__malloc_lock>
  40722c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407230:	4969      	ldr	r1, [pc, #420]	; (4073d8 <_free_r+0x1bc>)
  407232:	f027 0301 	bic.w	r3, r7, #1
  407236:	f1a5 0408 	sub.w	r4, r5, #8
  40723a:	18e2      	adds	r2, r4, r3
  40723c:	688e      	ldr	r6, [r1, #8]
  40723e:	6850      	ldr	r0, [r2, #4]
  407240:	42b2      	cmp	r2, r6
  407242:	f020 0003 	bic.w	r0, r0, #3
  407246:	d05e      	beq.n	407306 <_free_r+0xea>
  407248:	07fe      	lsls	r6, r7, #31
  40724a:	6050      	str	r0, [r2, #4]
  40724c:	d40b      	bmi.n	407266 <_free_r+0x4a>
  40724e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407252:	1be4      	subs	r4, r4, r7
  407254:	f101 0e08 	add.w	lr, r1, #8
  407258:	68a5      	ldr	r5, [r4, #8]
  40725a:	4575      	cmp	r5, lr
  40725c:	443b      	add	r3, r7
  40725e:	d06d      	beq.n	40733c <_free_r+0x120>
  407260:	68e7      	ldr	r7, [r4, #12]
  407262:	60ef      	str	r7, [r5, #12]
  407264:	60bd      	str	r5, [r7, #8]
  407266:	1815      	adds	r5, r2, r0
  407268:	686d      	ldr	r5, [r5, #4]
  40726a:	07ed      	lsls	r5, r5, #31
  40726c:	d53e      	bpl.n	4072ec <_free_r+0xd0>
  40726e:	f043 0201 	orr.w	r2, r3, #1
  407272:	6062      	str	r2, [r4, #4]
  407274:	50e3      	str	r3, [r4, r3]
  407276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40727a:	d217      	bcs.n	4072ac <_free_r+0x90>
  40727c:	08db      	lsrs	r3, r3, #3
  40727e:	1c58      	adds	r0, r3, #1
  407280:	109a      	asrs	r2, r3, #2
  407282:	684d      	ldr	r5, [r1, #4]
  407284:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407288:	60a7      	str	r7, [r4, #8]
  40728a:	2301      	movs	r3, #1
  40728c:	4093      	lsls	r3, r2
  40728e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407292:	432b      	orrs	r3, r5
  407294:	3a08      	subs	r2, #8
  407296:	60e2      	str	r2, [r4, #12]
  407298:	604b      	str	r3, [r1, #4]
  40729a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40729e:	60fc      	str	r4, [r7, #12]
  4072a0:	4640      	mov	r0, r8
  4072a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4072a6:	f7ff bac3 	b.w	406830 <__malloc_unlock>
  4072aa:	4770      	bx	lr
  4072ac:	0a5a      	lsrs	r2, r3, #9
  4072ae:	2a04      	cmp	r2, #4
  4072b0:	d852      	bhi.n	407358 <_free_r+0x13c>
  4072b2:	099a      	lsrs	r2, r3, #6
  4072b4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4072b8:	00ff      	lsls	r7, r7, #3
  4072ba:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4072be:	19c8      	adds	r0, r1, r7
  4072c0:	59ca      	ldr	r2, [r1, r7]
  4072c2:	3808      	subs	r0, #8
  4072c4:	4290      	cmp	r0, r2
  4072c6:	d04f      	beq.n	407368 <_free_r+0x14c>
  4072c8:	6851      	ldr	r1, [r2, #4]
  4072ca:	f021 0103 	bic.w	r1, r1, #3
  4072ce:	428b      	cmp	r3, r1
  4072d0:	d232      	bcs.n	407338 <_free_r+0x11c>
  4072d2:	6892      	ldr	r2, [r2, #8]
  4072d4:	4290      	cmp	r0, r2
  4072d6:	d1f7      	bne.n	4072c8 <_free_r+0xac>
  4072d8:	68c3      	ldr	r3, [r0, #12]
  4072da:	60a0      	str	r0, [r4, #8]
  4072dc:	60e3      	str	r3, [r4, #12]
  4072de:	609c      	str	r4, [r3, #8]
  4072e0:	60c4      	str	r4, [r0, #12]
  4072e2:	4640      	mov	r0, r8
  4072e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4072e8:	f7ff baa2 	b.w	406830 <__malloc_unlock>
  4072ec:	6895      	ldr	r5, [r2, #8]
  4072ee:	4f3b      	ldr	r7, [pc, #236]	; (4073dc <_free_r+0x1c0>)
  4072f0:	42bd      	cmp	r5, r7
  4072f2:	4403      	add	r3, r0
  4072f4:	d040      	beq.n	407378 <_free_r+0x15c>
  4072f6:	68d0      	ldr	r0, [r2, #12]
  4072f8:	60e8      	str	r0, [r5, #12]
  4072fa:	f043 0201 	orr.w	r2, r3, #1
  4072fe:	6085      	str	r5, [r0, #8]
  407300:	6062      	str	r2, [r4, #4]
  407302:	50e3      	str	r3, [r4, r3]
  407304:	e7b7      	b.n	407276 <_free_r+0x5a>
  407306:	07ff      	lsls	r7, r7, #31
  407308:	4403      	add	r3, r0
  40730a:	d407      	bmi.n	40731c <_free_r+0x100>
  40730c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407310:	1aa4      	subs	r4, r4, r2
  407312:	4413      	add	r3, r2
  407314:	68a0      	ldr	r0, [r4, #8]
  407316:	68e2      	ldr	r2, [r4, #12]
  407318:	60c2      	str	r2, [r0, #12]
  40731a:	6090      	str	r0, [r2, #8]
  40731c:	4a30      	ldr	r2, [pc, #192]	; (4073e0 <_free_r+0x1c4>)
  40731e:	6812      	ldr	r2, [r2, #0]
  407320:	f043 0001 	orr.w	r0, r3, #1
  407324:	4293      	cmp	r3, r2
  407326:	6060      	str	r0, [r4, #4]
  407328:	608c      	str	r4, [r1, #8]
  40732a:	d3b9      	bcc.n	4072a0 <_free_r+0x84>
  40732c:	4b2d      	ldr	r3, [pc, #180]	; (4073e4 <_free_r+0x1c8>)
  40732e:	4640      	mov	r0, r8
  407330:	6819      	ldr	r1, [r3, #0]
  407332:	f7ff ff23 	bl	40717c <_malloc_trim_r>
  407336:	e7b3      	b.n	4072a0 <_free_r+0x84>
  407338:	4610      	mov	r0, r2
  40733a:	e7cd      	b.n	4072d8 <_free_r+0xbc>
  40733c:	1811      	adds	r1, r2, r0
  40733e:	6849      	ldr	r1, [r1, #4]
  407340:	07c9      	lsls	r1, r1, #31
  407342:	d444      	bmi.n	4073ce <_free_r+0x1b2>
  407344:	6891      	ldr	r1, [r2, #8]
  407346:	68d2      	ldr	r2, [r2, #12]
  407348:	60ca      	str	r2, [r1, #12]
  40734a:	4403      	add	r3, r0
  40734c:	f043 0001 	orr.w	r0, r3, #1
  407350:	6091      	str	r1, [r2, #8]
  407352:	6060      	str	r0, [r4, #4]
  407354:	50e3      	str	r3, [r4, r3]
  407356:	e7a3      	b.n	4072a0 <_free_r+0x84>
  407358:	2a14      	cmp	r2, #20
  40735a:	d816      	bhi.n	40738a <_free_r+0x16e>
  40735c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407360:	00ff      	lsls	r7, r7, #3
  407362:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407366:	e7aa      	b.n	4072be <_free_r+0xa2>
  407368:	10aa      	asrs	r2, r5, #2
  40736a:	2301      	movs	r3, #1
  40736c:	684d      	ldr	r5, [r1, #4]
  40736e:	4093      	lsls	r3, r2
  407370:	432b      	orrs	r3, r5
  407372:	604b      	str	r3, [r1, #4]
  407374:	4603      	mov	r3, r0
  407376:	e7b0      	b.n	4072da <_free_r+0xbe>
  407378:	f043 0201 	orr.w	r2, r3, #1
  40737c:	614c      	str	r4, [r1, #20]
  40737e:	610c      	str	r4, [r1, #16]
  407380:	60e5      	str	r5, [r4, #12]
  407382:	60a5      	str	r5, [r4, #8]
  407384:	6062      	str	r2, [r4, #4]
  407386:	50e3      	str	r3, [r4, r3]
  407388:	e78a      	b.n	4072a0 <_free_r+0x84>
  40738a:	2a54      	cmp	r2, #84	; 0x54
  40738c:	d806      	bhi.n	40739c <_free_r+0x180>
  40738e:	0b1a      	lsrs	r2, r3, #12
  407390:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407394:	00ff      	lsls	r7, r7, #3
  407396:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40739a:	e790      	b.n	4072be <_free_r+0xa2>
  40739c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4073a0:	d806      	bhi.n	4073b0 <_free_r+0x194>
  4073a2:	0bda      	lsrs	r2, r3, #15
  4073a4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4073a8:	00ff      	lsls	r7, r7, #3
  4073aa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4073ae:	e786      	b.n	4072be <_free_r+0xa2>
  4073b0:	f240 5054 	movw	r0, #1364	; 0x554
  4073b4:	4282      	cmp	r2, r0
  4073b6:	d806      	bhi.n	4073c6 <_free_r+0x1aa>
  4073b8:	0c9a      	lsrs	r2, r3, #18
  4073ba:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4073be:	00ff      	lsls	r7, r7, #3
  4073c0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4073c4:	e77b      	b.n	4072be <_free_r+0xa2>
  4073c6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4073ca:	257e      	movs	r5, #126	; 0x7e
  4073cc:	e777      	b.n	4072be <_free_r+0xa2>
  4073ce:	f043 0101 	orr.w	r1, r3, #1
  4073d2:	6061      	str	r1, [r4, #4]
  4073d4:	6013      	str	r3, [r2, #0]
  4073d6:	e763      	b.n	4072a0 <_free_r+0x84>
  4073d8:	20400454 	.word	0x20400454
  4073dc:	2040045c 	.word	0x2040045c
  4073e0:	20400860 	.word	0x20400860
  4073e4:	20400ca0 	.word	0x20400ca0

004073e8 <__ascii_mbtowc>:
  4073e8:	b082      	sub	sp, #8
  4073ea:	b149      	cbz	r1, 407400 <__ascii_mbtowc+0x18>
  4073ec:	b15a      	cbz	r2, 407406 <__ascii_mbtowc+0x1e>
  4073ee:	b16b      	cbz	r3, 40740c <__ascii_mbtowc+0x24>
  4073f0:	7813      	ldrb	r3, [r2, #0]
  4073f2:	600b      	str	r3, [r1, #0]
  4073f4:	7812      	ldrb	r2, [r2, #0]
  4073f6:	1c10      	adds	r0, r2, #0
  4073f8:	bf18      	it	ne
  4073fa:	2001      	movne	r0, #1
  4073fc:	b002      	add	sp, #8
  4073fe:	4770      	bx	lr
  407400:	a901      	add	r1, sp, #4
  407402:	2a00      	cmp	r2, #0
  407404:	d1f3      	bne.n	4073ee <__ascii_mbtowc+0x6>
  407406:	4610      	mov	r0, r2
  407408:	b002      	add	sp, #8
  40740a:	4770      	bx	lr
  40740c:	f06f 0001 	mvn.w	r0, #1
  407410:	e7f4      	b.n	4073fc <__ascii_mbtowc+0x14>
  407412:	bf00      	nop

00407414 <memmove>:
  407414:	4288      	cmp	r0, r1
  407416:	b5f0      	push	{r4, r5, r6, r7, lr}
  407418:	d90d      	bls.n	407436 <memmove+0x22>
  40741a:	188b      	adds	r3, r1, r2
  40741c:	4298      	cmp	r0, r3
  40741e:	d20a      	bcs.n	407436 <memmove+0x22>
  407420:	1884      	adds	r4, r0, r2
  407422:	2a00      	cmp	r2, #0
  407424:	d051      	beq.n	4074ca <memmove+0xb6>
  407426:	4622      	mov	r2, r4
  407428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40742c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407430:	4299      	cmp	r1, r3
  407432:	d1f9      	bne.n	407428 <memmove+0x14>
  407434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407436:	2a0f      	cmp	r2, #15
  407438:	d948      	bls.n	4074cc <memmove+0xb8>
  40743a:	ea41 0300 	orr.w	r3, r1, r0
  40743e:	079b      	lsls	r3, r3, #30
  407440:	d146      	bne.n	4074d0 <memmove+0xbc>
  407442:	f100 0410 	add.w	r4, r0, #16
  407446:	f101 0310 	add.w	r3, r1, #16
  40744a:	4615      	mov	r5, r2
  40744c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407450:	f844 6c10 	str.w	r6, [r4, #-16]
  407454:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407458:	f844 6c0c 	str.w	r6, [r4, #-12]
  40745c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407460:	f844 6c08 	str.w	r6, [r4, #-8]
  407464:	3d10      	subs	r5, #16
  407466:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40746a:	f844 6c04 	str.w	r6, [r4, #-4]
  40746e:	2d0f      	cmp	r5, #15
  407470:	f103 0310 	add.w	r3, r3, #16
  407474:	f104 0410 	add.w	r4, r4, #16
  407478:	d8e8      	bhi.n	40744c <memmove+0x38>
  40747a:	f1a2 0310 	sub.w	r3, r2, #16
  40747e:	f023 030f 	bic.w	r3, r3, #15
  407482:	f002 0e0f 	and.w	lr, r2, #15
  407486:	3310      	adds	r3, #16
  407488:	f1be 0f03 	cmp.w	lr, #3
  40748c:	4419      	add	r1, r3
  40748e:	4403      	add	r3, r0
  407490:	d921      	bls.n	4074d6 <memmove+0xc2>
  407492:	1f1e      	subs	r6, r3, #4
  407494:	460d      	mov	r5, r1
  407496:	4674      	mov	r4, lr
  407498:	3c04      	subs	r4, #4
  40749a:	f855 7b04 	ldr.w	r7, [r5], #4
  40749e:	f846 7f04 	str.w	r7, [r6, #4]!
  4074a2:	2c03      	cmp	r4, #3
  4074a4:	d8f8      	bhi.n	407498 <memmove+0x84>
  4074a6:	f1ae 0404 	sub.w	r4, lr, #4
  4074aa:	f024 0403 	bic.w	r4, r4, #3
  4074ae:	3404      	adds	r4, #4
  4074b0:	4421      	add	r1, r4
  4074b2:	4423      	add	r3, r4
  4074b4:	f002 0203 	and.w	r2, r2, #3
  4074b8:	b162      	cbz	r2, 4074d4 <memmove+0xc0>
  4074ba:	3b01      	subs	r3, #1
  4074bc:	440a      	add	r2, r1
  4074be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4074c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4074c6:	428a      	cmp	r2, r1
  4074c8:	d1f9      	bne.n	4074be <memmove+0xaa>
  4074ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074cc:	4603      	mov	r3, r0
  4074ce:	e7f3      	b.n	4074b8 <memmove+0xa4>
  4074d0:	4603      	mov	r3, r0
  4074d2:	e7f2      	b.n	4074ba <memmove+0xa6>
  4074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074d6:	4672      	mov	r2, lr
  4074d8:	e7ee      	b.n	4074b8 <memmove+0xa4>
  4074da:	bf00      	nop

004074dc <_realloc_r>:
  4074dc:	2900      	cmp	r1, #0
  4074de:	f000 8095 	beq.w	40760c <_realloc_r+0x130>
  4074e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074e6:	460d      	mov	r5, r1
  4074e8:	4616      	mov	r6, r2
  4074ea:	b083      	sub	sp, #12
  4074ec:	4680      	mov	r8, r0
  4074ee:	f106 070b 	add.w	r7, r6, #11
  4074f2:	f7ff f997 	bl	406824 <__malloc_lock>
  4074f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4074fa:	2f16      	cmp	r7, #22
  4074fc:	f02e 0403 	bic.w	r4, lr, #3
  407500:	f1a5 0908 	sub.w	r9, r5, #8
  407504:	d83c      	bhi.n	407580 <_realloc_r+0xa4>
  407506:	2210      	movs	r2, #16
  407508:	4617      	mov	r7, r2
  40750a:	42be      	cmp	r6, r7
  40750c:	d83d      	bhi.n	40758a <_realloc_r+0xae>
  40750e:	4294      	cmp	r4, r2
  407510:	da43      	bge.n	40759a <_realloc_r+0xbe>
  407512:	4bc4      	ldr	r3, [pc, #784]	; (407824 <_realloc_r+0x348>)
  407514:	6899      	ldr	r1, [r3, #8]
  407516:	eb09 0004 	add.w	r0, r9, r4
  40751a:	4288      	cmp	r0, r1
  40751c:	f000 80b4 	beq.w	407688 <_realloc_r+0x1ac>
  407520:	6843      	ldr	r3, [r0, #4]
  407522:	f023 0101 	bic.w	r1, r3, #1
  407526:	4401      	add	r1, r0
  407528:	6849      	ldr	r1, [r1, #4]
  40752a:	07c9      	lsls	r1, r1, #31
  40752c:	d54c      	bpl.n	4075c8 <_realloc_r+0xec>
  40752e:	f01e 0f01 	tst.w	lr, #1
  407532:	f000 809b 	beq.w	40766c <_realloc_r+0x190>
  407536:	4631      	mov	r1, r6
  407538:	4640      	mov	r0, r8
  40753a:	f7fe fdd3 	bl	4060e4 <_malloc_r>
  40753e:	4606      	mov	r6, r0
  407540:	2800      	cmp	r0, #0
  407542:	d03a      	beq.n	4075ba <_realloc_r+0xde>
  407544:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407548:	f023 0301 	bic.w	r3, r3, #1
  40754c:	444b      	add	r3, r9
  40754e:	f1a0 0208 	sub.w	r2, r0, #8
  407552:	429a      	cmp	r2, r3
  407554:	f000 8121 	beq.w	40779a <_realloc_r+0x2be>
  407558:	1f22      	subs	r2, r4, #4
  40755a:	2a24      	cmp	r2, #36	; 0x24
  40755c:	f200 8107 	bhi.w	40776e <_realloc_r+0x292>
  407560:	2a13      	cmp	r2, #19
  407562:	f200 80db 	bhi.w	40771c <_realloc_r+0x240>
  407566:	4603      	mov	r3, r0
  407568:	462a      	mov	r2, r5
  40756a:	6811      	ldr	r1, [r2, #0]
  40756c:	6019      	str	r1, [r3, #0]
  40756e:	6851      	ldr	r1, [r2, #4]
  407570:	6059      	str	r1, [r3, #4]
  407572:	6892      	ldr	r2, [r2, #8]
  407574:	609a      	str	r2, [r3, #8]
  407576:	4629      	mov	r1, r5
  407578:	4640      	mov	r0, r8
  40757a:	f7ff fe4f 	bl	40721c <_free_r>
  40757e:	e01c      	b.n	4075ba <_realloc_r+0xde>
  407580:	f027 0707 	bic.w	r7, r7, #7
  407584:	2f00      	cmp	r7, #0
  407586:	463a      	mov	r2, r7
  407588:	dabf      	bge.n	40750a <_realloc_r+0x2e>
  40758a:	2600      	movs	r6, #0
  40758c:	230c      	movs	r3, #12
  40758e:	4630      	mov	r0, r6
  407590:	f8c8 3000 	str.w	r3, [r8]
  407594:	b003      	add	sp, #12
  407596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40759a:	462e      	mov	r6, r5
  40759c:	1be3      	subs	r3, r4, r7
  40759e:	2b0f      	cmp	r3, #15
  4075a0:	d81e      	bhi.n	4075e0 <_realloc_r+0x104>
  4075a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4075a6:	f003 0301 	and.w	r3, r3, #1
  4075aa:	4323      	orrs	r3, r4
  4075ac:	444c      	add	r4, r9
  4075ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4075b2:	6863      	ldr	r3, [r4, #4]
  4075b4:	f043 0301 	orr.w	r3, r3, #1
  4075b8:	6063      	str	r3, [r4, #4]
  4075ba:	4640      	mov	r0, r8
  4075bc:	f7ff f938 	bl	406830 <__malloc_unlock>
  4075c0:	4630      	mov	r0, r6
  4075c2:	b003      	add	sp, #12
  4075c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075c8:	f023 0303 	bic.w	r3, r3, #3
  4075cc:	18e1      	adds	r1, r4, r3
  4075ce:	4291      	cmp	r1, r2
  4075d0:	db1f      	blt.n	407612 <_realloc_r+0x136>
  4075d2:	68c3      	ldr	r3, [r0, #12]
  4075d4:	6882      	ldr	r2, [r0, #8]
  4075d6:	462e      	mov	r6, r5
  4075d8:	60d3      	str	r3, [r2, #12]
  4075da:	460c      	mov	r4, r1
  4075dc:	609a      	str	r2, [r3, #8]
  4075de:	e7dd      	b.n	40759c <_realloc_r+0xc0>
  4075e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4075e4:	eb09 0107 	add.w	r1, r9, r7
  4075e8:	f002 0201 	and.w	r2, r2, #1
  4075ec:	444c      	add	r4, r9
  4075ee:	f043 0301 	orr.w	r3, r3, #1
  4075f2:	4317      	orrs	r7, r2
  4075f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4075f8:	604b      	str	r3, [r1, #4]
  4075fa:	6863      	ldr	r3, [r4, #4]
  4075fc:	f043 0301 	orr.w	r3, r3, #1
  407600:	3108      	adds	r1, #8
  407602:	6063      	str	r3, [r4, #4]
  407604:	4640      	mov	r0, r8
  407606:	f7ff fe09 	bl	40721c <_free_r>
  40760a:	e7d6      	b.n	4075ba <_realloc_r+0xde>
  40760c:	4611      	mov	r1, r2
  40760e:	f7fe bd69 	b.w	4060e4 <_malloc_r>
  407612:	f01e 0f01 	tst.w	lr, #1
  407616:	d18e      	bne.n	407536 <_realloc_r+0x5a>
  407618:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40761c:	eba9 0a01 	sub.w	sl, r9, r1
  407620:	f8da 1004 	ldr.w	r1, [sl, #4]
  407624:	f021 0103 	bic.w	r1, r1, #3
  407628:	440b      	add	r3, r1
  40762a:	4423      	add	r3, r4
  40762c:	4293      	cmp	r3, r2
  40762e:	db25      	blt.n	40767c <_realloc_r+0x1a0>
  407630:	68c2      	ldr	r2, [r0, #12]
  407632:	6881      	ldr	r1, [r0, #8]
  407634:	4656      	mov	r6, sl
  407636:	60ca      	str	r2, [r1, #12]
  407638:	6091      	str	r1, [r2, #8]
  40763a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40763e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407642:	1f22      	subs	r2, r4, #4
  407644:	2a24      	cmp	r2, #36	; 0x24
  407646:	60c1      	str	r1, [r0, #12]
  407648:	6088      	str	r0, [r1, #8]
  40764a:	f200 8094 	bhi.w	407776 <_realloc_r+0x29a>
  40764e:	2a13      	cmp	r2, #19
  407650:	d96f      	bls.n	407732 <_realloc_r+0x256>
  407652:	6829      	ldr	r1, [r5, #0]
  407654:	f8ca 1008 	str.w	r1, [sl, #8]
  407658:	6869      	ldr	r1, [r5, #4]
  40765a:	f8ca 100c 	str.w	r1, [sl, #12]
  40765e:	2a1b      	cmp	r2, #27
  407660:	f200 80a2 	bhi.w	4077a8 <_realloc_r+0x2cc>
  407664:	3508      	adds	r5, #8
  407666:	f10a 0210 	add.w	r2, sl, #16
  40766a:	e063      	b.n	407734 <_realloc_r+0x258>
  40766c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407670:	eba9 0a03 	sub.w	sl, r9, r3
  407674:	f8da 1004 	ldr.w	r1, [sl, #4]
  407678:	f021 0103 	bic.w	r1, r1, #3
  40767c:	1863      	adds	r3, r4, r1
  40767e:	4293      	cmp	r3, r2
  407680:	f6ff af59 	blt.w	407536 <_realloc_r+0x5a>
  407684:	4656      	mov	r6, sl
  407686:	e7d8      	b.n	40763a <_realloc_r+0x15e>
  407688:	6841      	ldr	r1, [r0, #4]
  40768a:	f021 0b03 	bic.w	fp, r1, #3
  40768e:	44a3      	add	fp, r4
  407690:	f107 0010 	add.w	r0, r7, #16
  407694:	4583      	cmp	fp, r0
  407696:	da56      	bge.n	407746 <_realloc_r+0x26a>
  407698:	f01e 0f01 	tst.w	lr, #1
  40769c:	f47f af4b 	bne.w	407536 <_realloc_r+0x5a>
  4076a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4076a4:	eba9 0a01 	sub.w	sl, r9, r1
  4076a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076ac:	f021 0103 	bic.w	r1, r1, #3
  4076b0:	448b      	add	fp, r1
  4076b2:	4558      	cmp	r0, fp
  4076b4:	dce2      	bgt.n	40767c <_realloc_r+0x1a0>
  4076b6:	4656      	mov	r6, sl
  4076b8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4076bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4076c0:	1f22      	subs	r2, r4, #4
  4076c2:	2a24      	cmp	r2, #36	; 0x24
  4076c4:	60c1      	str	r1, [r0, #12]
  4076c6:	6088      	str	r0, [r1, #8]
  4076c8:	f200 808f 	bhi.w	4077ea <_realloc_r+0x30e>
  4076cc:	2a13      	cmp	r2, #19
  4076ce:	f240 808a 	bls.w	4077e6 <_realloc_r+0x30a>
  4076d2:	6829      	ldr	r1, [r5, #0]
  4076d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4076d8:	6869      	ldr	r1, [r5, #4]
  4076da:	f8ca 100c 	str.w	r1, [sl, #12]
  4076de:	2a1b      	cmp	r2, #27
  4076e0:	f200 808a 	bhi.w	4077f8 <_realloc_r+0x31c>
  4076e4:	3508      	adds	r5, #8
  4076e6:	f10a 0210 	add.w	r2, sl, #16
  4076ea:	6829      	ldr	r1, [r5, #0]
  4076ec:	6011      	str	r1, [r2, #0]
  4076ee:	6869      	ldr	r1, [r5, #4]
  4076f0:	6051      	str	r1, [r2, #4]
  4076f2:	68a9      	ldr	r1, [r5, #8]
  4076f4:	6091      	str	r1, [r2, #8]
  4076f6:	eb0a 0107 	add.w	r1, sl, r7
  4076fa:	ebab 0207 	sub.w	r2, fp, r7
  4076fe:	f042 0201 	orr.w	r2, r2, #1
  407702:	6099      	str	r1, [r3, #8]
  407704:	604a      	str	r2, [r1, #4]
  407706:	f8da 3004 	ldr.w	r3, [sl, #4]
  40770a:	f003 0301 	and.w	r3, r3, #1
  40770e:	431f      	orrs	r7, r3
  407710:	4640      	mov	r0, r8
  407712:	f8ca 7004 	str.w	r7, [sl, #4]
  407716:	f7ff f88b 	bl	406830 <__malloc_unlock>
  40771a:	e751      	b.n	4075c0 <_realloc_r+0xe4>
  40771c:	682b      	ldr	r3, [r5, #0]
  40771e:	6003      	str	r3, [r0, #0]
  407720:	686b      	ldr	r3, [r5, #4]
  407722:	6043      	str	r3, [r0, #4]
  407724:	2a1b      	cmp	r2, #27
  407726:	d82d      	bhi.n	407784 <_realloc_r+0x2a8>
  407728:	f100 0308 	add.w	r3, r0, #8
  40772c:	f105 0208 	add.w	r2, r5, #8
  407730:	e71b      	b.n	40756a <_realloc_r+0x8e>
  407732:	4632      	mov	r2, r6
  407734:	6829      	ldr	r1, [r5, #0]
  407736:	6011      	str	r1, [r2, #0]
  407738:	6869      	ldr	r1, [r5, #4]
  40773a:	6051      	str	r1, [r2, #4]
  40773c:	68a9      	ldr	r1, [r5, #8]
  40773e:	6091      	str	r1, [r2, #8]
  407740:	461c      	mov	r4, r3
  407742:	46d1      	mov	r9, sl
  407744:	e72a      	b.n	40759c <_realloc_r+0xc0>
  407746:	eb09 0107 	add.w	r1, r9, r7
  40774a:	ebab 0b07 	sub.w	fp, fp, r7
  40774e:	f04b 0201 	orr.w	r2, fp, #1
  407752:	6099      	str	r1, [r3, #8]
  407754:	604a      	str	r2, [r1, #4]
  407756:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40775a:	f003 0301 	and.w	r3, r3, #1
  40775e:	431f      	orrs	r7, r3
  407760:	4640      	mov	r0, r8
  407762:	f845 7c04 	str.w	r7, [r5, #-4]
  407766:	f7ff f863 	bl	406830 <__malloc_unlock>
  40776a:	462e      	mov	r6, r5
  40776c:	e728      	b.n	4075c0 <_realloc_r+0xe4>
  40776e:	4629      	mov	r1, r5
  407770:	f7ff fe50 	bl	407414 <memmove>
  407774:	e6ff      	b.n	407576 <_realloc_r+0x9a>
  407776:	4629      	mov	r1, r5
  407778:	4630      	mov	r0, r6
  40777a:	461c      	mov	r4, r3
  40777c:	46d1      	mov	r9, sl
  40777e:	f7ff fe49 	bl	407414 <memmove>
  407782:	e70b      	b.n	40759c <_realloc_r+0xc0>
  407784:	68ab      	ldr	r3, [r5, #8]
  407786:	6083      	str	r3, [r0, #8]
  407788:	68eb      	ldr	r3, [r5, #12]
  40778a:	60c3      	str	r3, [r0, #12]
  40778c:	2a24      	cmp	r2, #36	; 0x24
  40778e:	d017      	beq.n	4077c0 <_realloc_r+0x2e4>
  407790:	f100 0310 	add.w	r3, r0, #16
  407794:	f105 0210 	add.w	r2, r5, #16
  407798:	e6e7      	b.n	40756a <_realloc_r+0x8e>
  40779a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40779e:	f023 0303 	bic.w	r3, r3, #3
  4077a2:	441c      	add	r4, r3
  4077a4:	462e      	mov	r6, r5
  4077a6:	e6f9      	b.n	40759c <_realloc_r+0xc0>
  4077a8:	68a9      	ldr	r1, [r5, #8]
  4077aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4077ae:	68e9      	ldr	r1, [r5, #12]
  4077b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4077b4:	2a24      	cmp	r2, #36	; 0x24
  4077b6:	d00c      	beq.n	4077d2 <_realloc_r+0x2f6>
  4077b8:	3510      	adds	r5, #16
  4077ba:	f10a 0218 	add.w	r2, sl, #24
  4077be:	e7b9      	b.n	407734 <_realloc_r+0x258>
  4077c0:	692b      	ldr	r3, [r5, #16]
  4077c2:	6103      	str	r3, [r0, #16]
  4077c4:	696b      	ldr	r3, [r5, #20]
  4077c6:	6143      	str	r3, [r0, #20]
  4077c8:	f105 0218 	add.w	r2, r5, #24
  4077cc:	f100 0318 	add.w	r3, r0, #24
  4077d0:	e6cb      	b.n	40756a <_realloc_r+0x8e>
  4077d2:	692a      	ldr	r2, [r5, #16]
  4077d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4077d8:	696a      	ldr	r2, [r5, #20]
  4077da:	f8ca 201c 	str.w	r2, [sl, #28]
  4077de:	3518      	adds	r5, #24
  4077e0:	f10a 0220 	add.w	r2, sl, #32
  4077e4:	e7a6      	b.n	407734 <_realloc_r+0x258>
  4077e6:	4632      	mov	r2, r6
  4077e8:	e77f      	b.n	4076ea <_realloc_r+0x20e>
  4077ea:	4629      	mov	r1, r5
  4077ec:	4630      	mov	r0, r6
  4077ee:	9301      	str	r3, [sp, #4]
  4077f0:	f7ff fe10 	bl	407414 <memmove>
  4077f4:	9b01      	ldr	r3, [sp, #4]
  4077f6:	e77e      	b.n	4076f6 <_realloc_r+0x21a>
  4077f8:	68a9      	ldr	r1, [r5, #8]
  4077fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4077fe:	68e9      	ldr	r1, [r5, #12]
  407800:	f8ca 1014 	str.w	r1, [sl, #20]
  407804:	2a24      	cmp	r2, #36	; 0x24
  407806:	d003      	beq.n	407810 <_realloc_r+0x334>
  407808:	3510      	adds	r5, #16
  40780a:	f10a 0218 	add.w	r2, sl, #24
  40780e:	e76c      	b.n	4076ea <_realloc_r+0x20e>
  407810:	692a      	ldr	r2, [r5, #16]
  407812:	f8ca 2018 	str.w	r2, [sl, #24]
  407816:	696a      	ldr	r2, [r5, #20]
  407818:	f8ca 201c 	str.w	r2, [sl, #28]
  40781c:	3518      	adds	r5, #24
  40781e:	f10a 0220 	add.w	r2, sl, #32
  407822:	e762      	b.n	4076ea <_realloc_r+0x20e>
  407824:	20400454 	.word	0x20400454

00407828 <__ascii_wctomb>:
  407828:	b121      	cbz	r1, 407834 <__ascii_wctomb+0xc>
  40782a:	2aff      	cmp	r2, #255	; 0xff
  40782c:	d804      	bhi.n	407838 <__ascii_wctomb+0x10>
  40782e:	700a      	strb	r2, [r1, #0]
  407830:	2001      	movs	r0, #1
  407832:	4770      	bx	lr
  407834:	4608      	mov	r0, r1
  407836:	4770      	bx	lr
  407838:	238a      	movs	r3, #138	; 0x8a
  40783a:	6003      	str	r3, [r0, #0]
  40783c:	f04f 30ff 	mov.w	r0, #4294967295
  407840:	4770      	bx	lr
  407842:	bf00      	nop

00407844 <__gedf2>:
  407844:	f04f 3cff 	mov.w	ip, #4294967295
  407848:	e006      	b.n	407858 <__cmpdf2+0x4>
  40784a:	bf00      	nop

0040784c <__ledf2>:
  40784c:	f04f 0c01 	mov.w	ip, #1
  407850:	e002      	b.n	407858 <__cmpdf2+0x4>
  407852:	bf00      	nop

00407854 <__cmpdf2>:
  407854:	f04f 0c01 	mov.w	ip, #1
  407858:	f84d cd04 	str.w	ip, [sp, #-4]!
  40785c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407860:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407864:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407868:	bf18      	it	ne
  40786a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40786e:	d01b      	beq.n	4078a8 <__cmpdf2+0x54>
  407870:	b001      	add	sp, #4
  407872:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407876:	bf0c      	ite	eq
  407878:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40787c:	ea91 0f03 	teqne	r1, r3
  407880:	bf02      	ittt	eq
  407882:	ea90 0f02 	teqeq	r0, r2
  407886:	2000      	moveq	r0, #0
  407888:	4770      	bxeq	lr
  40788a:	f110 0f00 	cmn.w	r0, #0
  40788e:	ea91 0f03 	teq	r1, r3
  407892:	bf58      	it	pl
  407894:	4299      	cmppl	r1, r3
  407896:	bf08      	it	eq
  407898:	4290      	cmpeq	r0, r2
  40789a:	bf2c      	ite	cs
  40789c:	17d8      	asrcs	r0, r3, #31
  40789e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4078a2:	f040 0001 	orr.w	r0, r0, #1
  4078a6:	4770      	bx	lr
  4078a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078b0:	d102      	bne.n	4078b8 <__cmpdf2+0x64>
  4078b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4078b6:	d107      	bne.n	4078c8 <__cmpdf2+0x74>
  4078b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4078bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078c0:	d1d6      	bne.n	407870 <__cmpdf2+0x1c>
  4078c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4078c6:	d0d3      	beq.n	407870 <__cmpdf2+0x1c>
  4078c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4078cc:	4770      	bx	lr
  4078ce:	bf00      	nop

004078d0 <__aeabi_cdrcmple>:
  4078d0:	4684      	mov	ip, r0
  4078d2:	4610      	mov	r0, r2
  4078d4:	4662      	mov	r2, ip
  4078d6:	468c      	mov	ip, r1
  4078d8:	4619      	mov	r1, r3
  4078da:	4663      	mov	r3, ip
  4078dc:	e000      	b.n	4078e0 <__aeabi_cdcmpeq>
  4078de:	bf00      	nop

004078e0 <__aeabi_cdcmpeq>:
  4078e0:	b501      	push	{r0, lr}
  4078e2:	f7ff ffb7 	bl	407854 <__cmpdf2>
  4078e6:	2800      	cmp	r0, #0
  4078e8:	bf48      	it	mi
  4078ea:	f110 0f00 	cmnmi.w	r0, #0
  4078ee:	bd01      	pop	{r0, pc}

004078f0 <__aeabi_dcmpeq>:
  4078f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078f4:	f7ff fff4 	bl	4078e0 <__aeabi_cdcmpeq>
  4078f8:	bf0c      	ite	eq
  4078fa:	2001      	moveq	r0, #1
  4078fc:	2000      	movne	r0, #0
  4078fe:	f85d fb08 	ldr.w	pc, [sp], #8
  407902:	bf00      	nop

00407904 <__aeabi_dcmplt>:
  407904:	f84d ed08 	str.w	lr, [sp, #-8]!
  407908:	f7ff ffea 	bl	4078e0 <__aeabi_cdcmpeq>
  40790c:	bf34      	ite	cc
  40790e:	2001      	movcc	r0, #1
  407910:	2000      	movcs	r0, #0
  407912:	f85d fb08 	ldr.w	pc, [sp], #8
  407916:	bf00      	nop

00407918 <__aeabi_dcmple>:
  407918:	f84d ed08 	str.w	lr, [sp, #-8]!
  40791c:	f7ff ffe0 	bl	4078e0 <__aeabi_cdcmpeq>
  407920:	bf94      	ite	ls
  407922:	2001      	movls	r0, #1
  407924:	2000      	movhi	r0, #0
  407926:	f85d fb08 	ldr.w	pc, [sp], #8
  40792a:	bf00      	nop

0040792c <__aeabi_dcmpge>:
  40792c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407930:	f7ff ffce 	bl	4078d0 <__aeabi_cdrcmple>
  407934:	bf94      	ite	ls
  407936:	2001      	movls	r0, #1
  407938:	2000      	movhi	r0, #0
  40793a:	f85d fb08 	ldr.w	pc, [sp], #8
  40793e:	bf00      	nop

00407940 <__aeabi_dcmpgt>:
  407940:	f84d ed08 	str.w	lr, [sp, #-8]!
  407944:	f7ff ffc4 	bl	4078d0 <__aeabi_cdrcmple>
  407948:	bf34      	ite	cc
  40794a:	2001      	movcc	r0, #1
  40794c:	2000      	movcs	r0, #0
  40794e:	f85d fb08 	ldr.w	pc, [sp], #8
  407952:	bf00      	nop

00407954 <__aeabi_dcmpun>:
  407954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40795c:	d102      	bne.n	407964 <__aeabi_dcmpun+0x10>
  40795e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407962:	d10a      	bne.n	40797a <__aeabi_dcmpun+0x26>
  407964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40796c:	d102      	bne.n	407974 <__aeabi_dcmpun+0x20>
  40796e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407972:	d102      	bne.n	40797a <__aeabi_dcmpun+0x26>
  407974:	f04f 0000 	mov.w	r0, #0
  407978:	4770      	bx	lr
  40797a:	f04f 0001 	mov.w	r0, #1
  40797e:	4770      	bx	lr

00407980 <__aeabi_d2iz>:
  407980:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407988:	d215      	bcs.n	4079b6 <__aeabi_d2iz+0x36>
  40798a:	d511      	bpl.n	4079b0 <__aeabi_d2iz+0x30>
  40798c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407994:	d912      	bls.n	4079bc <__aeabi_d2iz+0x3c>
  407996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40799a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40799e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4079a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4079a6:	fa23 f002 	lsr.w	r0, r3, r2
  4079aa:	bf18      	it	ne
  4079ac:	4240      	negne	r0, r0
  4079ae:	4770      	bx	lr
  4079b0:	f04f 0000 	mov.w	r0, #0
  4079b4:	4770      	bx	lr
  4079b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4079ba:	d105      	bne.n	4079c8 <__aeabi_d2iz+0x48>
  4079bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4079c0:	bf08      	it	eq
  4079c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4079c6:	4770      	bx	lr
  4079c8:	f04f 0000 	mov.w	r0, #0
  4079cc:	4770      	bx	lr
  4079ce:	bf00      	nop

004079d0 <sysfont_glyphs>:
	...
  4079f0:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  407a00:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  407a10:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  407a28:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  407a38:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  407a48:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  407a60:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  407a70:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  407a80:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  407a98:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  407ab4:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407ac4:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  407ad4:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  407ae4:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  407b0c:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  407b34:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  407b44:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  407b68:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  407b78:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  407b88:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  407b98:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  407bb0:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  407bc0:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  407bd0:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  407be8:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  407bf8:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  407c08:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  407c20:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  407c30:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  407c40:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  407c58:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  407c68:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  407c78:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  407c90:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  407ca0:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  407cb0:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  407ccc:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  407cdc:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  407cec:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  407d08:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  407d20:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  407d38:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  407d48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  407d58:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  407d70:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  407d80:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  407d90:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  407da8:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  407db8:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  407dc8:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  407de0:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  407df0:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407e00:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  407e18:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  407e28:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  407e38:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  407e50:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407e60:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407e70:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  407e88:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  407e98:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  407ea8:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  407ec0:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  407ed0:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  407ee0:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  407ef8:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  407f08:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  407f18:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  407f30:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  407f40:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  407f50:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  407f68:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  407f78:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407f88:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  407fa0:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  407fb0:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  407fc0:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  407fd8:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  407fe8:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  407ff8:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  408010:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  408020:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  408030:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  408048:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  408058:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  408068:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  408080:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  408090:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  4080a0:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  4080c8:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  4080d8:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  4080f4:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  40810c:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  40811c:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  40812c:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  408144:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  408154:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  408164:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  40817c:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  40818c:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  40819c:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  4081ac:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  4081bc:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  4081cc:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  4081dc:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  4081ec:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  4081fc:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  40820c:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  408224:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  408234:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  408244:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  408260:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  40827c:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  408298:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  4082a8:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  4082b8:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4082d0:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  4082ec:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  408308:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  408324:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  408340:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  40835c:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  408378:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  408394:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  4083a4:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  4083b4:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4083c4:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4083d4:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4083e4:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4083f4:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  408404:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  408414:	0000 0000 6e69 7469 0000 0000 2020 2020     ....init....    
  408424:	0020 0000 6625 0000                          ...%f..

0040842c <_global_impure_ptr>:
  40842c:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  40843c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40844c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40845c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40846c:	296c 0000 0030 0000                         l)..0...

00408474 <blanks.7223>:
  408474:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408484 <zeroes.7224>:
  408484:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408494:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4084a4:	0000 0000                                   ....

004084a8 <__mprec_bigtens>:
  4084a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4084b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4084c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004084d0 <__mprec_tens>:
  4084d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4084e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4084f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408500:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408510:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  408520:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  408530:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  408540:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  408550:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  408560:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  408570:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  408580:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  408590:	9db4 79d9 7843 44ea                         ...yCx.D

00408598 <p05.6055>:
  408598:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4085a8:	4f50 4953 0058 0000 002e 0000               POSIX.......

004085b4 <_ctype_>:
  4085b4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4085c4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4085d4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4085e4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4085f4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408604:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408614:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408624:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408634:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004086b8 <_init>:
  4086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4086ba:	bf00      	nop
  4086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4086be:	bc08      	pop	{r3}
  4086c0:	469e      	mov	lr, r3
  4086c2:	4770      	bx	lr

004086c4 <__init_array_start>:
  4086c4:	004050f1 	.word	0x004050f1

004086c8 <__frame_dummy_init_array_entry>:
  4086c8:	00400165                                e.@.

004086cc <_fini>:
  4086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4086ce:	bf00      	nop
  4086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4086d2:	bc08      	pop	{r3}
  4086d4:	469e      	mov	lr, r3
  4086d6:	4770      	bx	lr

004086d8 <__fini_array_start>:
  4086d8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 79d0 0040 0e0a 7d20               .....y@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <freq>:
20400020:	21ac 0000                                   .!..

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cb0 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	7829 0040 73e9 0040 0000 0000 85b4 0040     )x@..s@.......@.
20400954:	85b0 0040 8450 0040 8450 0040 8450 0040     ..@.P.@.P.@.P.@.
20400964:	8450 0040 8450 0040 8450 0040 8450 0040     P.@.P.@.P.@.P.@.
20400974:	8450 0040 8450 0040 ffff ffff ffff ffff     P.@.P.@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
