
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004824  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404824  00404824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000454  20400000  0040482c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002cc  20400454  00404c80  00020454  2**2
                  ALLOC
  4 .stack        00002000  20400720  00404f4c  00020454  2**0
                  ALLOC
  5 .heap         00000200  20402720  00406f4c  00020454  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020482  2**0
                  CONTENTS, READONLY
  8 .debug_info   000168fd  00000000  00000000  000204db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003025  00000000  00000000  00036dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000584c  00000000  00000000  00039dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a78  00000000  00000000  0003f649  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  000400c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009f65  00000000  00000000  00040ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f19c  00000000  00000000  0004aa26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008fcf0  00000000  00000000  00059bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d18  00000000  00000000  000e98b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 27 40 20 79 29 40 00 29 2a 40 00 29 2a 40 00      '@ y)@.)*@.)*@.
  400010:	29 2a 40 00 29 2a 40 00 29 2a 40 00 00 00 00 00     )*@.)*@.)*@.....
	...
  40002c:	29 2a 40 00 29 2a 40 00 00 00 00 00 29 2a 40 00     )*@.)*@.....)*@.
  40003c:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  40004c:	3d 2e 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     =.@.)*@.)*@.)*@.
  40005c:	29 2a 40 00 29 2a 40 00 00 00 00 00 31 25 40 00     )*@.)*@.....1%@.
  40006c:	49 25 40 00 61 25 40 00 29 2a 40 00 29 2a 40 00     I%@.a%@.)*@.)*@.
  40007c:	29 2a 40 00 79 25 40 00 91 25 40 00 29 2a 40 00     )*@.y%@..%@.)*@.
  40008c:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  40009c:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000ac:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000bc:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000cc:	29 2a 40 00 00 00 00 00 29 2a 40 00 00 00 00 00     )*@.....)*@.....
  4000dc:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000ec:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  4000fc:	29 2a 40 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     )*@.)*@.)*@.)*@.
  40010c:	29 2a 40 00 29 2a 40 00 00 00 00 00 00 00 00 00     )*@.)*@.........
  40011c:	00 00 00 00 29 2a 40 00 29 2a 40 00 29 2a 40 00     ....)*@.)*@.)*@.
  40012c:	29 2a 40 00 29 2a 40 00 00 00 00 00 29 2a 40 00     )*@.)*@.....)*@.
  40013c:	29 2a 40 00                                         )*@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400454 	.word	0x20400454
  40015c:	00000000 	.word	0x00000000
  400160:	0040482c 	.word	0x0040482c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040482c 	.word	0x0040482c
  4001a0:	20400458 	.word	0x20400458
  4001a4:	0040482c 	.word	0x0040482c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
  4001b4:	460b      	mov	r3, r1
  4001b6:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001b8:	887a      	ldrh	r2, [r7, #2]
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <rtt_init+0x2c>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	4313      	orrs	r3, r2
  4001c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  4001c8:	2300      	movs	r3, #0
}
  4001ca:	4618      	mov	r0, r3
  4001cc:	370c      	adds	r7, #12
  4001ce:	46bd      	mov	sp, r7
  4001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	20400470 	.word	0x20400470

004001dc <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  4001dc:	b480      	push	{r7}
  4001de:	b083      	sub	sp, #12
  4001e0:	af00      	add	r7, sp, #0
  4001e2:	6078      	str	r0, [r7, #4]
  4001e4:	460b      	mov	r3, r1
  4001e6:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  4001e8:	78fb      	ldrb	r3, [r7, #3]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	d00d      	beq.n	40020a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <rtt_sel_source+0x54>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001f6:	4a0e      	ldr	r2, [pc, #56]	; (400230 <rtt_sel_source+0x54>)
  4001f8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	4b0c      	ldr	r3, [pc, #48]	; (400230 <rtt_sel_source+0x54>)
  400200:	681b      	ldr	r3, [r3, #0]
  400202:	431a      	orrs	r2, r3
  400204:	687b      	ldr	r3, [r7, #4]
  400206:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400208:	e00c      	b.n	400224 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40020a:	4b09      	ldr	r3, [pc, #36]	; (400230 <rtt_sel_source+0x54>)
  40020c:	681b      	ldr	r3, [r3, #0]
  40020e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400212:	4a07      	ldr	r2, [pc, #28]	; (400230 <rtt_sel_source+0x54>)
  400214:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400216:	687b      	ldr	r3, [r7, #4]
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <rtt_sel_source+0x54>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	431a      	orrs	r2, r3
  400220:	687b      	ldr	r3, [r7, #4]
  400222:	601a      	str	r2, [r3, #0]
}
  400224:	bf00      	nop
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr
  400230:	20400470 	.word	0x20400470

00400234 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400234:	b480      	push	{r7}
  400236:	b085      	sub	sp, #20
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
  40023c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400244:	68fa      	ldr	r2, [r7, #12]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	4313      	orrs	r3, r2
  40024a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <rtt_enable_interrupt+0x34>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4313      	orrs	r3, r2
  400254:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	68fa      	ldr	r2, [r7, #12]
  40025a:	601a      	str	r2, [r3, #0]
}
  40025c:	bf00      	nop
  40025e:	3714      	adds	r7, #20
  400260:	46bd      	mov	sp, r7
  400262:	f85d 7b04 	ldr.w	r7, [sp], #4
  400266:	4770      	bx	lr
  400268:	20400470 	.word	0x20400470

0040026c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  40026c:	b480      	push	{r7}
  40026e:	b085      	sub	sp, #20
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400276:	2300      	movs	r3, #0
  400278:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	681b      	ldr	r3, [r3, #0]
  40027e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400280:	683b      	ldr	r3, [r7, #0]
  400282:	43db      	mvns	r3, r3
  400284:	68fa      	ldr	r2, [r7, #12]
  400286:	4013      	ands	r3, r2
  400288:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40028a:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <rtt_disable_interrupt+0x3c>)
  40028c:	681b      	ldr	r3, [r3, #0]
  40028e:	68fa      	ldr	r2, [r7, #12]
  400290:	4313      	orrs	r3, r2
  400292:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	68fa      	ldr	r2, [r7, #12]
  400298:	601a      	str	r2, [r3, #0]
}
  40029a:	bf00      	nop
  40029c:	3714      	adds	r7, #20
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	20400470 	.word	0x20400470

004002ac <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b085      	sub	sp, #20
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	689b      	ldr	r3, [r3, #8]
  4002b8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  4002ba:	e002      	b.n	4002c2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  4002bc:	687b      	ldr	r3, [r7, #4]
  4002be:	689b      	ldr	r3, [r3, #8]
  4002c0:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  4002c2:	687b      	ldr	r3, [r7, #4]
  4002c4:	689a      	ldr	r2, [r3, #8]
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	429a      	cmp	r2, r3
  4002ca:	d1f7      	bne.n	4002bc <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  4002cc:	68fb      	ldr	r3, [r7, #12]
}
  4002ce:	4618      	mov	r0, r3
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4002da:	b480      	push	{r7}
  4002dc:	b083      	sub	sp, #12
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4002e2:	687b      	ldr	r3, [r7, #4]
  4002e4:	68db      	ldr	r3, [r3, #12]
}
  4002e6:	4618      	mov	r0, r3
  4002e8:	370c      	adds	r7, #12
  4002ea:	46bd      	mov	sp, r7
  4002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f0:	4770      	bx	lr
	...

004002f4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4002fe:	687b      	ldr	r3, [r7, #4]
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400306:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40030c:	480d      	ldr	r0, [pc, #52]	; (400344 <rtt_write_alarm_time+0x50>)
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <rtt_write_alarm_time+0x54>)
  400310:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400312:	683b      	ldr	r3, [r7, #0]
  400314:	2b00      	cmp	r3, #0
  400316:	d104      	bne.n	400322 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	f04f 32ff 	mov.w	r2, #4294967295
  40031e:	605a      	str	r2, [r3, #4]
  400320:	e003      	b.n	40032a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	1e5a      	subs	r2, r3, #1
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	2b00      	cmp	r3, #0
  40032e:	d004      	beq.n	40033a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400334:	4803      	ldr	r0, [pc, #12]	; (400344 <rtt_write_alarm_time+0x50>)
  400336:	4b05      	ldr	r3, [pc, #20]	; (40034c <rtt_write_alarm_time+0x58>)
  400338:	4798      	blx	r3
	}

	return 0;
  40033a:	2300      	movs	r3, #0
}
  40033c:	4618      	mov	r0, r3
  40033e:	3710      	adds	r7, #16
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	400e1830 	.word	0x400e1830
  400348:	0040026d 	.word	0x0040026d
  40034c:	00400235 	.word	0x00400235

00400350 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	685b      	ldr	r3, [r3, #4]
  40035c:	f003 0302 	and.w	r3, r3, #2
  400360:	2b00      	cmp	r3, #0
  400362:	d001      	beq.n	400368 <spi_get_peripheral_select_mode+0x18>
		return 1;
  400364:	2301      	movs	r3, #1
  400366:	e000      	b.n	40036a <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  400368:	2300      	movs	r3, #0
	}
}
  40036a:	4618      	mov	r0, r3
  40036c:	370c      	adds	r7, #12
  40036e:	46bd      	mov	sp, r7
  400370:	f85d 7b04 	ldr.w	r7, [sp], #4
  400374:	4770      	bx	lr
	...

00400378 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400378:	b580      	push	{r7, lr}
  40037a:	b082      	sub	sp, #8
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400380:	6878      	ldr	r0, [r7, #4]
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <sysclk_enable_peripheral_clock+0x18>)
  400384:	4798      	blx	r3
}
  400386:	bf00      	nop
  400388:	3708      	adds	r7, #8
  40038a:	46bd      	mov	sp, r7
  40038c:	bd80      	pop	{r7, pc}
  40038e:	bf00      	nop
  400390:	0040286d 	.word	0x0040286d

00400394 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	4a09      	ldr	r2, [pc, #36]	; (4003c4 <spi_enable_clock+0x30>)
  4003a0:	4293      	cmp	r3, r2
  4003a2:	d103      	bne.n	4003ac <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4003a4:	2015      	movs	r0, #21
  4003a6:	4b08      	ldr	r3, [pc, #32]	; (4003c8 <spi_enable_clock+0x34>)
  4003a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003aa:	e006      	b.n	4003ba <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <spi_enable_clock+0x38>)
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d102      	bne.n	4003ba <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4003b4:	202a      	movs	r0, #42	; 0x2a
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <spi_enable_clock+0x34>)
  4003b8:	4798      	blx	r3
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	40008000 	.word	0x40008000
  4003c8:	00400379 	.word	0x00400379
  4003cc:	40058000 	.word	0x40058000

004003d0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003da:	687b      	ldr	r3, [r7, #4]
  4003dc:	685b      	ldr	r3, [r3, #4]
  4003de:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	685a      	ldr	r2, [r3, #4]
  4003ea:	683b      	ldr	r3, [r7, #0]
  4003ec:	041b      	lsls	r3, r3, #16
  4003ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4003f2:	431a      	orrs	r2, r3
  4003f4:	687b      	ldr	r3, [r7, #4]
  4003f6:	605a      	str	r2, [r3, #4]
}
  4003f8:	bf00      	nop
  4003fa:	370c      	adds	r7, #12
  4003fc:	46bd      	mov	sp, r7
  4003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400402:	4770      	bx	lr

00400404 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400404:	b580      	push	{r7, lr}
  400406:	b084      	sub	sp, #16
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
  40040c:	4608      	mov	r0, r1
  40040e:	4611      	mov	r1, r2
  400410:	461a      	mov	r2, r3
  400412:	4603      	mov	r3, r0
  400414:	807b      	strh	r3, [r7, #2]
  400416:	460b      	mov	r3, r1
  400418:	707b      	strb	r3, [r7, #1]
  40041a:	4613      	mov	r3, r2
  40041c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40041e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400422:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400424:	e006      	b.n	400434 <spi_write+0x30>
		if (!timeout--) {
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	1e5a      	subs	r2, r3, #1
  40042a:	60fa      	str	r2, [r7, #12]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d101      	bne.n	400434 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400430:	2301      	movs	r3, #1
  400432:	e020      	b.n	400476 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	691b      	ldr	r3, [r3, #16]
  400438:	f003 0302 	and.w	r3, r3, #2
  40043c:	2b00      	cmp	r3, #0
  40043e:	d0f2      	beq.n	400426 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400440:	6878      	ldr	r0, [r7, #4]
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_write+0x7c>)
  400444:	4798      	blx	r3
  400446:	4603      	mov	r3, r0
  400448:	2b00      	cmp	r3, #0
  40044a:	d00e      	beq.n	40046a <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40044c:	887a      	ldrh	r2, [r7, #2]
  40044e:	787b      	ldrb	r3, [r7, #1]
  400450:	041b      	lsls	r3, r3, #16
  400452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400456:	4313      	orrs	r3, r2
  400458:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40045a:	783b      	ldrb	r3, [r7, #0]
  40045c:	2b00      	cmp	r3, #0
  40045e:	d006      	beq.n	40046e <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400466:	60bb      	str	r3, [r7, #8]
  400468:	e001      	b.n	40046e <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40046a:	887b      	ldrh	r3, [r7, #2]
  40046c:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  40046e:	687b      	ldr	r3, [r7, #4]
  400470:	68ba      	ldr	r2, [r7, #8]
  400472:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400474:	2300      	movs	r3, #0
}
  400476:	4618      	mov	r0, r3
  400478:	3710      	adds	r7, #16
  40047a:	46bd      	mov	sp, r7
  40047c:	bd80      	pop	{r7, pc}
  40047e:	bf00      	nop
  400480:	00400351 	.word	0x00400351

00400484 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400484:	b480      	push	{r7}
  400486:	b085      	sub	sp, #20
  400488:	af00      	add	r7, sp, #0
  40048a:	60f8      	str	r0, [r7, #12]
  40048c:	60b9      	str	r1, [r7, #8]
  40048e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2b00      	cmp	r3, #0
  400494:	d00c      	beq.n	4004b0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400496:	68fb      	ldr	r3, [r7, #12]
  400498:	68ba      	ldr	r2, [r7, #8]
  40049a:	320c      	adds	r2, #12
  40049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004a0:	f043 0101 	orr.w	r1, r3, #1
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	68ba      	ldr	r2, [r7, #8]
  4004a8:	320c      	adds	r2, #12
  4004aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4004ae:	e00b      	b.n	4004c8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	68ba      	ldr	r2, [r7, #8]
  4004b4:	320c      	adds	r2, #12
  4004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004ba:	f023 0101 	bic.w	r1, r3, #1
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	68ba      	ldr	r2, [r7, #8]
  4004c2:	320c      	adds	r2, #12
  4004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4004c8:	bf00      	nop
  4004ca:	3714      	adds	r7, #20
  4004cc:	46bd      	mov	sp, r7
  4004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d2:	4770      	bx	lr

004004d4 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4004d4:	b480      	push	{r7}
  4004d6:	b085      	sub	sp, #20
  4004d8:	af00      	add	r7, sp, #0
  4004da:	60f8      	str	r0, [r7, #12]
  4004dc:	60b9      	str	r1, [r7, #8]
  4004de:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b00      	cmp	r3, #0
  4004e4:	d00c      	beq.n	400500 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004e6:	68fb      	ldr	r3, [r7, #12]
  4004e8:	68ba      	ldr	r2, [r7, #8]
  4004ea:	320c      	adds	r2, #12
  4004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004f0:	f043 0102 	orr.w	r1, r3, #2
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	68ba      	ldr	r2, [r7, #8]
  4004f8:	320c      	adds	r2, #12
  4004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4004fe:	e00b      	b.n	400518 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	68ba      	ldr	r2, [r7, #8]
  400504:	320c      	adds	r2, #12
  400506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40050a:	f023 0102 	bic.w	r1, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	320c      	adds	r2, #12
  400514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400518:	bf00      	nop
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400522:	4770      	bx	lr

00400524 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400524:	b480      	push	{r7}
  400526:	b085      	sub	sp, #20
  400528:	af00      	add	r7, sp, #0
  40052a:	60f8      	str	r0, [r7, #12]
  40052c:	60b9      	str	r1, [r7, #8]
  40052e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	2b04      	cmp	r3, #4
  400534:	d118      	bne.n	400568 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	68ba      	ldr	r2, [r7, #8]
  40053a:	320c      	adds	r2, #12
  40053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400540:	f023 0108 	bic.w	r1, r3, #8
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	320c      	adds	r2, #12
  40054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40054e:	68fb      	ldr	r3, [r7, #12]
  400550:	68ba      	ldr	r2, [r7, #8]
  400552:	320c      	adds	r2, #12
  400554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400558:	f043 0104 	orr.w	r1, r3, #4
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	68ba      	ldr	r2, [r7, #8]
  400560:	320c      	adds	r2, #12
  400562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  400566:	e02a      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d118      	bne.n	4005a0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40056e:	68fb      	ldr	r3, [r7, #12]
  400570:	68ba      	ldr	r2, [r7, #8]
  400572:	320c      	adds	r2, #12
  400574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400578:	f023 0108 	bic.w	r1, r3, #8
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	68ba      	ldr	r2, [r7, #8]
  400580:	320c      	adds	r2, #12
  400582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	320c      	adds	r2, #12
  40058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400590:	f023 0104 	bic.w	r1, r3, #4
  400594:	68fb      	ldr	r3, [r7, #12]
  400596:	68ba      	ldr	r2, [r7, #8]
  400598:	320c      	adds	r2, #12
  40059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40059e:	e00e      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2b08      	cmp	r3, #8
  4005a4:	d10b      	bne.n	4005be <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	68ba      	ldr	r2, [r7, #8]
  4005aa:	320c      	adds	r2, #12
  4005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005b0:	f043 0108 	orr.w	r1, r3, #8
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	68ba      	ldr	r2, [r7, #8]
  4005b8:	320c      	adds	r2, #12
  4005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005be:	bf00      	nop
  4005c0:	3714      	adds	r7, #20
  4005c2:	46bd      	mov	sp, r7
  4005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c8:	4770      	bx	lr

004005ca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005ca:	b480      	push	{r7}
  4005cc:	b085      	sub	sp, #20
  4005ce:	af00      	add	r7, sp, #0
  4005d0:	60f8      	str	r0, [r7, #12]
  4005d2:	60b9      	str	r1, [r7, #8]
  4005d4:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	320c      	adds	r2, #12
  4005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	320c      	adds	r2, #12
  4005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	320c      	adds	r2, #12
  4005f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	ea42 0103 	orr.w	r1, r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	68ba      	ldr	r2, [r7, #8]
  400602:	320c      	adds	r2, #12
  400604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400614:	b480      	push	{r7}
  400616:	b085      	sub	sp, #20
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4413      	add	r3, r2
  400624:	1e5a      	subs	r2, r3, #1
  400626:	687b      	ldr	r3, [r7, #4]
  400628:	fbb2 f3f3 	udiv	r3, r2, r3
  40062c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	2b00      	cmp	r3, #0
  400632:	dd02      	ble.n	40063a <spi_calc_baudrate_div+0x26>
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	2bff      	cmp	r3, #255	; 0xff
  400638:	dd02      	ble.n	400640 <spi_calc_baudrate_div+0x2c>
		return -1;
  40063a:	f04f 33ff 	mov.w	r3, #4294967295
  40063e:	e001      	b.n	400644 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	b21b      	sxth	r3, r3
}
  400644:	4618      	mov	r0, r3
  400646:	3714      	adds	r7, #20
  400648:	46bd      	mov	sp, r7
  40064a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064e:	4770      	bx	lr

00400650 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400650:	b480      	push	{r7}
  400652:	b085      	sub	sp, #20
  400654:	af00      	add	r7, sp, #0
  400656:	60f8      	str	r0, [r7, #12]
  400658:	60b9      	str	r1, [r7, #8]
  40065a:	4613      	mov	r3, r2
  40065c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	79fb      	ldrb	r3, [r7, #7]
  400660:	2b00      	cmp	r3, #0
  400662:	d102      	bne.n	40066a <spi_set_baudrate_div+0x1a>
        return -1;
  400664:	f04f 33ff 	mov.w	r3, #4294967295
  400668:	e01b      	b.n	4006a2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	68ba      	ldr	r2, [r7, #8]
  40066e:	320c      	adds	r2, #12
  400670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400674:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	68ba      	ldr	r2, [r7, #8]
  40067c:	320c      	adds	r2, #12
  40067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	320c      	adds	r2, #12
  400688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	021b      	lsls	r3, r3, #8
  400690:	b29b      	uxth	r3, r3
  400692:	ea42 0103 	orr.w	r1, r2, r3
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	320c      	adds	r2, #12
  40069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3714      	adds	r7, #20
  4006a6:	46bd      	mov	sp, r7
  4006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ac:	4770      	bx	lr
	...

004006b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	4603      	mov	r3, r0
  4006b8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4006ba:	4909      	ldr	r1, [pc, #36]	; (4006e0 <NVIC_EnableIRQ+0x30>)
  4006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4006c0:	095b      	lsrs	r3, r3, #5
  4006c2:	79fa      	ldrb	r2, [r7, #7]
  4006c4:	f002 021f 	and.w	r2, r2, #31
  4006c8:	2001      	movs	r0, #1
  4006ca:	fa00 f202 	lsl.w	r2, r0, r2
  4006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4006d2:	bf00      	nop
  4006d4:	370c      	adds	r7, #12
  4006d6:	46bd      	mov	sp, r7
  4006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop
  4006e0:	e000e100 	.word	0xe000e100

004006e4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b083      	sub	sp, #12
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	4603      	mov	r3, r0
  4006ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4006ee:	4909      	ldr	r1, [pc, #36]	; (400714 <NVIC_DisableIRQ+0x30>)
  4006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4006f4:	095b      	lsrs	r3, r3, #5
  4006f6:	79fa      	ldrb	r2, [r7, #7]
  4006f8:	f002 021f 	and.w	r2, r2, #31
  4006fc:	2001      	movs	r0, #1
  4006fe:	fa00 f202 	lsl.w	r2, r0, r2
  400702:	3320      	adds	r3, #32
  400704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400708:	bf00      	nop
  40070a:	370c      	adds	r7, #12
  40070c:	46bd      	mov	sp, r7
  40070e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400712:	4770      	bx	lr
  400714:	e000e100 	.word	0xe000e100

00400718 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400718:	b480      	push	{r7}
  40071a:	b083      	sub	sp, #12
  40071c:	af00      	add	r7, sp, #0
  40071e:	4603      	mov	r3, r0
  400720:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400722:	4909      	ldr	r1, [pc, #36]	; (400748 <NVIC_ClearPendingIRQ+0x30>)
  400724:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400728:	095b      	lsrs	r3, r3, #5
  40072a:	79fa      	ldrb	r2, [r7, #7]
  40072c:	f002 021f 	and.w	r2, r2, #31
  400730:	2001      	movs	r0, #1
  400732:	fa00 f202 	lsl.w	r2, r0, r2
  400736:	3360      	adds	r3, #96	; 0x60
  400738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40073c:	bf00      	nop
  40073e:	370c      	adds	r7, #12
  400740:	46bd      	mov	sp, r7
  400742:	f85d 7b04 	ldr.w	r7, [sp], #4
  400746:	4770      	bx	lr
  400748:	e000e100 	.word	0xe000e100

0040074c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40074c:	b480      	push	{r7}
  40074e:	b083      	sub	sp, #12
  400750:	af00      	add	r7, sp, #0
  400752:	4603      	mov	r3, r0
  400754:	6039      	str	r1, [r7, #0]
  400756:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400758:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40075c:	2b00      	cmp	r3, #0
  40075e:	da0b      	bge.n	400778 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400760:	490d      	ldr	r1, [pc, #52]	; (400798 <NVIC_SetPriority+0x4c>)
  400762:	79fb      	ldrb	r3, [r7, #7]
  400764:	f003 030f 	and.w	r3, r3, #15
  400768:	3b04      	subs	r3, #4
  40076a:	683a      	ldr	r2, [r7, #0]
  40076c:	b2d2      	uxtb	r2, r2
  40076e:	0152      	lsls	r2, r2, #5
  400770:	b2d2      	uxtb	r2, r2
  400772:	440b      	add	r3, r1
  400774:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  400776:	e009      	b.n	40078c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400778:	4908      	ldr	r1, [pc, #32]	; (40079c <NVIC_SetPriority+0x50>)
  40077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40077e:	683a      	ldr	r2, [r7, #0]
  400780:	b2d2      	uxtb	r2, r2
  400782:	0152      	lsls	r2, r2, #5
  400784:	b2d2      	uxtb	r2, r2
  400786:	440b      	add	r3, r1
  400788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40078c:	bf00      	nop
  40078e:	370c      	adds	r7, #12
  400790:	46bd      	mov	sp, r7
  400792:	f85d 7b04 	ldr.w	r7, [sp], #4
  400796:	4770      	bx	lr
  400798:	e000ed00 	.word	0xe000ed00
  40079c:	e000e100 	.word	0xe000e100

004007a0 <RTT_init>:

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
}

void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4007a0:	b580      	push	{r7, lr}
  4007a2:	b086      	sub	sp, #24
  4007a4:	af00      	add	r7, sp, #0
  4007a6:	60f8      	str	r0, [r7, #12]
  4007a8:	60b9      	str	r1, [r7, #8]
  4007aa:	607a      	str	r2, [r7, #4]

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  4007ac:	eddf 6a26 	vldr	s13, [pc, #152]	; 400848 <RTT_init+0xa8>
  4007b0:	ed97 7a03 	vldr	s14, [r7, #12]
  4007b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
  4007b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4007bc:	edc7 7a00 	vstr	s15, [r7]
  4007c0:	883b      	ldrh	r3, [r7, #0]
  4007c2:	82fb      	strh	r3, [r7, #22]
	
	rtt_sel_source(RTT, false);
  4007c4:	2100      	movs	r1, #0
  4007c6:	4821      	ldr	r0, [pc, #132]	; (40084c <RTT_init+0xac>)
  4007c8:	4b21      	ldr	r3, [pc, #132]	; (400850 <RTT_init+0xb0>)
  4007ca:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  4007cc:	8afb      	ldrh	r3, [r7, #22]
  4007ce:	4619      	mov	r1, r3
  4007d0:	481e      	ldr	r0, [pc, #120]	; (40084c <RTT_init+0xac>)
  4007d2:	4b20      	ldr	r3, [pc, #128]	; (400854 <RTT_init+0xb4>)
  4007d4:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  4007d6:	687b      	ldr	r3, [r7, #4]
  4007d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4007dc:	2b00      	cmp	r3, #0
  4007de:	d012      	beq.n	400806 <RTT_init+0x66>
		uint32_t ul_previous_time;
		ul_previous_time = rtt_read_timer_value(RTT);
  4007e0:	481a      	ldr	r0, [pc, #104]	; (40084c <RTT_init+0xac>)
  4007e2:	4b1d      	ldr	r3, [pc, #116]	; (400858 <RTT_init+0xb8>)
  4007e4:	4798      	blx	r3
  4007e6:	6138      	str	r0, [r7, #16]
		while (ul_previous_time == rtt_read_timer_value(RTT));
  4007e8:	bf00      	nop
  4007ea:	4818      	ldr	r0, [pc, #96]	; (40084c <RTT_init+0xac>)
  4007ec:	4b1a      	ldr	r3, [pc, #104]	; (400858 <RTT_init+0xb8>)
  4007ee:	4798      	blx	r3
  4007f0:	4602      	mov	r2, r0
  4007f2:	693b      	ldr	r3, [r7, #16]
  4007f4:	429a      	cmp	r2, r3
  4007f6:	d0f8      	beq.n	4007ea <RTT_init+0x4a>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  4007f8:	68ba      	ldr	r2, [r7, #8]
  4007fa:	693b      	ldr	r3, [r7, #16]
  4007fc:	4413      	add	r3, r2
  4007fe:	4619      	mov	r1, r3
  400800:	4812      	ldr	r0, [pc, #72]	; (40084c <RTT_init+0xac>)
  400802:	4b16      	ldr	r3, [pc, #88]	; (40085c <RTT_init+0xbc>)
  400804:	4798      	blx	r3
	}

	/* config NVIC */
	NVIC_DisableIRQ(RTT_IRQn);
  400806:	2003      	movs	r0, #3
  400808:	4b15      	ldr	r3, [pc, #84]	; (400860 <RTT_init+0xc0>)
  40080a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  40080c:	2003      	movs	r0, #3
  40080e:	4b15      	ldr	r3, [pc, #84]	; (400864 <RTT_init+0xc4>)
  400810:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 4);
  400812:	2104      	movs	r1, #4
  400814:	2003      	movs	r0, #3
  400816:	4b14      	ldr	r3, [pc, #80]	; (400868 <RTT_init+0xc8>)
  400818:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  40081a:	2003      	movs	r0, #3
  40081c:	4b13      	ldr	r3, [pc, #76]	; (40086c <RTT_init+0xcc>)
  40081e:	4798      	blx	r3

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  400820:	687b      	ldr	r3, [r7, #4]
  400822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  400826:	2b00      	cmp	r3, #0
  400828:	d004      	beq.n	400834 <RTT_init+0x94>
	rtt_enable_interrupt(RTT, rttIRQSource);
  40082a:	6879      	ldr	r1, [r7, #4]
  40082c:	4807      	ldr	r0, [pc, #28]	; (40084c <RTT_init+0xac>)
  40082e:	4b10      	ldr	r3, [pc, #64]	; (400870 <RTT_init+0xd0>)
  400830:	4798      	blx	r3
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
	
}
  400832:	e004      	b.n	40083e <RTT_init+0x9e>
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  400834:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400838:	4804      	ldr	r0, [pc, #16]	; (40084c <RTT_init+0xac>)
  40083a:	4b0e      	ldr	r3, [pc, #56]	; (400874 <RTT_init+0xd4>)
  40083c:	4798      	blx	r3
}
  40083e:	bf00      	nop
  400840:	3718      	adds	r7, #24
  400842:	46bd      	mov	sp, r7
  400844:	bd80      	pop	{r7, pc}
  400846:	bf00      	nop
  400848:	47000000 	.word	0x47000000
  40084c:	400e1830 	.word	0x400e1830
  400850:	004001dd 	.word	0x004001dd
  400854:	004001ad 	.word	0x004001ad
  400858:	004002ad 	.word	0x004002ad
  40085c:	004002f5 	.word	0x004002f5
  400860:	004006e5 	.word	0x004006e5
  400864:	00400719 	.word	0x00400719
  400868:	0040074d 	.word	0x0040074d
  40086c:	004006b1 	.word	0x004006b1
  400870:	00400235 	.word	0x00400235
  400874:	0040026d 	.word	0x0040026d

00400878 <config_button>:

/************************************************************************/
/* configs                                                              */
/************************************************************************/

void config_button(Pio *p_pio, const uint32_t ul_mask, uint32_t ul_id, void (*p_handler) (uint32_t, uint32_t), int it_rise, int filter) {
  400878:	b590      	push	{r4, r7, lr}
  40087a:	b089      	sub	sp, #36	; 0x24
  40087c:	af02      	add	r7, sp, #8
  40087e:	60f8      	str	r0, [r7, #12]
  400880:	60b9      	str	r1, [r7, #8]
  400882:	607a      	str	r2, [r7, #4]
  400884:	603b      	str	r3, [r7, #0]
	pmc_enable_periph_clk(ul_id);
  400886:	6878      	ldr	r0, [r7, #4]
  400888:	4b1e      	ldr	r3, [pc, #120]	; (400904 <config_button+0x8c>)
  40088a:	4798      	blx	r3
	filter ? pio_configure(p_pio, PIO_INPUT, ul_mask, PIO_PULLUP | PIO_DEBOUNCE) : pio_configure(p_pio, PIO_INPUT, ul_mask, PIO_DEFAULT);
  40088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40088e:	2b00      	cmp	r3, #0
  400890:	d007      	beq.n	4008a2 <config_button+0x2a>
  400892:	2309      	movs	r3, #9
  400894:	68ba      	ldr	r2, [r7, #8]
  400896:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40089a:	68f8      	ldr	r0, [r7, #12]
  40089c:	4c1a      	ldr	r4, [pc, #104]	; (400908 <config_button+0x90>)
  40089e:	47a0      	blx	r4
  4008a0:	e006      	b.n	4008b0 <config_button+0x38>
  4008a2:	2300      	movs	r3, #0
  4008a4:	68ba      	ldr	r2, [r7, #8]
  4008a6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008aa:	68f8      	ldr	r0, [r7, #12]
  4008ac:	4c16      	ldr	r4, [pc, #88]	; (400908 <config_button+0x90>)
  4008ae:	47a0      	blx	r4

	pio_set_debounce_filter(p_pio, ul_mask, 60);
  4008b0:	223c      	movs	r2, #60	; 0x3c
  4008b2:	68b9      	ldr	r1, [r7, #8]
  4008b4:	68f8      	ldr	r0, [r7, #12]
  4008b6:	4b15      	ldr	r3, [pc, #84]	; (40090c <config_button+0x94>)
  4008b8:	4798      	blx	r3

	uint32_t but_attr = (it_rise ? PIO_IT_RISE_EDGE : PIO_IT_EDGE);
  4008ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4008bc:	2b00      	cmp	r3, #0
  4008be:	d001      	beq.n	4008c4 <config_button+0x4c>
  4008c0:	2370      	movs	r3, #112	; 0x70
  4008c2:	e000      	b.n	4008c6 <config_button+0x4e>
  4008c4:	2340      	movs	r3, #64	; 0x40
  4008c6:	617b      	str	r3, [r7, #20]
	pio_handler_set(p_pio,
  4008c8:	683b      	ldr	r3, [r7, #0]
  4008ca:	9300      	str	r3, [sp, #0]
  4008cc:	697b      	ldr	r3, [r7, #20]
  4008ce:	68ba      	ldr	r2, [r7, #8]
  4008d0:	6879      	ldr	r1, [r7, #4]
  4008d2:	68f8      	ldr	r0, [r7, #12]
  4008d4:	4c0e      	ldr	r4, [pc, #56]	; (400910 <config_button+0x98>)
  4008d6:	47a0      	blx	r4
	ul_id,
	ul_mask,
	but_attr,
	p_handler);

	pio_enable_interrupt(p_pio, ul_mask);
  4008d8:	68b9      	ldr	r1, [r7, #8]
  4008da:	68f8      	ldr	r0, [r7, #12]
  4008dc:	4b0d      	ldr	r3, [pc, #52]	; (400914 <config_button+0x9c>)
  4008de:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4008e0:	68f8      	ldr	r0, [r7, #12]
  4008e2:	4b0d      	ldr	r3, [pc, #52]	; (400918 <config_button+0xa0>)
  4008e4:	4798      	blx	r3
	
	NVIC_EnableIRQ(ul_id);
  4008e6:	687b      	ldr	r3, [r7, #4]
  4008e8:	b25b      	sxtb	r3, r3
  4008ea:	4618      	mov	r0, r3
  4008ec:	4b0b      	ldr	r3, [pc, #44]	; (40091c <config_button+0xa4>)
  4008ee:	4798      	blx	r3
	NVIC_SetPriority(ul_id, 4);
  4008f0:	687b      	ldr	r3, [r7, #4]
  4008f2:	b25b      	sxtb	r3, r3
  4008f4:	2104      	movs	r1, #4
  4008f6:	4618      	mov	r0, r3
  4008f8:	4b09      	ldr	r3, [pc, #36]	; (400920 <config_button+0xa8>)
  4008fa:	4798      	blx	r3
  4008fc:	bf00      	nop
  4008fe:	371c      	adds	r7, #28
  400900:	46bd      	mov	sp, r7
  400902:	bd90      	pop	{r4, r7, pc}
  400904:	0040286d 	.word	0x0040286d
  400908:	0040223d 	.word	0x0040223d
  40090c:	00401f91 	.word	0x00401f91
  400910:	00402491 	.word	0x00402491
  400914:	00402375 	.word	0x00402375
  400918:	004023ad 	.word	0x004023ad
  40091c:	004006b1 	.word	0x004006b1
  400920:	0040074d 	.word	0x0040074d

00400924 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  400924:	b480      	push	{r7}
  400926:	b083      	sub	sp, #12
  400928:	af00      	add	r7, sp, #0
  40092a:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  40092c:	4a04      	ldr	r2, [pc, #16]	; (400940 <gfx_mono_set_framebuffer+0x1c>)
  40092e:	687b      	ldr	r3, [r7, #4]
  400930:	6013      	str	r3, [r2, #0]
}
  400932:	bf00      	nop
  400934:	370c      	adds	r7, #12
  400936:	46bd      	mov	sp, r7
  400938:	f85d 7b04 	ldr.w	r7, [sp], #4
  40093c:	4770      	bx	lr
  40093e:	bf00      	nop
  400940:	20400474 	.word	0x20400474

00400944 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  400944:	b480      	push	{r7}
  400946:	b083      	sub	sp, #12
  400948:	af00      	add	r7, sp, #0
  40094a:	4603      	mov	r3, r0
  40094c:	71fb      	strb	r3, [r7, #7]
  40094e:	460b      	mov	r3, r1
  400950:	71bb      	strb	r3, [r7, #6]
  400952:	4613      	mov	r3, r2
  400954:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400956:	4b08      	ldr	r3, [pc, #32]	; (400978 <gfx_mono_framebuffer_put_byte+0x34>)
  400958:	681a      	ldr	r2, [r3, #0]
  40095a:	79fb      	ldrb	r3, [r7, #7]
  40095c:	01db      	lsls	r3, r3, #7
  40095e:	4619      	mov	r1, r3
  400960:	79bb      	ldrb	r3, [r7, #6]
  400962:	440b      	add	r3, r1
  400964:	4413      	add	r3, r2
  400966:	797a      	ldrb	r2, [r7, #5]
  400968:	701a      	strb	r2, [r3, #0]
}
  40096a:	bf00      	nop
  40096c:	370c      	adds	r7, #12
  40096e:	46bd      	mov	sp, r7
  400970:	f85d 7b04 	ldr.w	r7, [sp], #4
  400974:	4770      	bx	lr
  400976:	bf00      	nop
  400978:	20400474 	.word	0x20400474

0040097c <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  40097c:	b480      	push	{r7}
  40097e:	b083      	sub	sp, #12
  400980:	af00      	add	r7, sp, #0
  400982:	4603      	mov	r3, r0
  400984:	460a      	mov	r2, r1
  400986:	71fb      	strb	r3, [r7, #7]
  400988:	4613      	mov	r3, r2
  40098a:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  40098c:	4b07      	ldr	r3, [pc, #28]	; (4009ac <gfx_mono_framebuffer_get_byte+0x30>)
  40098e:	681a      	ldr	r2, [r3, #0]
  400990:	79fb      	ldrb	r3, [r7, #7]
  400992:	01db      	lsls	r3, r3, #7
  400994:	4619      	mov	r1, r3
  400996:	79bb      	ldrb	r3, [r7, #6]
  400998:	440b      	add	r3, r1
  40099a:	4413      	add	r3, r2
  40099c:	781b      	ldrb	r3, [r3, #0]
}
  40099e:	4618      	mov	r0, r3
  4009a0:	370c      	adds	r7, #12
  4009a2:	46bd      	mov	sp, r7
  4009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009a8:	4770      	bx	lr
  4009aa:	bf00      	nop
  4009ac:	20400474 	.word	0x20400474

004009b0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4009b0:	b590      	push	{r4, r7, lr}
  4009b2:	b085      	sub	sp, #20
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	4604      	mov	r4, r0
  4009b8:	4608      	mov	r0, r1
  4009ba:	4611      	mov	r1, r2
  4009bc:	461a      	mov	r2, r3
  4009be:	4623      	mov	r3, r4
  4009c0:	71fb      	strb	r3, [r7, #7]
  4009c2:	4603      	mov	r3, r0
  4009c4:	71bb      	strb	r3, [r7, #6]
  4009c6:	460b      	mov	r3, r1
  4009c8:	717b      	strb	r3, [r7, #5]
  4009ca:	4613      	mov	r3, r2
  4009cc:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4009ce:	79fa      	ldrb	r2, [r7, #7]
  4009d0:	797b      	ldrb	r3, [r7, #5]
  4009d2:	4413      	add	r3, r2
  4009d4:	2b80      	cmp	r3, #128	; 0x80
  4009d6:	dd06      	ble.n	4009e6 <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  4009d8:	79fb      	ldrb	r3, [r7, #7]
  4009da:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  4009de:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  4009e2:	3380      	adds	r3, #128	; 0x80
  4009e4:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  4009e6:	79bb      	ldrb	r3, [r7, #6]
  4009e8:	08db      	lsrs	r3, r3, #3
  4009ea:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  4009ec:	79ba      	ldrb	r2, [r7, #6]
  4009ee:	7bfb      	ldrb	r3, [r7, #15]
  4009f0:	00db      	lsls	r3, r3, #3
  4009f2:	1ad3      	subs	r3, r2, r3
  4009f4:	2201      	movs	r2, #1
  4009f6:	fa02 f303 	lsl.w	r3, r2, r3
  4009fa:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  4009fc:	797b      	ldrb	r3, [r7, #5]
  4009fe:	2b00      	cmp	r3, #0
  400a00:	d066      	beq.n	400ad0 <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400a02:	793b      	ldrb	r3, [r7, #4]
  400a04:	2b01      	cmp	r3, #1
  400a06:	d01c      	beq.n	400a42 <gfx_mono_generic_draw_horizontal_line+0x92>
  400a08:	2b02      	cmp	r3, #2
  400a0a:	d05b      	beq.n	400ac4 <gfx_mono_generic_draw_horizontal_line+0x114>
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d03b      	beq.n	400a88 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  400a10:	e05f      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400a12:	79fa      	ldrb	r2, [r7, #7]
  400a14:	797b      	ldrb	r3, [r7, #5]
  400a16:	4413      	add	r3, r2
  400a18:	b2da      	uxtb	r2, r3
  400a1a:	7bfb      	ldrb	r3, [r7, #15]
  400a1c:	4611      	mov	r1, r2
  400a1e:	4618      	mov	r0, r3
  400a20:	4b2d      	ldr	r3, [pc, #180]	; (400ad8 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400a22:	4798      	blx	r3
  400a24:	4603      	mov	r3, r0
  400a26:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  400a28:	7b7a      	ldrb	r2, [r7, #13]
  400a2a:	7bbb      	ldrb	r3, [r7, #14]
  400a2c:	4313      	orrs	r3, r2
  400a2e:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400a30:	79fa      	ldrb	r2, [r7, #7]
  400a32:	797b      	ldrb	r3, [r7, #5]
  400a34:	4413      	add	r3, r2
  400a36:	b2d9      	uxtb	r1, r3
  400a38:	7b7a      	ldrb	r2, [r7, #13]
  400a3a:	7bf8      	ldrb	r0, [r7, #15]
  400a3c:	2300      	movs	r3, #0
  400a3e:	4c27      	ldr	r4, [pc, #156]	; (400adc <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400a40:	47a0      	blx	r4
		while (length-- > 0) {
  400a42:	797b      	ldrb	r3, [r7, #5]
  400a44:	1e5a      	subs	r2, r3, #1
  400a46:	717a      	strb	r2, [r7, #5]
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d1e2      	bne.n	400a12 <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  400a4c:	e041      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400a4e:	79fa      	ldrb	r2, [r7, #7]
  400a50:	797b      	ldrb	r3, [r7, #5]
  400a52:	4413      	add	r3, r2
  400a54:	b2da      	uxtb	r2, r3
  400a56:	7bfb      	ldrb	r3, [r7, #15]
  400a58:	4611      	mov	r1, r2
  400a5a:	4618      	mov	r0, r3
  400a5c:	4b1e      	ldr	r3, [pc, #120]	; (400ad8 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400a5e:	4798      	blx	r3
  400a60:	4603      	mov	r3, r0
  400a62:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  400a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400a68:	43db      	mvns	r3, r3
  400a6a:	b25a      	sxtb	r2, r3
  400a6c:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400a70:	4013      	ands	r3, r2
  400a72:	b25b      	sxtb	r3, r3
  400a74:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400a76:	79fa      	ldrb	r2, [r7, #7]
  400a78:	797b      	ldrb	r3, [r7, #5]
  400a7a:	4413      	add	r3, r2
  400a7c:	b2d9      	uxtb	r1, r3
  400a7e:	7b7a      	ldrb	r2, [r7, #13]
  400a80:	7bf8      	ldrb	r0, [r7, #15]
  400a82:	2300      	movs	r3, #0
  400a84:	4c15      	ldr	r4, [pc, #84]	; (400adc <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400a86:	47a0      	blx	r4
		while (length-- > 0) {
  400a88:	797b      	ldrb	r3, [r7, #5]
  400a8a:	1e5a      	subs	r2, r3, #1
  400a8c:	717a      	strb	r2, [r7, #5]
  400a8e:	2b00      	cmp	r3, #0
  400a90:	d1dd      	bne.n	400a4e <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  400a92:	e01e      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400a94:	79fa      	ldrb	r2, [r7, #7]
  400a96:	797b      	ldrb	r3, [r7, #5]
  400a98:	4413      	add	r3, r2
  400a9a:	b2da      	uxtb	r2, r3
  400a9c:	7bfb      	ldrb	r3, [r7, #15]
  400a9e:	4611      	mov	r1, r2
  400aa0:	4618      	mov	r0, r3
  400aa2:	4b0d      	ldr	r3, [pc, #52]	; (400ad8 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400aa4:	4798      	blx	r3
  400aa6:	4603      	mov	r3, r0
  400aa8:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400aaa:	7b7a      	ldrb	r2, [r7, #13]
  400aac:	7bbb      	ldrb	r3, [r7, #14]
  400aae:	4053      	eors	r3, r2
  400ab0:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400ab2:	79fa      	ldrb	r2, [r7, #7]
  400ab4:	797b      	ldrb	r3, [r7, #5]
  400ab6:	4413      	add	r3, r2
  400ab8:	b2d9      	uxtb	r1, r3
  400aba:	7b7a      	ldrb	r2, [r7, #13]
  400abc:	7bf8      	ldrb	r0, [r7, #15]
  400abe:	2300      	movs	r3, #0
  400ac0:	4c06      	ldr	r4, [pc, #24]	; (400adc <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400ac2:	47a0      	blx	r4
		while (length-- > 0) {
  400ac4:	797b      	ldrb	r3, [r7, #5]
  400ac6:	1e5a      	subs	r2, r3, #1
  400ac8:	717a      	strb	r2, [r7, #5]
  400aca:	2b00      	cmp	r3, #0
  400acc:	d1e2      	bne.n	400a94 <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  400ace:	e000      	b.n	400ad2 <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  400ad0:	bf00      	nop
	}
}
  400ad2:	3714      	adds	r7, #20
  400ad4:	46bd      	mov	sp, r7
  400ad6:	bd90      	pop	{r4, r7, pc}
  400ad8:	00400eed 	.word	0x00400eed
  400adc:	00400e69 	.word	0x00400e69

00400ae0 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400ae0:	b590      	push	{r4, r7, lr}
  400ae2:	b083      	sub	sp, #12
  400ae4:	af00      	add	r7, sp, #0
  400ae6:	4604      	mov	r4, r0
  400ae8:	4608      	mov	r0, r1
  400aea:	4611      	mov	r1, r2
  400aec:	461a      	mov	r2, r3
  400aee:	4623      	mov	r3, r4
  400af0:	71fb      	strb	r3, [r7, #7]
  400af2:	4603      	mov	r3, r0
  400af4:	71bb      	strb	r3, [r7, #6]
  400af6:	460b      	mov	r3, r1
  400af8:	717b      	strb	r3, [r7, #5]
  400afa:	4613      	mov	r3, r2
  400afc:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  400afe:	793b      	ldrb	r3, [r7, #4]
  400b00:	2b00      	cmp	r3, #0
  400b02:	d00f      	beq.n	400b24 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400b04:	e008      	b.n	400b18 <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400b06:	79ba      	ldrb	r2, [r7, #6]
  400b08:	793b      	ldrb	r3, [r7, #4]
  400b0a:	4413      	add	r3, r2
  400b0c:	b2d9      	uxtb	r1, r3
  400b0e:	7e3b      	ldrb	r3, [r7, #24]
  400b10:	797a      	ldrb	r2, [r7, #5]
  400b12:	79f8      	ldrb	r0, [r7, #7]
  400b14:	4c05      	ldr	r4, [pc, #20]	; (400b2c <gfx_mono_generic_draw_filled_rect+0x4c>)
  400b16:	47a0      	blx	r4
	while (height-- > 0) {
  400b18:	793b      	ldrb	r3, [r7, #4]
  400b1a:	1e5a      	subs	r2, r3, #1
  400b1c:	713a      	strb	r2, [r7, #4]
  400b1e:	2b00      	cmp	r3, #0
  400b20:	d1f1      	bne.n	400b06 <gfx_mono_generic_draw_filled_rect+0x26>
  400b22:	e000      	b.n	400b26 <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  400b24:	bf00      	nop
	}
}
  400b26:	370c      	adds	r7, #12
  400b28:	46bd      	mov	sp, r7
  400b2a:	bd90      	pop	{r4, r7, pc}
  400b2c:	004009b1 	.word	0x004009b1

00400b30 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  400b30:	b580      	push	{r7, lr}
  400b32:	b086      	sub	sp, #24
  400b34:	af00      	add	r7, sp, #0
  400b36:	603b      	str	r3, [r7, #0]
  400b38:	4603      	mov	r3, r0
  400b3a:	71fb      	strb	r3, [r7, #7]
  400b3c:	460b      	mov	r3, r1
  400b3e:	71bb      	strb	r3, [r7, #6]
  400b40:	4613      	mov	r3, r2
  400b42:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  400b44:	79bb      	ldrb	r3, [r7, #6]
  400b46:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  400b48:	797b      	ldrb	r3, [r7, #5]
  400b4a:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400b4c:	683b      	ldr	r3, [r7, #0]
  400b4e:	7a1b      	ldrb	r3, [r3, #8]
  400b50:	08db      	lsrs	r3, r3, #3
  400b52:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400b54:	683b      	ldr	r3, [r7, #0]
  400b56:	7a1b      	ldrb	r3, [r3, #8]
  400b58:	f003 0307 	and.w	r3, r3, #7
  400b5c:	b2db      	uxtb	r3, r3
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d002      	beq.n	400b68 <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  400b62:	7cfb      	ldrb	r3, [r7, #19]
  400b64:	3301      	adds	r3, #1
  400b66:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  400b68:	7cfb      	ldrb	r3, [r7, #19]
  400b6a:	b29a      	uxth	r2, r3
  400b6c:	683b      	ldr	r3, [r7, #0]
  400b6e:	7a5b      	ldrb	r3, [r3, #9]
  400b70:	b29b      	uxth	r3, r3
  400b72:	fb12 f303 	smulbb	r3, r2, r3
  400b76:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400b78:	79fb      	ldrb	r3, [r7, #7]
  400b7a:	6839      	ldr	r1, [r7, #0]
  400b7c:	7a89      	ldrb	r1, [r1, #10]
  400b7e:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  400b80:	b29b      	uxth	r3, r3
  400b82:	fb12 f303 	smulbb	r3, r2, r3
  400b86:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400b88:	683b      	ldr	r3, [r7, #0]
  400b8a:	685a      	ldr	r2, [r3, #4]
  400b8c:	89bb      	ldrh	r3, [r7, #12]
  400b8e:	4413      	add	r3, r2
  400b90:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  400b92:	683b      	ldr	r3, [r7, #0]
  400b94:	7a5b      	ldrb	r3, [r3, #9]
  400b96:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400b98:	2300      	movs	r3, #0
  400b9a:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400b9c:	683b      	ldr	r3, [r7, #0]
  400b9e:	7a1b      	ldrb	r3, [r3, #8]
  400ba0:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  400ba2:	2300      	movs	r3, #0
  400ba4:	747b      	strb	r3, [r7, #17]
  400ba6:	e01e      	b.n	400be6 <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400ba8:	7c7b      	ldrb	r3, [r7, #17]
  400baa:	f003 0307 	and.w	r3, r3, #7
  400bae:	b2db      	uxtb	r3, r3
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d105      	bne.n	400bc0 <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400bb4:	697b      	ldr	r3, [r7, #20]
  400bb6:	781b      	ldrb	r3, [r3, #0]
  400bb8:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  400bba:	697b      	ldr	r3, [r7, #20]
  400bbc:	3301      	adds	r3, #1
  400bbe:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  400bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	da05      	bge.n	400bd4 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400bc8:	7bf9      	ldrb	r1, [r7, #15]
  400bca:	7c3b      	ldrb	r3, [r7, #16]
  400bcc:	2201      	movs	r2, #1
  400bce:	4618      	mov	r0, r3
  400bd0:	4b0e      	ldr	r3, [pc, #56]	; (400c0c <gfx_mono_draw_char_progmem+0xdc>)
  400bd2:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400bd4:	7c3b      	ldrb	r3, [r7, #16]
  400bd6:	3301      	adds	r3, #1
  400bd8:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  400bda:	7bbb      	ldrb	r3, [r7, #14]
  400bdc:	005b      	lsls	r3, r3, #1
  400bde:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  400be0:	7c7b      	ldrb	r3, [r7, #17]
  400be2:	3301      	adds	r3, #1
  400be4:	747b      	strb	r3, [r7, #17]
  400be6:	7c7a      	ldrb	r2, [r7, #17]
  400be8:	7afb      	ldrb	r3, [r7, #11]
  400bea:	429a      	cmp	r2, r3
  400bec:	d3dc      	bcc.n	400ba8 <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  400bee:	7bfb      	ldrb	r3, [r7, #15]
  400bf0:	3301      	adds	r3, #1
  400bf2:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400bf4:	79bb      	ldrb	r3, [r7, #6]
  400bf6:	743b      	strb	r3, [r7, #16]
		rows_left--;
  400bf8:	7cbb      	ldrb	r3, [r7, #18]
  400bfa:	3b01      	subs	r3, #1
  400bfc:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  400bfe:	7cbb      	ldrb	r3, [r7, #18]
  400c00:	2b00      	cmp	r3, #0
  400c02:	d1c9      	bne.n	400b98 <gfx_mono_draw_char_progmem+0x68>
}
  400c04:	bf00      	nop
  400c06:	3718      	adds	r7, #24
  400c08:	46bd      	mov	sp, r7
  400c0a:	bd80      	pop	{r7, pc}
  400c0c:	00400dcd 	.word	0x00400dcd

00400c10 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400c10:	b590      	push	{r4, r7, lr}
  400c12:	b085      	sub	sp, #20
  400c14:	af02      	add	r7, sp, #8
  400c16:	603b      	str	r3, [r7, #0]
  400c18:	4603      	mov	r3, r0
  400c1a:	71fb      	strb	r3, [r7, #7]
  400c1c:	460b      	mov	r3, r1
  400c1e:	71bb      	strb	r3, [r7, #6]
  400c20:	4613      	mov	r3, r2
  400c22:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400c24:	683b      	ldr	r3, [r7, #0]
  400c26:	7a1a      	ldrb	r2, [r3, #8]
  400c28:	683b      	ldr	r3, [r7, #0]
  400c2a:	7a5c      	ldrb	r4, [r3, #9]
  400c2c:	7979      	ldrb	r1, [r7, #5]
  400c2e:	79b8      	ldrb	r0, [r7, #6]
  400c30:	2300      	movs	r3, #0
  400c32:	9300      	str	r3, [sp, #0]
  400c34:	4623      	mov	r3, r4
  400c36:	4c09      	ldr	r4, [pc, #36]	; (400c5c <gfx_mono_draw_char+0x4c>)
  400c38:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  400c3a:	683b      	ldr	r3, [r7, #0]
  400c3c:	781b      	ldrb	r3, [r3, #0]
  400c3e:	2b00      	cmp	r3, #0
  400c40:	d000      	beq.n	400c44 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  400c42:	e006      	b.n	400c52 <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  400c44:	797a      	ldrb	r2, [r7, #5]
  400c46:	79b9      	ldrb	r1, [r7, #6]
  400c48:	79f8      	ldrb	r0, [r7, #7]
  400c4a:	683b      	ldr	r3, [r7, #0]
  400c4c:	4c04      	ldr	r4, [pc, #16]	; (400c60 <gfx_mono_draw_char+0x50>)
  400c4e:	47a0      	blx	r4
		break;
  400c50:	bf00      	nop
	}
}
  400c52:	bf00      	nop
  400c54:	370c      	adds	r7, #12
  400c56:	46bd      	mov	sp, r7
  400c58:	bd90      	pop	{r4, r7, pc}
  400c5a:	bf00      	nop
  400c5c:	00400ae1 	.word	0x00400ae1
  400c60:	00400b31 	.word	0x00400b31

00400c64 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400c64:	b590      	push	{r4, r7, lr}
  400c66:	b087      	sub	sp, #28
  400c68:	af00      	add	r7, sp, #0
  400c6a:	60f8      	str	r0, [r7, #12]
  400c6c:	607b      	str	r3, [r7, #4]
  400c6e:	460b      	mov	r3, r1
  400c70:	72fb      	strb	r3, [r7, #11]
  400c72:	4613      	mov	r3, r2
  400c74:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  400c76:	7afb      	ldrb	r3, [r7, #11]
  400c78:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400c7a:	68fb      	ldr	r3, [r7, #12]
  400c7c:	781b      	ldrb	r3, [r3, #0]
  400c7e:	2b0a      	cmp	r3, #10
  400c80:	d109      	bne.n	400c96 <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  400c82:	7dfb      	ldrb	r3, [r7, #23]
  400c84:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	7a5a      	ldrb	r2, [r3, #9]
  400c8a:	7abb      	ldrb	r3, [r7, #10]
  400c8c:	4413      	add	r3, r2
  400c8e:	b2db      	uxtb	r3, r3
  400c90:	3301      	adds	r3, #1
  400c92:	72bb      	strb	r3, [r7, #10]
  400c94:	e00f      	b.n	400cb6 <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  400c96:	68fb      	ldr	r3, [r7, #12]
  400c98:	781b      	ldrb	r3, [r3, #0]
  400c9a:	2b0d      	cmp	r3, #13
  400c9c:	d00b      	beq.n	400cb6 <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	7818      	ldrb	r0, [r3, #0]
  400ca2:	7aba      	ldrb	r2, [r7, #10]
  400ca4:	7af9      	ldrb	r1, [r7, #11]
  400ca6:	687b      	ldr	r3, [r7, #4]
  400ca8:	4c08      	ldr	r4, [pc, #32]	; (400ccc <gfx_mono_draw_string+0x68>)
  400caa:	47a0      	blx	r4
			x += font->width;
  400cac:	687b      	ldr	r3, [r7, #4]
  400cae:	7a1a      	ldrb	r2, [r3, #8]
  400cb0:	7afb      	ldrb	r3, [r7, #11]
  400cb2:	4413      	add	r3, r2
  400cb4:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  400cb6:	68fb      	ldr	r3, [r7, #12]
  400cb8:	3301      	adds	r3, #1
  400cba:	60fb      	str	r3, [r7, #12]
  400cbc:	68fb      	ldr	r3, [r7, #12]
  400cbe:	781b      	ldrb	r3, [r3, #0]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d1da      	bne.n	400c7a <gfx_mono_draw_string+0x16>
}
  400cc4:	bf00      	nop
  400cc6:	371c      	adds	r7, #28
  400cc8:	46bd      	mov	sp, r7
  400cca:	bd90      	pop	{r4, r7, pc}
  400ccc:	00400c11 	.word	0x00400c11

00400cd0 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b082      	sub	sp, #8
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	4603      	mov	r3, r0
  400cd8:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400cda:	79fb      	ldrb	r3, [r7, #7]
  400cdc:	f003 030f 	and.w	r3, r3, #15
  400ce0:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400ce2:	79fb      	ldrb	r3, [r7, #7]
  400ce4:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400ce8:	b2db      	uxtb	r3, r3
  400cea:	4618      	mov	r0, r3
  400cec:	4b02      	ldr	r3, [pc, #8]	; (400cf8 <ssd1306_set_page_address+0x28>)
  400cee:	4798      	blx	r3
	
}
  400cf0:	bf00      	nop
  400cf2:	3708      	adds	r7, #8
  400cf4:	46bd      	mov	sp, r7
  400cf6:	bd80      	pop	{r7, pc}
  400cf8:	004015d5 	.word	0x004015d5

00400cfc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	b082      	sub	sp, #8
  400d00:	af00      	add	r7, sp, #0
  400d02:	4603      	mov	r3, r0
  400d04:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400d06:	79fb      	ldrb	r3, [r7, #7]
  400d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400d0c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400d0e:	79fb      	ldrb	r3, [r7, #7]
  400d10:	091b      	lsrs	r3, r3, #4
  400d12:	b2db      	uxtb	r3, r3
  400d14:	f043 0310 	orr.w	r3, r3, #16
  400d18:	b2db      	uxtb	r3, r3
  400d1a:	4618      	mov	r0, r3
  400d1c:	4b06      	ldr	r3, [pc, #24]	; (400d38 <ssd1306_set_column_address+0x3c>)
  400d1e:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400d20:	79fb      	ldrb	r3, [r7, #7]
  400d22:	f003 030f 	and.w	r3, r3, #15
  400d26:	b2db      	uxtb	r3, r3
  400d28:	4618      	mov	r0, r3
  400d2a:	4b03      	ldr	r3, [pc, #12]	; (400d38 <ssd1306_set_column_address+0x3c>)
  400d2c:	4798      	blx	r3
}
  400d2e:	bf00      	nop
  400d30:	3708      	adds	r7, #8
  400d32:	46bd      	mov	sp, r7
  400d34:	bd80      	pop	{r7, pc}
  400d36:	bf00      	nop
  400d38:	004015d5 	.word	0x004015d5

00400d3c <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400d3c:	b580      	push	{r7, lr}
  400d3e:	b082      	sub	sp, #8
  400d40:	af00      	add	r7, sp, #0
  400d42:	4603      	mov	r3, r0
  400d44:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400d46:	79fb      	ldrb	r3, [r7, #7]
  400d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400d4c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400d4e:	79fb      	ldrb	r3, [r7, #7]
  400d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400d54:	b2db      	uxtb	r3, r3
  400d56:	4618      	mov	r0, r3
  400d58:	4b02      	ldr	r3, [pc, #8]	; (400d64 <ssd1306_set_display_start_line_address+0x28>)
  400d5a:	4798      	blx	r3
}
  400d5c:	bf00      	nop
  400d5e:	3708      	adds	r7, #8
  400d60:	46bd      	mov	sp, r7
  400d62:	bd80      	pop	{r7, pc}
  400d64:	004015d5 	.word	0x004015d5

00400d68 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400d68:	b590      	push	{r4, r7, lr}
  400d6a:	b083      	sub	sp, #12
  400d6c:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400d6e:	4812      	ldr	r0, [pc, #72]	; (400db8 <gfx_mono_ssd1306_init+0x50>)
  400d70:	4b12      	ldr	r3, [pc, #72]	; (400dbc <gfx_mono_ssd1306_init+0x54>)
  400d72:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400d74:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <gfx_mono_ssd1306_init+0x58>)
  400d76:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400d78:	2000      	movs	r0, #0
  400d7a:	4b12      	ldr	r3, [pc, #72]	; (400dc4 <gfx_mono_ssd1306_init+0x5c>)
  400d7c:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400d7e:	2300      	movs	r3, #0
  400d80:	71fb      	strb	r3, [r7, #7]
  400d82:	e012      	b.n	400daa <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400d84:	2300      	movs	r3, #0
  400d86:	71bb      	strb	r3, [r7, #6]
  400d88:	e008      	b.n	400d9c <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400d8a:	79b9      	ldrb	r1, [r7, #6]
  400d8c:	79f8      	ldrb	r0, [r7, #7]
  400d8e:	2301      	movs	r3, #1
  400d90:	2200      	movs	r2, #0
  400d92:	4c0d      	ldr	r4, [pc, #52]	; (400dc8 <gfx_mono_ssd1306_init+0x60>)
  400d94:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400d96:	79bb      	ldrb	r3, [r7, #6]
  400d98:	3301      	adds	r3, #1
  400d9a:	71bb      	strb	r3, [r7, #6]
  400d9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400da0:	2b00      	cmp	r3, #0
  400da2:	daf2      	bge.n	400d8a <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400da4:	79fb      	ldrb	r3, [r7, #7]
  400da6:	3301      	adds	r3, #1
  400da8:	71fb      	strb	r3, [r7, #7]
  400daa:	79fb      	ldrb	r3, [r7, #7]
  400dac:	2b03      	cmp	r3, #3
  400dae:	d9e9      	bls.n	400d84 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400db0:	bf00      	nop
  400db2:	370c      	adds	r7, #12
  400db4:	46bd      	mov	sp, r7
  400db6:	bd90      	pop	{r4, r7, pc}
  400db8:	20400478 	.word	0x20400478
  400dbc:	00400925 	.word	0x00400925
  400dc0:	00401525 	.word	0x00401525
  400dc4:	00400d3d 	.word	0x00400d3d
  400dc8:	00400e69 	.word	0x00400e69

00400dcc <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  400dcc:	b590      	push	{r4, r7, lr}
  400dce:	b085      	sub	sp, #20
  400dd0:	af00      	add	r7, sp, #0
  400dd2:	4603      	mov	r3, r0
  400dd4:	71fb      	strb	r3, [r7, #7]
  400dd6:	460b      	mov	r3, r1
  400dd8:	71bb      	strb	r3, [r7, #6]
  400dda:	4613      	mov	r3, r2
  400ddc:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400de2:	2b00      	cmp	r3, #0
  400de4:	db38      	blt.n	400e58 <gfx_mono_ssd1306_draw_pixel+0x8c>
  400de6:	79bb      	ldrb	r3, [r7, #6]
  400de8:	2b1f      	cmp	r3, #31
  400dea:	d835      	bhi.n	400e58 <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400dec:	79bb      	ldrb	r3, [r7, #6]
  400dee:	08db      	lsrs	r3, r3, #3
  400df0:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  400df2:	79ba      	ldrb	r2, [r7, #6]
  400df4:	7bbb      	ldrb	r3, [r7, #14]
  400df6:	00db      	lsls	r3, r3, #3
  400df8:	1ad3      	subs	r3, r2, r3
  400dfa:	2201      	movs	r2, #1
  400dfc:	fa02 f303 	lsl.w	r3, r2, r3
  400e00:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  400e02:	79fa      	ldrb	r2, [r7, #7]
  400e04:	7bbb      	ldrb	r3, [r7, #14]
  400e06:	4611      	mov	r1, r2
  400e08:	4618      	mov	r0, r3
  400e0a:	4b15      	ldr	r3, [pc, #84]	; (400e60 <gfx_mono_ssd1306_draw_pixel+0x94>)
  400e0c:	4798      	blx	r3
  400e0e:	4603      	mov	r3, r0
  400e10:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400e12:	797b      	ldrb	r3, [r7, #5]
  400e14:	2b01      	cmp	r3, #1
  400e16:	d004      	beq.n	400e22 <gfx_mono_ssd1306_draw_pixel+0x56>
  400e18:	2b02      	cmp	r3, #2
  400e1a:	d011      	beq.n	400e40 <gfx_mono_ssd1306_draw_pixel+0x74>
  400e1c:	2b00      	cmp	r3, #0
  400e1e:	d005      	beq.n	400e2c <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400e20:	e013      	b.n	400e4a <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400e22:	7bfa      	ldrb	r2, [r7, #15]
  400e24:	7b7b      	ldrb	r3, [r7, #13]
  400e26:	4313      	orrs	r3, r2
  400e28:	73fb      	strb	r3, [r7, #15]
		break;
  400e2a:	e00e      	b.n	400e4a <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400e2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400e30:	43db      	mvns	r3, r3
  400e32:	b25a      	sxtb	r2, r3
  400e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400e38:	4013      	ands	r3, r2
  400e3a:	b25b      	sxtb	r3, r3
  400e3c:	73fb      	strb	r3, [r7, #15]
		break;
  400e3e:	e004      	b.n	400e4a <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400e40:	7bfa      	ldrb	r2, [r7, #15]
  400e42:	7b7b      	ldrb	r3, [r7, #13]
  400e44:	4053      	eors	r3, r2
  400e46:	73fb      	strb	r3, [r7, #15]
		break;
  400e48:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400e4a:	7bfa      	ldrb	r2, [r7, #15]
  400e4c:	79f9      	ldrb	r1, [r7, #7]
  400e4e:	7bb8      	ldrb	r0, [r7, #14]
  400e50:	2300      	movs	r3, #0
  400e52:	4c04      	ldr	r4, [pc, #16]	; (400e64 <gfx_mono_ssd1306_draw_pixel+0x98>)
  400e54:	47a0      	blx	r4
  400e56:	e000      	b.n	400e5a <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400e58:	bf00      	nop
}
  400e5a:	3714      	adds	r7, #20
  400e5c:	46bd      	mov	sp, r7
  400e5e:	bd90      	pop	{r4, r7, pc}
  400e60:	00400eed 	.word	0x00400eed
  400e64:	00400e69 	.word	0x00400e69

00400e68 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400e68:	b590      	push	{r4, r7, lr}
  400e6a:	b083      	sub	sp, #12
  400e6c:	af00      	add	r7, sp, #0
  400e6e:	4604      	mov	r4, r0
  400e70:	4608      	mov	r0, r1
  400e72:	4611      	mov	r1, r2
  400e74:	461a      	mov	r2, r3
  400e76:	4623      	mov	r3, r4
  400e78:	71fb      	strb	r3, [r7, #7]
  400e7a:	4603      	mov	r3, r0
  400e7c:	71bb      	strb	r3, [r7, #6]
  400e7e:	460b      	mov	r3, r1
  400e80:	717b      	strb	r3, [r7, #5]
  400e82:	4613      	mov	r3, r2
  400e84:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400e86:	793b      	ldrb	r3, [r7, #4]
  400e88:	f083 0301 	eor.w	r3, r3, #1
  400e8c:	b2db      	uxtb	r3, r3
  400e8e:	2b00      	cmp	r3, #0
  400e90:	d00a      	beq.n	400ea8 <gfx_mono_ssd1306_put_byte+0x40>
  400e92:	79ba      	ldrb	r2, [r7, #6]
  400e94:	79fb      	ldrb	r3, [r7, #7]
  400e96:	4611      	mov	r1, r2
  400e98:	4618      	mov	r0, r3
  400e9a:	4b0f      	ldr	r3, [pc, #60]	; (400ed8 <gfx_mono_ssd1306_put_byte+0x70>)
  400e9c:	4798      	blx	r3
  400e9e:	4603      	mov	r3, r0
  400ea0:	461a      	mov	r2, r3
  400ea2:	797b      	ldrb	r3, [r7, #5]
  400ea4:	4293      	cmp	r3, r2
  400ea6:	d012      	beq.n	400ece <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400ea8:	797a      	ldrb	r2, [r7, #5]
  400eaa:	79b9      	ldrb	r1, [r7, #6]
  400eac:	79fb      	ldrb	r3, [r7, #7]
  400eae:	4618      	mov	r0, r3
  400eb0:	4b0a      	ldr	r3, [pc, #40]	; (400edc <gfx_mono_ssd1306_put_byte+0x74>)
  400eb2:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400eb4:	79fb      	ldrb	r3, [r7, #7]
  400eb6:	4618      	mov	r0, r3
  400eb8:	4b09      	ldr	r3, [pc, #36]	; (400ee0 <gfx_mono_ssd1306_put_byte+0x78>)
  400eba:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400ebc:	79bb      	ldrb	r3, [r7, #6]
  400ebe:	4618      	mov	r0, r3
  400ec0:	4b08      	ldr	r3, [pc, #32]	; (400ee4 <gfx_mono_ssd1306_put_byte+0x7c>)
  400ec2:	4798      	blx	r3

	ssd1306_write_data(data);
  400ec4:	797b      	ldrb	r3, [r7, #5]
  400ec6:	4618      	mov	r0, r3
  400ec8:	4b07      	ldr	r3, [pc, #28]	; (400ee8 <gfx_mono_ssd1306_put_byte+0x80>)
  400eca:	4798      	blx	r3
  400ecc:	e000      	b.n	400ed0 <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400ece:	bf00      	nop
}
  400ed0:	370c      	adds	r7, #12
  400ed2:	46bd      	mov	sp, r7
  400ed4:	bd90      	pop	{r4, r7, pc}
  400ed6:	bf00      	nop
  400ed8:	0040097d 	.word	0x0040097d
  400edc:	00400945 	.word	0x00400945
  400ee0:	00400cd1 	.word	0x00400cd1
  400ee4:	00400cfd 	.word	0x00400cfd
  400ee8:	00401679 	.word	0x00401679

00400eec <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400eec:	b580      	push	{r7, lr}
  400eee:	b082      	sub	sp, #8
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	4603      	mov	r3, r0
  400ef4:	460a      	mov	r2, r1
  400ef6:	71fb      	strb	r3, [r7, #7]
  400ef8:	4613      	mov	r3, r2
  400efa:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400efc:	79ba      	ldrb	r2, [r7, #6]
  400efe:	79fb      	ldrb	r3, [r7, #7]
  400f00:	4611      	mov	r1, r2
  400f02:	4618      	mov	r0, r3
  400f04:	4b03      	ldr	r3, [pc, #12]	; (400f14 <gfx_mono_ssd1306_get_byte+0x28>)
  400f06:	4798      	blx	r3
  400f08:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400f0a:	4618      	mov	r0, r3
  400f0c:	3708      	adds	r7, #8
  400f0e:	46bd      	mov	sp, r7
  400f10:	bd80      	pop	{r7, pc}
  400f12:	bf00      	nop
  400f14:	0040097d 	.word	0x0040097d

00400f18 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400f18:	b480      	push	{r7}
  400f1a:	b083      	sub	sp, #12
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	2b07      	cmp	r3, #7
  400f24:	d825      	bhi.n	400f72 <osc_get_rate+0x5a>
  400f26:	a201      	add	r2, pc, #4	; (adr r2, 400f2c <osc_get_rate+0x14>)
  400f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f2c:	00400f4d 	.word	0x00400f4d
  400f30:	00400f53 	.word	0x00400f53
  400f34:	00400f59 	.word	0x00400f59
  400f38:	00400f5f 	.word	0x00400f5f
  400f3c:	00400f63 	.word	0x00400f63
  400f40:	00400f67 	.word	0x00400f67
  400f44:	00400f6b 	.word	0x00400f6b
  400f48:	00400f6f 	.word	0x00400f6f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400f4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f50:	e010      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f56:	e00d      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f5c:	e00a      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400f5e:	4b08      	ldr	r3, [pc, #32]	; (400f80 <osc_get_rate+0x68>)
  400f60:	e008      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400f62:	4b08      	ldr	r3, [pc, #32]	; (400f84 <osc_get_rate+0x6c>)
  400f64:	e006      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400f66:	4b08      	ldr	r3, [pc, #32]	; (400f88 <osc_get_rate+0x70>)
  400f68:	e004      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400f6a:	4b07      	ldr	r3, [pc, #28]	; (400f88 <osc_get_rate+0x70>)
  400f6c:	e002      	b.n	400f74 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400f6e:	4b06      	ldr	r3, [pc, #24]	; (400f88 <osc_get_rate+0x70>)
  400f70:	e000      	b.n	400f74 <osc_get_rate+0x5c>
	}

	return 0;
  400f72:	2300      	movs	r3, #0
}
  400f74:	4618      	mov	r0, r3
  400f76:	370c      	adds	r7, #12
  400f78:	46bd      	mov	sp, r7
  400f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f7e:	4770      	bx	lr
  400f80:	003d0900 	.word	0x003d0900
  400f84:	007a1200 	.word	0x007a1200
  400f88:	00b71b00 	.word	0x00b71b00

00400f8c <sysclk_get_main_hz>:
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400f90:	2006      	movs	r0, #6
  400f92:	4b05      	ldr	r3, [pc, #20]	; (400fa8 <sysclk_get_main_hz+0x1c>)
  400f94:	4798      	blx	r3
  400f96:	4602      	mov	r2, r0
  400f98:	4613      	mov	r3, r2
  400f9a:	009b      	lsls	r3, r3, #2
  400f9c:	4413      	add	r3, r2
  400f9e:	009a      	lsls	r2, r3, #2
  400fa0:	4413      	add	r3, r2
}
  400fa2:	4618      	mov	r0, r3
  400fa4:	bd80      	pop	{r7, pc}
  400fa6:	bf00      	nop
  400fa8:	00400f19 	.word	0x00400f19

00400fac <sysclk_get_cpu_hz>:
{
  400fac:	b580      	push	{r7, lr}
  400fae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fb0:	4b02      	ldr	r3, [pc, #8]	; (400fbc <sysclk_get_cpu_hz+0x10>)
  400fb2:	4798      	blx	r3
  400fb4:	4603      	mov	r3, r0
}
  400fb6:	4618      	mov	r0, r3
  400fb8:	bd80      	pop	{r7, pc}
  400fba:	bf00      	nop
  400fbc:	00400f8d 	.word	0x00400f8d

00400fc0 <sysclk_get_peripheral_hz>:
{
  400fc0:	b580      	push	{r7, lr}
  400fc2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fc4:	4b02      	ldr	r3, [pc, #8]	; (400fd0 <sysclk_get_peripheral_hz+0x10>)
  400fc6:	4798      	blx	r3
  400fc8:	4603      	mov	r3, r0
  400fca:	085b      	lsrs	r3, r3, #1
}
  400fcc:	4618      	mov	r0, r3
  400fce:	bd80      	pop	{r7, pc}
  400fd0:	00400f8d 	.word	0x00400f8d

00400fd4 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400fd4:	b480      	push	{r7}
  400fd6:	b089      	sub	sp, #36	; 0x24
  400fd8:	af00      	add	r7, sp, #0
  400fda:	6078      	str	r0, [r7, #4]
  400fdc:	687b      	ldr	r3, [r7, #4]
  400fde:	61fb      	str	r3, [r7, #28]
  400fe0:	69fb      	ldr	r3, [r7, #28]
  400fe2:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400fe4:	69bb      	ldr	r3, [r7, #24]
  400fe6:	095a      	lsrs	r2, r3, #5
  400fe8:	69fb      	ldr	r3, [r7, #28]
  400fea:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400fec:	697b      	ldr	r3, [r7, #20]
  400fee:	f003 031f 	and.w	r3, r3, #31
  400ff2:	2101      	movs	r1, #1
  400ff4:	fa01 f303 	lsl.w	r3, r1, r3
  400ff8:	613a      	str	r2, [r7, #16]
  400ffa:	60fb      	str	r3, [r7, #12]
  400ffc:	693b      	ldr	r3, [r7, #16]
  400ffe:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401000:	68ba      	ldr	r2, [r7, #8]
  401002:	4b06      	ldr	r3, [pc, #24]	; (40101c <ioport_enable_pin+0x48>)
  401004:	4413      	add	r3, r2
  401006:	025b      	lsls	r3, r3, #9
  401008:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40100a:	68fb      	ldr	r3, [r7, #12]
  40100c:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  40100e:	bf00      	nop
  401010:	3724      	adds	r7, #36	; 0x24
  401012:	46bd      	mov	sp, r7
  401014:	f85d 7b04 	ldr.w	r7, [sp], #4
  401018:	4770      	bx	lr
  40101a:	bf00      	nop
  40101c:	00200707 	.word	0x00200707

00401020 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401020:	b480      	push	{r7}
  401022:	b08d      	sub	sp, #52	; 0x34
  401024:	af00      	add	r7, sp, #0
  401026:	6078      	str	r0, [r7, #4]
  401028:	6039      	str	r1, [r7, #0]
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40102e:	683b      	ldr	r3, [r7, #0]
  401030:	62bb      	str	r3, [r7, #40]	; 0x28
  401032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401034:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401038:	095a      	lsrs	r2, r3, #5
  40103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40103c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40103e:	6a3b      	ldr	r3, [r7, #32]
  401040:	f003 031f 	and.w	r3, r3, #31
  401044:	2101      	movs	r1, #1
  401046:	fa01 f303 	lsl.w	r3, r1, r3
  40104a:	61fa      	str	r2, [r7, #28]
  40104c:	61bb      	str	r3, [r7, #24]
  40104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401050:	617b      	str	r3, [r7, #20]
  401052:	69fb      	ldr	r3, [r7, #28]
  401054:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401056:	693a      	ldr	r2, [r7, #16]
  401058:	4b37      	ldr	r3, [pc, #220]	; (401138 <ioport_set_pin_mode+0x118>)
  40105a:	4413      	add	r3, r2
  40105c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40105e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401060:	697b      	ldr	r3, [r7, #20]
  401062:	f003 0308 	and.w	r3, r3, #8
  401066:	2b00      	cmp	r3, #0
  401068:	d003      	beq.n	401072 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40106a:	68fb      	ldr	r3, [r7, #12]
  40106c:	69ba      	ldr	r2, [r7, #24]
  40106e:	665a      	str	r2, [r3, #100]	; 0x64
  401070:	e002      	b.n	401078 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  401072:	68fb      	ldr	r3, [r7, #12]
  401074:	69ba      	ldr	r2, [r7, #24]
  401076:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401078:	697b      	ldr	r3, [r7, #20]
  40107a:	f003 0310 	and.w	r3, r3, #16
  40107e:	2b00      	cmp	r3, #0
  401080:	d004      	beq.n	40108c <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401082:	68fb      	ldr	r3, [r7, #12]
  401084:	69ba      	ldr	r2, [r7, #24]
  401086:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40108a:	e003      	b.n	401094 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  40108c:	68fb      	ldr	r3, [r7, #12]
  40108e:	69ba      	ldr	r2, [r7, #24]
  401090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401094:	697b      	ldr	r3, [r7, #20]
  401096:	f003 0320 	and.w	r3, r3, #32
  40109a:	2b00      	cmp	r3, #0
  40109c:	d003      	beq.n	4010a6 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40109e:	68fb      	ldr	r3, [r7, #12]
  4010a0:	69ba      	ldr	r2, [r7, #24]
  4010a2:	651a      	str	r2, [r3, #80]	; 0x50
  4010a4:	e002      	b.n	4010ac <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4010a6:	68fb      	ldr	r3, [r7, #12]
  4010a8:	69ba      	ldr	r2, [r7, #24]
  4010aa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4010ac:	697b      	ldr	r3, [r7, #20]
  4010ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d003      	beq.n	4010be <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4010b6:	68fb      	ldr	r3, [r7, #12]
  4010b8:	69ba      	ldr	r2, [r7, #24]
  4010ba:	621a      	str	r2, [r3, #32]
  4010bc:	e002      	b.n	4010c4 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4010be:	68fb      	ldr	r3, [r7, #12]
  4010c0:	69ba      	ldr	r2, [r7, #24]
  4010c2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4010c4:	697b      	ldr	r3, [r7, #20]
  4010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010ca:	2b00      	cmp	r3, #0
  4010cc:	d004      	beq.n	4010d8 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4010ce:	68fb      	ldr	r3, [r7, #12]
  4010d0:	69ba      	ldr	r2, [r7, #24]
  4010d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4010d6:	e003      	b.n	4010e0 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4010d8:	68fb      	ldr	r3, [r7, #12]
  4010da:	69ba      	ldr	r2, [r7, #24]
  4010dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4010e0:	697b      	ldr	r3, [r7, #20]
  4010e2:	f003 0301 	and.w	r3, r3, #1
  4010e6:	2b00      	cmp	r3, #0
  4010e8:	d006      	beq.n	4010f8 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4010ea:	68fb      	ldr	r3, [r7, #12]
  4010ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010ee:	69bb      	ldr	r3, [r7, #24]
  4010f0:	431a      	orrs	r2, r3
  4010f2:	68fb      	ldr	r3, [r7, #12]
  4010f4:	671a      	str	r2, [r3, #112]	; 0x70
  4010f6:	e006      	b.n	401106 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4010f8:	68fb      	ldr	r3, [r7, #12]
  4010fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010fc:	69bb      	ldr	r3, [r7, #24]
  4010fe:	43db      	mvns	r3, r3
  401100:	401a      	ands	r2, r3
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401106:	697b      	ldr	r3, [r7, #20]
  401108:	f003 0302 	and.w	r3, r3, #2
  40110c:	2b00      	cmp	r3, #0
  40110e:	d006      	beq.n	40111e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401110:	68fb      	ldr	r3, [r7, #12]
  401112:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401114:	69bb      	ldr	r3, [r7, #24]
  401116:	431a      	orrs	r2, r3
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40111c:	e006      	b.n	40112c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40111e:	68fb      	ldr	r3, [r7, #12]
  401120:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401122:	69bb      	ldr	r3, [r7, #24]
  401124:	43db      	mvns	r3, r3
  401126:	401a      	ands	r2, r3
  401128:	68fb      	ldr	r3, [r7, #12]
  40112a:	675a      	str	r2, [r3, #116]	; 0x74
  40112c:	bf00      	nop
  40112e:	3734      	adds	r7, #52	; 0x34
  401130:	46bd      	mov	sp, r7
  401132:	f85d 7b04 	ldr.w	r7, [sp], #4
  401136:	4770      	bx	lr
  401138:	00200707 	.word	0x00200707

0040113c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  40113c:	b480      	push	{r7}
  40113e:	b08d      	sub	sp, #52	; 0x34
  401140:	af00      	add	r7, sp, #0
  401142:	6078      	str	r0, [r7, #4]
  401144:	460b      	mov	r3, r1
  401146:	70fb      	strb	r3, [r7, #3]
  401148:	687b      	ldr	r3, [r7, #4]
  40114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40114c:	78fb      	ldrb	r3, [r7, #3]
  40114e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401154:	627b      	str	r3, [r7, #36]	; 0x24
  401156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401158:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40115a:	6a3b      	ldr	r3, [r7, #32]
  40115c:	095b      	lsrs	r3, r3, #5
  40115e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401160:	69fa      	ldr	r2, [r7, #28]
  401162:	4b17      	ldr	r3, [pc, #92]	; (4011c0 <ioport_set_pin_dir+0x84>)
  401164:	4413      	add	r3, r2
  401166:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401168:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40116a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40116e:	2b01      	cmp	r3, #1
  401170:	d109      	bne.n	401186 <ioport_set_pin_dir+0x4a>
  401172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401174:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401176:	697b      	ldr	r3, [r7, #20]
  401178:	f003 031f 	and.w	r3, r3, #31
  40117c:	2201      	movs	r2, #1
  40117e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401180:	69bb      	ldr	r3, [r7, #24]
  401182:	611a      	str	r2, [r3, #16]
  401184:	e00c      	b.n	4011a0 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40118a:	2b00      	cmp	r3, #0
  40118c:	d108      	bne.n	4011a0 <ioport_set_pin_dir+0x64>
  40118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401190:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401192:	693b      	ldr	r3, [r7, #16]
  401194:	f003 031f 	and.w	r3, r3, #31
  401198:	2201      	movs	r2, #1
  40119a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40119c:	69bb      	ldr	r3, [r7, #24]
  40119e:	615a      	str	r2, [r3, #20]
  4011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011a2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4011a4:	68fb      	ldr	r3, [r7, #12]
  4011a6:	f003 031f 	and.w	r3, r3, #31
  4011aa:	2201      	movs	r2, #1
  4011ac:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011ae:	69bb      	ldr	r3, [r7, #24]
  4011b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4011b4:	bf00      	nop
  4011b6:	3734      	adds	r7, #52	; 0x34
  4011b8:	46bd      	mov	sp, r7
  4011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011be:	4770      	bx	lr
  4011c0:	00200707 	.word	0x00200707

004011c4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b08b      	sub	sp, #44	; 0x2c
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
  4011cc:	460b      	mov	r3, r1
  4011ce:	70fb      	strb	r3, [r7, #3]
  4011d0:	687b      	ldr	r3, [r7, #4]
  4011d2:	627b      	str	r3, [r7, #36]	; 0x24
  4011d4:	78fb      	ldrb	r3, [r7, #3]
  4011d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011dc:	61fb      	str	r3, [r7, #28]
  4011de:	69fb      	ldr	r3, [r7, #28]
  4011e0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4011e2:	69bb      	ldr	r3, [r7, #24]
  4011e4:	095b      	lsrs	r3, r3, #5
  4011e6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4011e8:	697a      	ldr	r2, [r7, #20]
  4011ea:	4b10      	ldr	r3, [pc, #64]	; (40122c <ioport_set_pin_level+0x68>)
  4011ec:	4413      	add	r3, r2
  4011ee:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4011f0:	613b      	str	r3, [r7, #16]

	if (level) {
  4011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4011f6:	2b00      	cmp	r3, #0
  4011f8:	d009      	beq.n	40120e <ioport_set_pin_level+0x4a>
  4011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011fc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4011fe:	68fb      	ldr	r3, [r7, #12]
  401200:	f003 031f 	and.w	r3, r3, #31
  401204:	2201      	movs	r2, #1
  401206:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401208:	693b      	ldr	r3, [r7, #16]
  40120a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  40120c:	e008      	b.n	401220 <ioport_set_pin_level+0x5c>
  40120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401210:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401212:	68bb      	ldr	r3, [r7, #8]
  401214:	f003 031f 	and.w	r3, r3, #31
  401218:	2201      	movs	r2, #1
  40121a:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40121c:	693b      	ldr	r3, [r7, #16]
  40121e:	635a      	str	r2, [r3, #52]	; 0x34
  401220:	bf00      	nop
  401222:	372c      	adds	r7, #44	; 0x2c
  401224:	46bd      	mov	sp, r7
  401226:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122a:	4770      	bx	lr
  40122c:	00200707 	.word	0x00200707

00401230 <spi_reset>:
{
  401230:	b480      	push	{r7}
  401232:	b083      	sub	sp, #12
  401234:	af00      	add	r7, sp, #0
  401236:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401238:	687b      	ldr	r3, [r7, #4]
  40123a:	2280      	movs	r2, #128	; 0x80
  40123c:	601a      	str	r2, [r3, #0]
}
  40123e:	bf00      	nop
  401240:	370c      	adds	r7, #12
  401242:	46bd      	mov	sp, r7
  401244:	f85d 7b04 	ldr.w	r7, [sp], #4
  401248:	4770      	bx	lr

0040124a <spi_enable>:
{
  40124a:	b480      	push	{r7}
  40124c:	b083      	sub	sp, #12
  40124e:	af00      	add	r7, sp, #0
  401250:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401252:	687b      	ldr	r3, [r7, #4]
  401254:	2201      	movs	r2, #1
  401256:	601a      	str	r2, [r3, #0]
}
  401258:	bf00      	nop
  40125a:	370c      	adds	r7, #12
  40125c:	46bd      	mov	sp, r7
  40125e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401262:	4770      	bx	lr

00401264 <spi_disable>:
{
  401264:	b480      	push	{r7}
  401266:	b083      	sub	sp, #12
  401268:	af00      	add	r7, sp, #0
  40126a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40126c:	687b      	ldr	r3, [r7, #4]
  40126e:	2202      	movs	r2, #2
  401270:	601a      	str	r2, [r3, #0]
}
  401272:	bf00      	nop
  401274:	370c      	adds	r7, #12
  401276:	46bd      	mov	sp, r7
  401278:	f85d 7b04 	ldr.w	r7, [sp], #4
  40127c:	4770      	bx	lr

0040127e <spi_set_master_mode>:
{
  40127e:	b480      	push	{r7}
  401280:	b083      	sub	sp, #12
  401282:	af00      	add	r7, sp, #0
  401284:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401286:	687b      	ldr	r3, [r7, #4]
  401288:	685b      	ldr	r3, [r3, #4]
  40128a:	f043 0201 	orr.w	r2, r3, #1
  40128e:	687b      	ldr	r3, [r7, #4]
  401290:	605a      	str	r2, [r3, #4]
}
  401292:	bf00      	nop
  401294:	370c      	adds	r7, #12
  401296:	46bd      	mov	sp, r7
  401298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40129c:	4770      	bx	lr

0040129e <spi_set_fixed_peripheral_select>:
{
  40129e:	b480      	push	{r7}
  4012a0:	b083      	sub	sp, #12
  4012a2:	af00      	add	r7, sp, #0
  4012a4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	685b      	ldr	r3, [r3, #4]
  4012aa:	f023 0202 	bic.w	r2, r3, #2
  4012ae:	687b      	ldr	r3, [r7, #4]
  4012b0:	605a      	str	r2, [r3, #4]
}
  4012b2:	bf00      	nop
  4012b4:	370c      	adds	r7, #12
  4012b6:	46bd      	mov	sp, r7
  4012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012bc:	4770      	bx	lr

004012be <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4012be:	b480      	push	{r7}
  4012c0:	b083      	sub	sp, #12
  4012c2:	af00      	add	r7, sp, #0
  4012c4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4012c6:	687b      	ldr	r3, [r7, #4]
  4012c8:	685b      	ldr	r3, [r3, #4]
  4012ca:	f043 0210 	orr.w	r2, r3, #16
  4012ce:	687b      	ldr	r3, [r7, #4]
  4012d0:	605a      	str	r2, [r3, #4]
}
  4012d2:	bf00      	nop
  4012d4:	370c      	adds	r7, #12
  4012d6:	46bd      	mov	sp, r7
  4012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012dc:	4770      	bx	lr

004012de <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  4012de:	b480      	push	{r7}
  4012e0:	b083      	sub	sp, #12
  4012e2:	af00      	add	r7, sp, #0
  4012e4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4012e6:	687b      	ldr	r3, [r7, #4]
  4012e8:	685b      	ldr	r3, [r3, #4]
  4012ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  4012ee:	687b      	ldr	r3, [r7, #4]
  4012f0:	605a      	str	r2, [r3, #4]
}
  4012f2:	bf00      	nop
  4012f4:	370c      	adds	r7, #12
  4012f6:	46bd      	mov	sp, r7
  4012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012fc:	4770      	bx	lr
	...

00401300 <ssd1306_hard_reset>:
{
  401300:	b580      	push	{r7, lr}
  401302:	b082      	sub	sp, #8
  401304:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  401306:	4b0f      	ldr	r3, [pc, #60]	; (401344 <ssd1306_hard_reset+0x44>)
  401308:	4798      	blx	r3
  40130a:	4602      	mov	r2, r0
  40130c:	4b0e      	ldr	r3, [pc, #56]	; (401348 <ssd1306_hard_reset+0x48>)
  40130e:	fba3 2302 	umull	r2, r3, r3, r2
  401312:	0c9a      	lsrs	r2, r3, #18
  401314:	4613      	mov	r3, r2
  401316:	009b      	lsls	r3, r3, #2
  401318:	4413      	add	r3, r2
  40131a:	005b      	lsls	r3, r3, #1
  40131c:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  40131e:	2100      	movs	r1, #0
  401320:	2051      	movs	r0, #81	; 0x51
  401322:	4b0a      	ldr	r3, [pc, #40]	; (40134c <ssd1306_hard_reset+0x4c>)
  401324:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  401326:	6878      	ldr	r0, [r7, #4]
  401328:	4b09      	ldr	r3, [pc, #36]	; (401350 <ssd1306_hard_reset+0x50>)
  40132a:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  40132c:	2101      	movs	r1, #1
  40132e:	2051      	movs	r0, #81	; 0x51
  401330:	4b06      	ldr	r3, [pc, #24]	; (40134c <ssd1306_hard_reset+0x4c>)
  401332:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  401334:	6878      	ldr	r0, [r7, #4]
  401336:	4b06      	ldr	r3, [pc, #24]	; (401350 <ssd1306_hard_reset+0x50>)
  401338:	4798      	blx	r3
}
  40133a:	bf00      	nop
  40133c:	3708      	adds	r7, #8
  40133e:	46bd      	mov	sp, r7
  401340:	bd80      	pop	{r7, pc}
  401342:	bf00      	nop
  401344:	00400fad 	.word	0x00400fad
  401348:	431bde83 	.word	0x431bde83
  40134c:	004011c5 	.word	0x004011c5
  401350:	20400001 	.word	0x20400001

00401354 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  401354:	b580      	push	{r7, lr}
  401356:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  401358:	20af      	movs	r0, #175	; 0xaf
  40135a:	4b02      	ldr	r3, [pc, #8]	; (401364 <ssd1306_display_on+0x10>)
  40135c:	4798      	blx	r3
}
  40135e:	bf00      	nop
  401360:	bd80      	pop	{r7, pc}
  401362:	bf00      	nop
  401364:	004015d5 	.word	0x004015d5

00401368 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  401368:	b580      	push	{r7, lr}
  40136a:	b082      	sub	sp, #8
  40136c:	af00      	add	r7, sp, #0
  40136e:	4603      	mov	r3, r0
  401370:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  401372:	2081      	movs	r0, #129	; 0x81
  401374:	4b05      	ldr	r3, [pc, #20]	; (40138c <ssd1306_set_contrast+0x24>)
  401376:	4798      	blx	r3
	ssd1306_write_command(contrast);
  401378:	79fb      	ldrb	r3, [r7, #7]
  40137a:	4618      	mov	r0, r3
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <ssd1306_set_contrast+0x24>)
  40137e:	4798      	blx	r3
	return contrast;
  401380:	79fb      	ldrb	r3, [r7, #7]
}
  401382:	4618      	mov	r0, r3
  401384:	3708      	adds	r7, #8
  401386:	46bd      	mov	sp, r7
  401388:	bd80      	pop	{r7, pc}
  40138a:	bf00      	nop
  40138c:	004015d5 	.word	0x004015d5

00401390 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  401390:	b580      	push	{r7, lr}
  401392:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401394:	20a6      	movs	r0, #166	; 0xa6
  401396:	4b02      	ldr	r3, [pc, #8]	; (4013a0 <ssd1306_display_invert_disable+0x10>)
  401398:	4798      	blx	r3
}
  40139a:	bf00      	nop
  40139c:	bd80      	pop	{r7, pc}
  40139e:	bf00      	nop
  4013a0:	004015d5 	.word	0x004015d5

004013a4 <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  4013a4:	b590      	push	{r4, r7, lr}
  4013a6:	b083      	sub	sp, #12
  4013a8:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  4013aa:	2101      	movs	r1, #1
  4013ac:	2051      	movs	r0, #81	; 0x51
  4013ae:	4b46      	ldr	r3, [pc, #280]	; (4014c8 <ssd1306_interface_init+0x124>)
  4013b0:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  4013b2:	2101      	movs	r1, #1
  4013b4:	2023      	movs	r0, #35	; 0x23
  4013b6:	4b44      	ldr	r3, [pc, #272]	; (4014c8 <ssd1306_interface_init+0x124>)
  4013b8:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  4013ba:	2108      	movs	r1, #8
  4013bc:	2051      	movs	r0, #81	; 0x51
  4013be:	4b43      	ldr	r3, [pc, #268]	; (4014cc <ssd1306_interface_init+0x128>)
  4013c0:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  4013c2:	2108      	movs	r1, #8
  4013c4:	2023      	movs	r0, #35	; 0x23
  4013c6:	4b41      	ldr	r3, [pc, #260]	; (4014cc <ssd1306_interface_init+0x128>)
  4013c8:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  4013ca:	2023      	movs	r0, #35	; 0x23
  4013cc:	4b40      	ldr	r3, [pc, #256]	; (4014d0 <ssd1306_interface_init+0x12c>)
  4013ce:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  4013d0:	2051      	movs	r0, #81	; 0x51
  4013d2:	4b3f      	ldr	r3, [pc, #252]	; (4014d0 <ssd1306_interface_init+0x12c>)
  4013d4:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  4013d6:	2101      	movs	r1, #1
  4013d8:	2023      	movs	r0, #35	; 0x23
  4013da:	4b3e      	ldr	r3, [pc, #248]	; (4014d4 <ssd1306_interface_init+0x130>)
  4013dc:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4013de:	2101      	movs	r1, #1
  4013e0:	2051      	movs	r0, #81	; 0x51
  4013e2:	4b3c      	ldr	r3, [pc, #240]	; (4014d4 <ssd1306_interface_init+0x130>)
  4013e4:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4013e6:	2300      	movs	r3, #0
  4013e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4013ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013f0:	4839      	ldr	r0, [pc, #228]	; (4014d8 <ssd1306_interface_init+0x134>)
  4013f2:	4c3a      	ldr	r4, [pc, #232]	; (4014dc <ssd1306_interface_init+0x138>)
  4013f4:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4013f6:	2300      	movs	r3, #0
  4013f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4013fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401400:	4835      	ldr	r0, [pc, #212]	; (4014d8 <ssd1306_interface_init+0x134>)
  401402:	4c36      	ldr	r4, [pc, #216]	; (4014dc <ssd1306_interface_init+0x138>)
  401404:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401406:	2300      	movs	r3, #0
  401408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40140c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401410:	4831      	ldr	r0, [pc, #196]	; (4014d8 <ssd1306_interface_init+0x134>)
  401412:	4c32      	ldr	r4, [pc, #200]	; (4014dc <ssd1306_interface_init+0x138>)
  401414:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401416:	2300      	movs	r3, #0
  401418:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40141c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401420:	482d      	ldr	r0, [pc, #180]	; (4014d8 <ssd1306_interface_init+0x134>)
  401422:	4c2e      	ldr	r4, [pc, #184]	; (4014dc <ssd1306_interface_init+0x138>)
  401424:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401426:	2300      	movs	r3, #0
  401428:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40142c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401430:	4829      	ldr	r0, [pc, #164]	; (4014d8 <ssd1306_interface_init+0x134>)
  401432:	4c2a      	ldr	r4, [pc, #168]	; (4014dc <ssd1306_interface_init+0x138>)
  401434:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401436:	2300      	movs	r3, #0
  401438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40143c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401440:	4825      	ldr	r0, [pc, #148]	; (4014d8 <ssd1306_interface_init+0x134>)
  401442:	4c26      	ldr	r4, [pc, #152]	; (4014dc <ssd1306_interface_init+0x138>)
  401444:	47a0      	blx	r4
		
		spi_disable(SPI0);
  401446:	4826      	ldr	r0, [pc, #152]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401448:	4b26      	ldr	r3, [pc, #152]	; (4014e4 <ssd1306_interface_init+0x140>)
  40144a:	4798      	blx	r3
		spi_reset(SPI0);
  40144c:	4824      	ldr	r0, [pc, #144]	; (4014e0 <ssd1306_interface_init+0x13c>)
  40144e:	4b26      	ldr	r3, [pc, #152]	; (4014e8 <ssd1306_interface_init+0x144>)
  401450:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  401452:	4823      	ldr	r0, [pc, #140]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401454:	4b25      	ldr	r3, [pc, #148]	; (4014ec <ssd1306_interface_init+0x148>)
  401456:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  401458:	2208      	movs	r2, #8
  40145a:	2101      	movs	r1, #1
  40145c:	4820      	ldr	r0, [pc, #128]	; (4014e0 <ssd1306_interface_init+0x13c>)
  40145e:	4b24      	ldr	r3, [pc, #144]	; (4014f0 <ssd1306_interface_init+0x14c>)
  401460:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  401462:	2200      	movs	r2, #0
  401464:	2101      	movs	r1, #1
  401466:	481e      	ldr	r0, [pc, #120]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401468:	4b22      	ldr	r3, [pc, #136]	; (4014f4 <ssd1306_interface_init+0x150>)
  40146a:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40146c:	2200      	movs	r2, #0
  40146e:	2101      	movs	r1, #1
  401470:	481b      	ldr	r0, [pc, #108]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401472:	4b21      	ldr	r3, [pc, #132]	; (4014f8 <ssd1306_interface_init+0x154>)
  401474:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  401476:	481a      	ldr	r0, [pc, #104]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401478:	4b20      	ldr	r3, [pc, #128]	; (4014fc <ssd1306_interface_init+0x158>)
  40147a:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  40147c:	2200      	movs	r2, #0
  40147e:	2101      	movs	r1, #1
  401480:	4817      	ldr	r0, [pc, #92]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401482:	4b1f      	ldr	r3, [pc, #124]	; (401500 <ssd1306_interface_init+0x15c>)
  401484:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  401486:	4816      	ldr	r0, [pc, #88]	; (4014e0 <ssd1306_interface_init+0x13c>)
  401488:	4b1e      	ldr	r3, [pc, #120]	; (401504 <ssd1306_interface_init+0x160>)
  40148a:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  40148c:	4814      	ldr	r0, [pc, #80]	; (4014e0 <ssd1306_interface_init+0x13c>)
  40148e:	4b1e      	ldr	r3, [pc, #120]	; (401508 <ssd1306_interface_init+0x164>)
  401490:	4798      	blx	r3
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  401492:	4b1e      	ldr	r3, [pc, #120]	; (40150c <ssd1306_interface_init+0x168>)
  401494:	4798      	blx	r3
  401496:	4603      	mov	r3, r0
  401498:	4619      	mov	r1, r3
  40149a:	481d      	ldr	r0, [pc, #116]	; (401510 <ssd1306_interface_init+0x16c>)
  40149c:	4b1d      	ldr	r3, [pc, #116]	; (401514 <ssd1306_interface_init+0x170>)
  40149e:	4798      	blx	r3
  4014a0:	4603      	mov	r3, r0
  4014a2:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  4014a4:	687b      	ldr	r3, [r7, #4]
  4014a6:	b2db      	uxtb	r3, r3
  4014a8:	461a      	mov	r2, r3
  4014aa:	2101      	movs	r1, #1
  4014ac:	480c      	ldr	r0, [pc, #48]	; (4014e0 <ssd1306_interface_init+0x13c>)
  4014ae:	4b1a      	ldr	r3, [pc, #104]	; (401518 <ssd1306_interface_init+0x174>)
  4014b0:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4014b2:	480b      	ldr	r0, [pc, #44]	; (4014e0 <ssd1306_interface_init+0x13c>)
  4014b4:	4b19      	ldr	r3, [pc, #100]	; (40151c <ssd1306_interface_init+0x178>)
  4014b6:	4798      	blx	r3
		
		spi_enable(SPI0);
  4014b8:	4809      	ldr	r0, [pc, #36]	; (4014e0 <ssd1306_interface_init+0x13c>)
  4014ba:	4b19      	ldr	r3, [pc, #100]	; (401520 <ssd1306_interface_init+0x17c>)
  4014bc:	4798      	blx	r3
}
  4014be:	bf00      	nop
  4014c0:	370c      	adds	r7, #12
  4014c2:	46bd      	mov	sp, r7
  4014c4:	bd90      	pop	{r4, r7, pc}
  4014c6:	bf00      	nop
  4014c8:	0040113d 	.word	0x0040113d
  4014cc:	00401021 	.word	0x00401021
  4014d0:	00400fd5 	.word	0x00400fd5
  4014d4:	004011c5 	.word	0x004011c5
  4014d8:	400e1400 	.word	0x400e1400
  4014dc:	0040223d 	.word	0x0040223d
  4014e0:	40008000 	.word	0x40008000
  4014e4:	00401265 	.word	0x00401265
  4014e8:	00401231 	.word	0x00401231
  4014ec:	0040127f 	.word	0x0040127f
  4014f0:	00400525 	.word	0x00400525
  4014f4:	00400485 	.word	0x00400485
  4014f8:	004004d5 	.word	0x004004d5
  4014fc:	0040129f 	.word	0x0040129f
  401500:	004005cb 	.word	0x004005cb
  401504:	004012df 	.word	0x004012df
  401508:	004012bf 	.word	0x004012bf
  40150c:	00400fc1 	.word	0x00400fc1
  401510:	001e8480 	.word	0x001e8480
  401514:	00400615 	.word	0x00400615
  401518:	00400651 	.word	0x00400651
  40151c:	00400395 	.word	0x00400395
  401520:	0040124b 	.word	0x0040124b

00401524 <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  401524:	b580      	push	{r7, lr}
  401526:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  401528:	4b23      	ldr	r3, [pc, #140]	; (4015b8 <ssd1306_init+0x94>)
  40152a:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  40152c:	4b23      	ldr	r3, [pc, #140]	; (4015bc <ssd1306_init+0x98>)
  40152e:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401530:	2101      	movs	r1, #1
  401532:	2051      	movs	r0, #81	; 0x51
  401534:	4b22      	ldr	r3, [pc, #136]	; (4015c0 <ssd1306_init+0x9c>)
  401536:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401538:	20a8      	movs	r0, #168	; 0xa8
  40153a:	4b22      	ldr	r3, [pc, #136]	; (4015c4 <ssd1306_init+0xa0>)
  40153c:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  40153e:	201f      	movs	r0, #31
  401540:	4b20      	ldr	r3, [pc, #128]	; (4015c4 <ssd1306_init+0xa0>)
  401542:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  401544:	20d3      	movs	r0, #211	; 0xd3
  401546:	4b1f      	ldr	r3, [pc, #124]	; (4015c4 <ssd1306_init+0xa0>)
  401548:	4798      	blx	r3
	ssd1306_write_command(0x00);
  40154a:	2000      	movs	r0, #0
  40154c:	4b1d      	ldr	r3, [pc, #116]	; (4015c4 <ssd1306_init+0xa0>)
  40154e:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401550:	2040      	movs	r0, #64	; 0x40
  401552:	4b1c      	ldr	r3, [pc, #112]	; (4015c4 <ssd1306_init+0xa0>)
  401554:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  401556:	20a1      	movs	r0, #161	; 0xa1
  401558:	4b1a      	ldr	r3, [pc, #104]	; (4015c4 <ssd1306_init+0xa0>)
  40155a:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40155c:	20c8      	movs	r0, #200	; 0xc8
  40155e:	4b19      	ldr	r3, [pc, #100]	; (4015c4 <ssd1306_init+0xa0>)
  401560:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  401562:	20da      	movs	r0, #218	; 0xda
  401564:	4b17      	ldr	r3, [pc, #92]	; (4015c4 <ssd1306_init+0xa0>)
  401566:	4798      	blx	r3
	ssd1306_write_command(0x02);
  401568:	2002      	movs	r0, #2
  40156a:	4b16      	ldr	r3, [pc, #88]	; (4015c4 <ssd1306_init+0xa0>)
  40156c:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  40156e:	208f      	movs	r0, #143	; 0x8f
  401570:	4b15      	ldr	r3, [pc, #84]	; (4015c8 <ssd1306_init+0xa4>)
  401572:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401574:	20a4      	movs	r0, #164	; 0xa4
  401576:	4b13      	ldr	r3, [pc, #76]	; (4015c4 <ssd1306_init+0xa0>)
  401578:	4798      	blx	r3

	ssd1306_display_invert_disable();
  40157a:	4b14      	ldr	r3, [pc, #80]	; (4015cc <ssd1306_init+0xa8>)
  40157c:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40157e:	20d5      	movs	r0, #213	; 0xd5
  401580:	4b10      	ldr	r3, [pc, #64]	; (4015c4 <ssd1306_init+0xa0>)
  401582:	4798      	blx	r3
	ssd1306_write_command(0x80);
  401584:	2080      	movs	r0, #128	; 0x80
  401586:	4b0f      	ldr	r3, [pc, #60]	; (4015c4 <ssd1306_init+0xa0>)
  401588:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40158a:	208d      	movs	r0, #141	; 0x8d
  40158c:	4b0d      	ldr	r3, [pc, #52]	; (4015c4 <ssd1306_init+0xa0>)
  40158e:	4798      	blx	r3
	ssd1306_write_command(0x14);
  401590:	2014      	movs	r0, #20
  401592:	4b0c      	ldr	r3, [pc, #48]	; (4015c4 <ssd1306_init+0xa0>)
  401594:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401596:	20db      	movs	r0, #219	; 0xdb
  401598:	4b0a      	ldr	r3, [pc, #40]	; (4015c4 <ssd1306_init+0xa0>)
  40159a:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40159c:	2040      	movs	r0, #64	; 0x40
  40159e:	4b09      	ldr	r3, [pc, #36]	; (4015c4 <ssd1306_init+0xa0>)
  4015a0:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4015a2:	20d9      	movs	r0, #217	; 0xd9
  4015a4:	4b07      	ldr	r3, [pc, #28]	; (4015c4 <ssd1306_init+0xa0>)
  4015a6:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  4015a8:	20f1      	movs	r0, #241	; 0xf1
  4015aa:	4b06      	ldr	r3, [pc, #24]	; (4015c4 <ssd1306_init+0xa0>)
  4015ac:	4798      	blx	r3

	
	ssd1306_display_on();
  4015ae:	4b08      	ldr	r3, [pc, #32]	; (4015d0 <ssd1306_init+0xac>)
  4015b0:	4798      	blx	r3
}
  4015b2:	bf00      	nop
  4015b4:	bd80      	pop	{r7, pc}
  4015b6:	bf00      	nop
  4015b8:	004013a5 	.word	0x004013a5
  4015bc:	00401301 	.word	0x00401301
  4015c0:	004011c5 	.word	0x004011c5
  4015c4:	004015d5 	.word	0x004015d5
  4015c8:	00401369 	.word	0x00401369
  4015cc:	00401391 	.word	0x00401391
  4015d0:	00401355 	.word	0x00401355

004015d4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015d6:	b083      	sub	sp, #12
  4015d8:	af00      	add	r7, sp, #0
  4015da:	4603      	mov	r3, r0
  4015dc:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  4015de:	2100      	movs	r1, #0
  4015e0:	2023      	movs	r0, #35	; 0x23
  4015e2:	4b1c      	ldr	r3, [pc, #112]	; (401654 <ssd1306_write_command+0x80>)
  4015e4:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4015e6:	2101      	movs	r1, #1
  4015e8:	481b      	ldr	r0, [pc, #108]	; (401658 <ssd1306_write_command+0x84>)
  4015ea:	4b1c      	ldr	r3, [pc, #112]	; (40165c <ssd1306_write_command+0x88>)
  4015ec:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4015ee:	79fb      	ldrb	r3, [r7, #7]
  4015f0:	b299      	uxth	r1, r3
  4015f2:	2301      	movs	r3, #1
  4015f4:	2201      	movs	r2, #1
  4015f6:	4818      	ldr	r0, [pc, #96]	; (401658 <ssd1306_write_command+0x84>)
  4015f8:	4c19      	ldr	r4, [pc, #100]	; (401660 <ssd1306_write_command+0x8c>)
  4015fa:	47a0      	blx	r4
	delay_us(10);
  4015fc:	4b19      	ldr	r3, [pc, #100]	; (401664 <ssd1306_write_command+0x90>)
  4015fe:	4798      	blx	r3
  401600:	4603      	mov	r3, r0
  401602:	4619      	mov	r1, r3
  401604:	f04f 0200 	mov.w	r2, #0
  401608:	460b      	mov	r3, r1
  40160a:	4614      	mov	r4, r2
  40160c:	00a6      	lsls	r6, r4, #2
  40160e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401612:	009d      	lsls	r5, r3, #2
  401614:	462b      	mov	r3, r5
  401616:	4634      	mov	r4, r6
  401618:	185b      	adds	r3, r3, r1
  40161a:	eb44 0402 	adc.w	r4, r4, r2
  40161e:	18db      	adds	r3, r3, r3
  401620:	eb44 0404 	adc.w	r4, r4, r4
  401624:	4619      	mov	r1, r3
  401626:	4622      	mov	r2, r4
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <ssd1306_write_command+0x94>)
  40162a:	f04f 0400 	mov.w	r4, #0
  40162e:	18cd      	adds	r5, r1, r3
  401630:	eb42 0604 	adc.w	r6, r2, r4
  401634:	4628      	mov	r0, r5
  401636:	4631      	mov	r1, r6
  401638:	4c0c      	ldr	r4, [pc, #48]	; (40166c <ssd1306_write_command+0x98>)
  40163a:	4a0d      	ldr	r2, [pc, #52]	; (401670 <ssd1306_write_command+0x9c>)
  40163c:	f04f 0300 	mov.w	r3, #0
  401640:	47a0      	blx	r4
  401642:	4603      	mov	r3, r0
  401644:	460c      	mov	r4, r1
  401646:	4618      	mov	r0, r3
  401648:	4b0a      	ldr	r3, [pc, #40]	; (401674 <ssd1306_write_command+0xa0>)
  40164a:	4798      	blx	r3
}
  40164c:	bf00      	nop
  40164e:	370c      	adds	r7, #12
  401650:	46bd      	mov	sp, r7
  401652:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401654:	004011c5 	.word	0x004011c5
  401658:	40008000 	.word	0x40008000
  40165c:	004003d1 	.word	0x004003d1
  401660:	00400405 	.word	0x00400405
  401664:	00400fad 	.word	0x00400fad
  401668:	005a83df 	.word	0x005a83df
  40166c:	00403919 	.word	0x00403919
  401670:	005a83e0 	.word	0x005a83e0
  401674:	20400001 	.word	0x20400001

00401678 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401678:	b5f0      	push	{r4, r5, r6, r7, lr}
  40167a:	b083      	sub	sp, #12
  40167c:	af00      	add	r7, sp, #0
  40167e:	4603      	mov	r3, r0
  401680:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  401682:	2101      	movs	r1, #1
  401684:	2023      	movs	r0, #35	; 0x23
  401686:	4b1c      	ldr	r3, [pc, #112]	; (4016f8 <ssd1306_write_data+0x80>)
  401688:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40168a:	2101      	movs	r1, #1
  40168c:	481b      	ldr	r0, [pc, #108]	; (4016fc <ssd1306_write_data+0x84>)
  40168e:	4b1c      	ldr	r3, [pc, #112]	; (401700 <ssd1306_write_data+0x88>)
  401690:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  401692:	79fb      	ldrb	r3, [r7, #7]
  401694:	b299      	uxth	r1, r3
  401696:	2301      	movs	r3, #1
  401698:	2201      	movs	r2, #1
  40169a:	4818      	ldr	r0, [pc, #96]	; (4016fc <ssd1306_write_data+0x84>)
  40169c:	4c19      	ldr	r4, [pc, #100]	; (401704 <ssd1306_write_data+0x8c>)
  40169e:	47a0      	blx	r4
	delay_us(10);
  4016a0:	4b19      	ldr	r3, [pc, #100]	; (401708 <ssd1306_write_data+0x90>)
  4016a2:	4798      	blx	r3
  4016a4:	4603      	mov	r3, r0
  4016a6:	4619      	mov	r1, r3
  4016a8:	f04f 0200 	mov.w	r2, #0
  4016ac:	460b      	mov	r3, r1
  4016ae:	4614      	mov	r4, r2
  4016b0:	00a6      	lsls	r6, r4, #2
  4016b2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4016b6:	009d      	lsls	r5, r3, #2
  4016b8:	462b      	mov	r3, r5
  4016ba:	4634      	mov	r4, r6
  4016bc:	185b      	adds	r3, r3, r1
  4016be:	eb44 0402 	adc.w	r4, r4, r2
  4016c2:	18db      	adds	r3, r3, r3
  4016c4:	eb44 0404 	adc.w	r4, r4, r4
  4016c8:	4619      	mov	r1, r3
  4016ca:	4622      	mov	r2, r4
  4016cc:	4b0f      	ldr	r3, [pc, #60]	; (40170c <ssd1306_write_data+0x94>)
  4016ce:	f04f 0400 	mov.w	r4, #0
  4016d2:	18cd      	adds	r5, r1, r3
  4016d4:	eb42 0604 	adc.w	r6, r2, r4
  4016d8:	4628      	mov	r0, r5
  4016da:	4631      	mov	r1, r6
  4016dc:	4c0c      	ldr	r4, [pc, #48]	; (401710 <ssd1306_write_data+0x98>)
  4016de:	4a0d      	ldr	r2, [pc, #52]	; (401714 <ssd1306_write_data+0x9c>)
  4016e0:	f04f 0300 	mov.w	r3, #0
  4016e4:	47a0      	blx	r4
  4016e6:	4603      	mov	r3, r0
  4016e8:	460c      	mov	r4, r1
  4016ea:	4618      	mov	r0, r3
  4016ec:	4b0a      	ldr	r3, [pc, #40]	; (401718 <ssd1306_write_data+0xa0>)
  4016ee:	4798      	blx	r3
}
  4016f0:	bf00      	nop
  4016f2:	370c      	adds	r7, #12
  4016f4:	46bd      	mov	sp, r7
  4016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016f8:	004011c5 	.word	0x004011c5
  4016fc:	40008000 	.word	0x40008000
  401700:	004003d1 	.word	0x004003d1
  401704:	00400405 	.word	0x00400405
  401708:	00400fad 	.word	0x00400fad
  40170c:	005a83df 	.word	0x005a83df
  401710:	00403919 	.word	0x00403919
  401714:	005a83e0 	.word	0x005a83e0
  401718:	20400001 	.word	0x20400001

0040171c <osc_enable>:
{
  40171c:	b580      	push	{r7, lr}
  40171e:	b082      	sub	sp, #8
  401720:	af00      	add	r7, sp, #0
  401722:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401724:	687b      	ldr	r3, [r7, #4]
  401726:	2b07      	cmp	r3, #7
  401728:	d831      	bhi.n	40178e <osc_enable+0x72>
  40172a:	a201      	add	r2, pc, #4	; (adr r2, 401730 <osc_enable+0x14>)
  40172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401730:	0040178d 	.word	0x0040178d
  401734:	00401751 	.word	0x00401751
  401738:	00401759 	.word	0x00401759
  40173c:	00401761 	.word	0x00401761
  401740:	00401769 	.word	0x00401769
  401744:	00401771 	.word	0x00401771
  401748:	00401779 	.word	0x00401779
  40174c:	00401783 	.word	0x00401783
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401750:	2000      	movs	r0, #0
  401752:	4b11      	ldr	r3, [pc, #68]	; (401798 <osc_enable+0x7c>)
  401754:	4798      	blx	r3
		break;
  401756:	e01a      	b.n	40178e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401758:	2001      	movs	r0, #1
  40175a:	4b0f      	ldr	r3, [pc, #60]	; (401798 <osc_enable+0x7c>)
  40175c:	4798      	blx	r3
		break;
  40175e:	e016      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401760:	2000      	movs	r0, #0
  401762:	4b0e      	ldr	r3, [pc, #56]	; (40179c <osc_enable+0x80>)
  401764:	4798      	blx	r3
		break;
  401766:	e012      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401768:	2010      	movs	r0, #16
  40176a:	4b0c      	ldr	r3, [pc, #48]	; (40179c <osc_enable+0x80>)
  40176c:	4798      	blx	r3
		break;
  40176e:	e00e      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401770:	2020      	movs	r0, #32
  401772:	4b0a      	ldr	r3, [pc, #40]	; (40179c <osc_enable+0x80>)
  401774:	4798      	blx	r3
		break;
  401776:	e00a      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401778:	213e      	movs	r1, #62	; 0x3e
  40177a:	2000      	movs	r0, #0
  40177c:	4b08      	ldr	r3, [pc, #32]	; (4017a0 <osc_enable+0x84>)
  40177e:	4798      	blx	r3
		break;
  401780:	e005      	b.n	40178e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401782:	213e      	movs	r1, #62	; 0x3e
  401784:	2001      	movs	r0, #1
  401786:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <osc_enable+0x84>)
  401788:	4798      	blx	r3
		break;
  40178a:	e000      	b.n	40178e <osc_enable+0x72>
		break;
  40178c:	bf00      	nop
}
  40178e:	bf00      	nop
  401790:	3708      	adds	r7, #8
  401792:	46bd      	mov	sp, r7
  401794:	bd80      	pop	{r7, pc}
  401796:	bf00      	nop
  401798:	004026a9 	.word	0x004026a9
  40179c:	00402715 	.word	0x00402715
  4017a0:	00402785 	.word	0x00402785

004017a4 <osc_is_ready>:
{
  4017a4:	b580      	push	{r7, lr}
  4017a6:	b082      	sub	sp, #8
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017ac:	687b      	ldr	r3, [r7, #4]
  4017ae:	2b07      	cmp	r3, #7
  4017b0:	d826      	bhi.n	401800 <osc_is_ready+0x5c>
  4017b2:	a201      	add	r2, pc, #4	; (adr r2, 4017b8 <osc_is_ready+0x14>)
  4017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017b8:	004017d9 	.word	0x004017d9
  4017bc:	004017dd 	.word	0x004017dd
  4017c0:	004017dd 	.word	0x004017dd
  4017c4:	004017ef 	.word	0x004017ef
  4017c8:	004017ef 	.word	0x004017ef
  4017cc:	004017ef 	.word	0x004017ef
  4017d0:	004017ef 	.word	0x004017ef
  4017d4:	004017ef 	.word	0x004017ef
		return 1;
  4017d8:	2301      	movs	r3, #1
  4017da:	e012      	b.n	401802 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4017dc:	4b0b      	ldr	r3, [pc, #44]	; (40180c <osc_is_ready+0x68>)
  4017de:	4798      	blx	r3
  4017e0:	4603      	mov	r3, r0
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	bf14      	ite	ne
  4017e6:	2301      	movne	r3, #1
  4017e8:	2300      	moveq	r3, #0
  4017ea:	b2db      	uxtb	r3, r3
  4017ec:	e009      	b.n	401802 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4017ee:	4b08      	ldr	r3, [pc, #32]	; (401810 <osc_is_ready+0x6c>)
  4017f0:	4798      	blx	r3
  4017f2:	4603      	mov	r3, r0
  4017f4:	2b00      	cmp	r3, #0
  4017f6:	bf14      	ite	ne
  4017f8:	2301      	movne	r3, #1
  4017fa:	2300      	moveq	r3, #0
  4017fc:	b2db      	uxtb	r3, r3
  4017fe:	e000      	b.n	401802 <osc_is_ready+0x5e>
	return 0;
  401800:	2300      	movs	r3, #0
}
  401802:	4618      	mov	r0, r3
  401804:	3708      	adds	r7, #8
  401806:	46bd      	mov	sp, r7
  401808:	bd80      	pop	{r7, pc}
  40180a:	bf00      	nop
  40180c:	004026e1 	.word	0x004026e1
  401810:	004027fd 	.word	0x004027fd

00401814 <osc_get_rate>:
{
  401814:	b480      	push	{r7}
  401816:	b083      	sub	sp, #12
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	2b07      	cmp	r3, #7
  401820:	d825      	bhi.n	40186e <osc_get_rate+0x5a>
  401822:	a201      	add	r2, pc, #4	; (adr r2, 401828 <osc_get_rate+0x14>)
  401824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401828:	00401849 	.word	0x00401849
  40182c:	0040184f 	.word	0x0040184f
  401830:	00401855 	.word	0x00401855
  401834:	0040185b 	.word	0x0040185b
  401838:	0040185f 	.word	0x0040185f
  40183c:	00401863 	.word	0x00401863
  401840:	00401867 	.word	0x00401867
  401844:	0040186b 	.word	0x0040186b
		return OSC_SLCK_32K_RC_HZ;
  401848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40184c:	e010      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401852:	e00d      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401858:	e00a      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40185a:	4b08      	ldr	r3, [pc, #32]	; (40187c <osc_get_rate+0x68>)
  40185c:	e008      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40185e:	4b08      	ldr	r3, [pc, #32]	; (401880 <osc_get_rate+0x6c>)
  401860:	e006      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401862:	4b08      	ldr	r3, [pc, #32]	; (401884 <osc_get_rate+0x70>)
  401864:	e004      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <osc_get_rate+0x70>)
  401868:	e002      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <osc_get_rate+0x70>)
  40186c:	e000      	b.n	401870 <osc_get_rate+0x5c>
	return 0;
  40186e:	2300      	movs	r3, #0
}
  401870:	4618      	mov	r0, r3
  401872:	370c      	adds	r7, #12
  401874:	46bd      	mov	sp, r7
  401876:	f85d 7b04 	ldr.w	r7, [sp], #4
  40187a:	4770      	bx	lr
  40187c:	003d0900 	.word	0x003d0900
  401880:	007a1200 	.word	0x007a1200
  401884:	00b71b00 	.word	0x00b71b00

00401888 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401888:	b580      	push	{r7, lr}
  40188a:	b082      	sub	sp, #8
  40188c:	af00      	add	r7, sp, #0
  40188e:	4603      	mov	r3, r0
  401890:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401892:	bf00      	nop
  401894:	79fb      	ldrb	r3, [r7, #7]
  401896:	4618      	mov	r0, r3
  401898:	4b05      	ldr	r3, [pc, #20]	; (4018b0 <osc_wait_ready+0x28>)
  40189a:	4798      	blx	r3
  40189c:	4603      	mov	r3, r0
  40189e:	f083 0301 	eor.w	r3, r3, #1
  4018a2:	b2db      	uxtb	r3, r3
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d1f5      	bne.n	401894 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4018a8:	bf00      	nop
  4018aa:	3708      	adds	r7, #8
  4018ac:	46bd      	mov	sp, r7
  4018ae:	bd80      	pop	{r7, pc}
  4018b0:	004017a5 	.word	0x004017a5

004018b4 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4018b4:	b580      	push	{r7, lr}
  4018b6:	b086      	sub	sp, #24
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	60f8      	str	r0, [r7, #12]
  4018bc:	607a      	str	r2, [r7, #4]
  4018be:	603b      	str	r3, [r7, #0]
  4018c0:	460b      	mov	r3, r1
  4018c2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4018c4:	687b      	ldr	r3, [r7, #4]
  4018c6:	2b00      	cmp	r3, #0
  4018c8:	d107      	bne.n	4018da <pll_config_init+0x26>
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	d104      	bne.n	4018da <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4018d0:	68fb      	ldr	r3, [r7, #12]
  4018d2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4018d6:	601a      	str	r2, [r3, #0]
  4018d8:	e019      	b.n	40190e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4018da:	7afb      	ldrb	r3, [r7, #11]
  4018dc:	4618      	mov	r0, r3
  4018de:	4b0e      	ldr	r3, [pc, #56]	; (401918 <pll_config_init+0x64>)
  4018e0:	4798      	blx	r3
  4018e2:	4602      	mov	r2, r0
  4018e4:	687b      	ldr	r3, [r7, #4]
  4018e6:	fbb2 f3f3 	udiv	r3, r2, r3
  4018ea:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4018ec:	697b      	ldr	r3, [r7, #20]
  4018ee:	683a      	ldr	r2, [r7, #0]
  4018f0:	fb02 f303 	mul.w	r3, r2, r3
  4018f4:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4018f6:	683b      	ldr	r3, [r7, #0]
  4018f8:	3b01      	subs	r3, #1
  4018fa:	041a      	lsls	r2, r3, #16
  4018fc:	4b07      	ldr	r3, [pc, #28]	; (40191c <pll_config_init+0x68>)
  4018fe:	4013      	ands	r3, r2
  401900:	687a      	ldr	r2, [r7, #4]
  401902:	b2d2      	uxtb	r2, r2
  401904:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401906:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40190a:	68fb      	ldr	r3, [r7, #12]
  40190c:	601a      	str	r2, [r3, #0]
	}
}
  40190e:	bf00      	nop
  401910:	3718      	adds	r7, #24
  401912:	46bd      	mov	sp, r7
  401914:	bd80      	pop	{r7, pc}
  401916:	bf00      	nop
  401918:	00401815 	.word	0x00401815
  40191c:	07ff0000 	.word	0x07ff0000

00401920 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401920:	b580      	push	{r7, lr}
  401922:	b082      	sub	sp, #8
  401924:	af00      	add	r7, sp, #0
  401926:	6078      	str	r0, [r7, #4]
  401928:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40192a:	683b      	ldr	r3, [r7, #0]
  40192c:	2b00      	cmp	r3, #0
  40192e:	d108      	bne.n	401942 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401930:	4b09      	ldr	r3, [pc, #36]	; (401958 <pll_enable+0x38>)
  401932:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401934:	4a09      	ldr	r2, [pc, #36]	; (40195c <pll_enable+0x3c>)
  401936:	687b      	ldr	r3, [r7, #4]
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40193e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401940:	e005      	b.n	40194e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  401942:	4a06      	ldr	r2, [pc, #24]	; (40195c <pll_enable+0x3c>)
  401944:	687b      	ldr	r3, [r7, #4]
  401946:	681b      	ldr	r3, [r3, #0]
  401948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40194c:	61d3      	str	r3, [r2, #28]
}
  40194e:	bf00      	nop
  401950:	3708      	adds	r7, #8
  401952:	46bd      	mov	sp, r7
  401954:	bd80      	pop	{r7, pc}
  401956:	bf00      	nop
  401958:	00402819 	.word	0x00402819
  40195c:	400e0600 	.word	0x400e0600

00401960 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401960:	b580      	push	{r7, lr}
  401962:	b082      	sub	sp, #8
  401964:	af00      	add	r7, sp, #0
  401966:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401968:	687b      	ldr	r3, [r7, #4]
  40196a:	2b00      	cmp	r3, #0
  40196c:	d103      	bne.n	401976 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  40196e:	4b05      	ldr	r3, [pc, #20]	; (401984 <pll_is_locked+0x24>)
  401970:	4798      	blx	r3
  401972:	4603      	mov	r3, r0
  401974:	e002      	b.n	40197c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  401976:	4b04      	ldr	r3, [pc, #16]	; (401988 <pll_is_locked+0x28>)
  401978:	4798      	blx	r3
  40197a:	4603      	mov	r3, r0
	}
}
  40197c:	4618      	mov	r0, r3
  40197e:	3708      	adds	r7, #8
  401980:	46bd      	mov	sp, r7
  401982:	bd80      	pop	{r7, pc}
  401984:	00402835 	.word	0x00402835
  401988:	00402851 	.word	0x00402851

0040198c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40198c:	b580      	push	{r7, lr}
  40198e:	b082      	sub	sp, #8
  401990:	af00      	add	r7, sp, #0
  401992:	4603      	mov	r3, r0
  401994:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401996:	79fb      	ldrb	r3, [r7, #7]
  401998:	3b03      	subs	r3, #3
  40199a:	2b04      	cmp	r3, #4
  40199c:	d808      	bhi.n	4019b0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40199e:	79fb      	ldrb	r3, [r7, #7]
  4019a0:	4618      	mov	r0, r3
  4019a2:	4b06      	ldr	r3, [pc, #24]	; (4019bc <pll_enable_source+0x30>)
  4019a4:	4798      	blx	r3
		osc_wait_ready(e_src);
  4019a6:	79fb      	ldrb	r3, [r7, #7]
  4019a8:	4618      	mov	r0, r3
  4019aa:	4b05      	ldr	r3, [pc, #20]	; (4019c0 <pll_enable_source+0x34>)
  4019ac:	4798      	blx	r3
		break;
  4019ae:	e000      	b.n	4019b2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4019b0:	bf00      	nop
	}
}
  4019b2:	bf00      	nop
  4019b4:	3708      	adds	r7, #8
  4019b6:	46bd      	mov	sp, r7
  4019b8:	bd80      	pop	{r7, pc}
  4019ba:	bf00      	nop
  4019bc:	0040171d 	.word	0x0040171d
  4019c0:	00401889 	.word	0x00401889

004019c4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4019c4:	b580      	push	{r7, lr}
  4019c6:	b082      	sub	sp, #8
  4019c8:	af00      	add	r7, sp, #0
  4019ca:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4019cc:	bf00      	nop
  4019ce:	6878      	ldr	r0, [r7, #4]
  4019d0:	4b04      	ldr	r3, [pc, #16]	; (4019e4 <pll_wait_for_lock+0x20>)
  4019d2:	4798      	blx	r3
  4019d4:	4603      	mov	r3, r0
  4019d6:	2b00      	cmp	r3, #0
  4019d8:	d0f9      	beq.n	4019ce <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4019da:	2300      	movs	r3, #0
}
  4019dc:	4618      	mov	r0, r3
  4019de:	3708      	adds	r7, #8
  4019e0:	46bd      	mov	sp, r7
  4019e2:	bd80      	pop	{r7, pc}
  4019e4:	00401961 	.word	0x00401961

004019e8 <sysclk_get_main_hz>:
{
  4019e8:	b580      	push	{r7, lr}
  4019ea:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4019ec:	2006      	movs	r0, #6
  4019ee:	4b05      	ldr	r3, [pc, #20]	; (401a04 <sysclk_get_main_hz+0x1c>)
  4019f0:	4798      	blx	r3
  4019f2:	4602      	mov	r2, r0
  4019f4:	4613      	mov	r3, r2
  4019f6:	009b      	lsls	r3, r3, #2
  4019f8:	4413      	add	r3, r2
  4019fa:	009a      	lsls	r2, r3, #2
  4019fc:	4413      	add	r3, r2
}
  4019fe:	4618      	mov	r0, r3
  401a00:	bd80      	pop	{r7, pc}
  401a02:	bf00      	nop
  401a04:	00401815 	.word	0x00401815

00401a08 <sysclk_get_cpu_hz>:
{
  401a08:	b580      	push	{r7, lr}
  401a0a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a0c:	4b02      	ldr	r3, [pc, #8]	; (401a18 <sysclk_get_cpu_hz+0x10>)
  401a0e:	4798      	blx	r3
  401a10:	4603      	mov	r3, r0
}
  401a12:	4618      	mov	r0, r3
  401a14:	bd80      	pop	{r7, pc}
  401a16:	bf00      	nop
  401a18:	004019e9 	.word	0x004019e9

00401a1c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401a1c:	b590      	push	{r4, r7, lr}
  401a1e:	b083      	sub	sp, #12
  401a20:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401a22:	4813      	ldr	r0, [pc, #76]	; (401a70 <sysclk_init+0x54>)
  401a24:	4b13      	ldr	r3, [pc, #76]	; (401a74 <sysclk_init+0x58>)
  401a26:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401a28:	2006      	movs	r0, #6
  401a2a:	4b13      	ldr	r3, [pc, #76]	; (401a78 <sysclk_init+0x5c>)
  401a2c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401a2e:	1d38      	adds	r0, r7, #4
  401a30:	2319      	movs	r3, #25
  401a32:	2201      	movs	r2, #1
  401a34:	2106      	movs	r1, #6
  401a36:	4c11      	ldr	r4, [pc, #68]	; (401a7c <sysclk_init+0x60>)
  401a38:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401a3a:	1d3b      	adds	r3, r7, #4
  401a3c:	2100      	movs	r1, #0
  401a3e:	4618      	mov	r0, r3
  401a40:	4b0f      	ldr	r3, [pc, #60]	; (401a80 <sysclk_init+0x64>)
  401a42:	4798      	blx	r3
		pll_wait_for_lock(0);
  401a44:	2000      	movs	r0, #0
  401a46:	4b0f      	ldr	r3, [pc, #60]	; (401a84 <sysclk_init+0x68>)
  401a48:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401a4a:	2002      	movs	r0, #2
  401a4c:	4b0e      	ldr	r3, [pc, #56]	; (401a88 <sysclk_init+0x6c>)
  401a4e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401a50:	2000      	movs	r0, #0
  401a52:	4b0e      	ldr	r3, [pc, #56]	; (401a8c <sysclk_init+0x70>)
  401a54:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401a56:	4b0e      	ldr	r3, [pc, #56]	; (401a90 <sysclk_init+0x74>)
  401a58:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401a5a:	4b0e      	ldr	r3, [pc, #56]	; (401a94 <sysclk_init+0x78>)
  401a5c:	4798      	blx	r3
  401a5e:	4603      	mov	r3, r0
  401a60:	4618      	mov	r0, r3
  401a62:	4b04      	ldr	r3, [pc, #16]	; (401a74 <sysclk_init+0x58>)
  401a64:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401a66:	bf00      	nop
  401a68:	370c      	adds	r7, #12
  401a6a:	46bd      	mov	sp, r7
  401a6c:	bd90      	pop	{r4, r7, pc}
  401a6e:	bf00      	nop
  401a70:	11e1a300 	.word	0x11e1a300
  401a74:	00402b99 	.word	0x00402b99
  401a78:	0040198d 	.word	0x0040198d
  401a7c:	004018b5 	.word	0x004018b5
  401a80:	00401921 	.word	0x00401921
  401a84:	004019c5 	.word	0x004019c5
  401a88:	004025a9 	.word	0x004025a9
  401a8c:	00402625 	.word	0x00402625
  401a90:	00402a31 	.word	0x00402a31
  401a94:	00401a09 	.word	0x00401a09

00401a98 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401a98:	b480      	push	{r7}
  401a9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401aa0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401aa4:	4b09      	ldr	r3, [pc, #36]	; (401acc <SCB_EnableICache+0x34>)
  401aa6:	2200      	movs	r2, #0
  401aa8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401aac:	4a07      	ldr	r2, [pc, #28]	; (401acc <SCB_EnableICache+0x34>)
  401aae:	4b07      	ldr	r3, [pc, #28]	; (401acc <SCB_EnableICache+0x34>)
  401ab0:	695b      	ldr	r3, [r3, #20]
  401ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401ab6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401abc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  401ac0:	bf00      	nop
  401ac2:	46bd      	mov	sp, r7
  401ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac8:	4770      	bx	lr
  401aca:	bf00      	nop
  401acc:	e000ed00 	.word	0xe000ed00

00401ad0 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  401ad0:	b480      	push	{r7}
  401ad2:	b08b      	sub	sp, #44	; 0x2c
  401ad4:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401ad6:	4b26      	ldr	r3, [pc, #152]	; (401b70 <SCB_EnableDCache+0xa0>)
  401ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401adc:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  401ade:	69fb      	ldr	r3, [r7, #28]
  401ae0:	0b5b      	lsrs	r3, r3, #13
  401ae2:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401ae6:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401ae8:	69fb      	ldr	r3, [r7, #28]
  401aea:	f003 0307 	and.w	r3, r3, #7
  401aee:	3304      	adds	r3, #4
  401af0:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  401af2:	69fb      	ldr	r3, [r7, #28]
  401af4:	08db      	lsrs	r3, r3, #3
  401af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401afa:	617b      	str	r3, [r7, #20]
  401afc:	697b      	ldr	r3, [r7, #20]
  401afe:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401b00:	68bb      	ldr	r3, [r7, #8]
  401b02:	fab3 f383 	clz	r3, r3
  401b06:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401b08:	687b      	ldr	r3, [r7, #4]
  401b0a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401b0c:	f003 031f 	and.w	r3, r3, #31
  401b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  401b12:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  401b16:	697b      	ldr	r3, [r7, #20]
  401b18:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401b1a:	6a3a      	ldr	r2, [r7, #32]
  401b1c:	693b      	ldr	r3, [r7, #16]
  401b1e:	fa02 f303 	lsl.w	r3, r2, r3
  401b22:	4619      	mov	r1, r3
  401b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401b26:	69bb      	ldr	r3, [r7, #24]
  401b28:	fa02 f303 	lsl.w	r3, r2, r3
  401b2c:	430b      	orrs	r3, r1
  401b2e:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  401b30:	4a0f      	ldr	r2, [pc, #60]	; (401b70 <SCB_EnableDCache+0xa0>)
  401b32:	68fb      	ldr	r3, [r7, #12]
  401b34:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401b38:	6a3b      	ldr	r3, [r7, #32]
  401b3a:	1e5a      	subs	r2, r3, #1
  401b3c:	623a      	str	r2, [r7, #32]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d1eb      	bne.n	401b1a <SCB_EnableDCache+0x4a>
        } while(sets--);
  401b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b44:	1e5a      	subs	r2, r3, #1
  401b46:	627a      	str	r2, [r7, #36]	; 0x24
  401b48:	2b00      	cmp	r3, #0
  401b4a:	d1e4      	bne.n	401b16 <SCB_EnableDCache+0x46>
  401b4c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401b50:	4a07      	ldr	r2, [pc, #28]	; (401b70 <SCB_EnableDCache+0xa0>)
  401b52:	4b07      	ldr	r3, [pc, #28]	; (401b70 <SCB_EnableDCache+0xa0>)
  401b54:	695b      	ldr	r3, [r3, #20]
  401b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401b5a:	6153      	str	r3, [r2, #20]
  401b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b60:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  401b64:	bf00      	nop
  401b66:	372c      	adds	r7, #44	; 0x2c
  401b68:	46bd      	mov	sp, r7
  401b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6e:	4770      	bx	lr
  401b70:	e000ed00 	.word	0xe000ed00

00401b74 <sysclk_enable_peripheral_clock>:
{
  401b74:	b580      	push	{r7, lr}
  401b76:	b082      	sub	sp, #8
  401b78:	af00      	add	r7, sp, #0
  401b7a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401b7c:	6878      	ldr	r0, [r7, #4]
  401b7e:	4b03      	ldr	r3, [pc, #12]	; (401b8c <sysclk_enable_peripheral_clock+0x18>)
  401b80:	4798      	blx	r3
}
  401b82:	bf00      	nop
  401b84:	3708      	adds	r7, #8
  401b86:	46bd      	mov	sp, r7
  401b88:	bd80      	pop	{r7, pc}
  401b8a:	bf00      	nop
  401b8c:	0040286d 	.word	0x0040286d

00401b90 <ioport_init>:
{
  401b90:	b580      	push	{r7, lr}
  401b92:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401b94:	200a      	movs	r0, #10
  401b96:	4b08      	ldr	r3, [pc, #32]	; (401bb8 <ioport_init+0x28>)
  401b98:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401b9a:	200b      	movs	r0, #11
  401b9c:	4b06      	ldr	r3, [pc, #24]	; (401bb8 <ioport_init+0x28>)
  401b9e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  401ba0:	200c      	movs	r0, #12
  401ba2:	4b05      	ldr	r3, [pc, #20]	; (401bb8 <ioport_init+0x28>)
  401ba4:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  401ba6:	2010      	movs	r0, #16
  401ba8:	4b03      	ldr	r3, [pc, #12]	; (401bb8 <ioport_init+0x28>)
  401baa:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401bac:	2011      	movs	r0, #17
  401bae:	4b02      	ldr	r3, [pc, #8]	; (401bb8 <ioport_init+0x28>)
  401bb0:	4798      	blx	r3
}
  401bb2:	bf00      	nop
  401bb4:	bd80      	pop	{r7, pc}
  401bb6:	bf00      	nop
  401bb8:	00401b75 	.word	0x00401b75

00401bbc <ioport_set_pin_mode>:
{
  401bbc:	b480      	push	{r7}
  401bbe:	b08d      	sub	sp, #52	; 0x34
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	6078      	str	r0, [r7, #4]
  401bc4:	6039      	str	r1, [r7, #0]
  401bc6:	687b      	ldr	r3, [r7, #4]
  401bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  401bca:	683b      	ldr	r3, [r7, #0]
  401bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  401bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bd0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bd4:	095a      	lsrs	r2, r3, #5
  401bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bd8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401bda:	6a3b      	ldr	r3, [r7, #32]
  401bdc:	f003 031f 	and.w	r3, r3, #31
  401be0:	2101      	movs	r1, #1
  401be2:	fa01 f303 	lsl.w	r3, r1, r3
  401be6:	61fa      	str	r2, [r7, #28]
  401be8:	61bb      	str	r3, [r7, #24]
  401bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401bec:	617b      	str	r3, [r7, #20]
  401bee:	69fb      	ldr	r3, [r7, #28]
  401bf0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bf2:	693a      	ldr	r2, [r7, #16]
  401bf4:	4b37      	ldr	r3, [pc, #220]	; (401cd4 <ioport_set_pin_mode+0x118>)
  401bf6:	4413      	add	r3, r2
  401bf8:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401bfa:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401bfc:	697b      	ldr	r3, [r7, #20]
  401bfe:	f003 0308 	and.w	r3, r3, #8
  401c02:	2b00      	cmp	r3, #0
  401c04:	d003      	beq.n	401c0e <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401c06:	68fb      	ldr	r3, [r7, #12]
  401c08:	69ba      	ldr	r2, [r7, #24]
  401c0a:	665a      	str	r2, [r3, #100]	; 0x64
  401c0c:	e002      	b.n	401c14 <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  401c14:	697b      	ldr	r3, [r7, #20]
  401c16:	f003 0310 	and.w	r3, r3, #16
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d004      	beq.n	401c28 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401c1e:	68fb      	ldr	r3, [r7, #12]
  401c20:	69ba      	ldr	r2, [r7, #24]
  401c22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401c26:	e003      	b.n	401c30 <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  401c28:	68fb      	ldr	r3, [r7, #12]
  401c2a:	69ba      	ldr	r2, [r7, #24]
  401c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401c30:	697b      	ldr	r3, [r7, #20]
  401c32:	f003 0320 	and.w	r3, r3, #32
  401c36:	2b00      	cmp	r3, #0
  401c38:	d003      	beq.n	401c42 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401c3a:	68fb      	ldr	r3, [r7, #12]
  401c3c:	69ba      	ldr	r2, [r7, #24]
  401c3e:	651a      	str	r2, [r3, #80]	; 0x50
  401c40:	e002      	b.n	401c48 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	69ba      	ldr	r2, [r7, #24]
  401c46:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401c48:	697b      	ldr	r3, [r7, #20]
  401c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401c4e:	2b00      	cmp	r3, #0
  401c50:	d003      	beq.n	401c5a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  401c52:	68fb      	ldr	r3, [r7, #12]
  401c54:	69ba      	ldr	r2, [r7, #24]
  401c56:	621a      	str	r2, [r3, #32]
  401c58:	e002      	b.n	401c60 <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	69ba      	ldr	r2, [r7, #24]
  401c5e:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401c60:	697b      	ldr	r3, [r7, #20]
  401c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c66:	2b00      	cmp	r3, #0
  401c68:	d004      	beq.n	401c74 <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  401c6a:	68fb      	ldr	r3, [r7, #12]
  401c6c:	69ba      	ldr	r2, [r7, #24]
  401c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401c72:	e003      	b.n	401c7c <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401c74:	68fb      	ldr	r3, [r7, #12]
  401c76:	69ba      	ldr	r2, [r7, #24]
  401c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401c7c:	697b      	ldr	r3, [r7, #20]
  401c7e:	f003 0301 	and.w	r3, r3, #1
  401c82:	2b00      	cmp	r3, #0
  401c84:	d006      	beq.n	401c94 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401c86:	68fb      	ldr	r3, [r7, #12]
  401c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c8a:	69bb      	ldr	r3, [r7, #24]
  401c8c:	431a      	orrs	r2, r3
  401c8e:	68fb      	ldr	r3, [r7, #12]
  401c90:	671a      	str	r2, [r3, #112]	; 0x70
  401c92:	e006      	b.n	401ca2 <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401c94:	68fb      	ldr	r3, [r7, #12]
  401c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c98:	69bb      	ldr	r3, [r7, #24]
  401c9a:	43db      	mvns	r3, r3
  401c9c:	401a      	ands	r2, r3
  401c9e:	68fb      	ldr	r3, [r7, #12]
  401ca0:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401ca2:	697b      	ldr	r3, [r7, #20]
  401ca4:	f003 0302 	and.w	r3, r3, #2
  401ca8:	2b00      	cmp	r3, #0
  401caa:	d006      	beq.n	401cba <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401cb0:	69bb      	ldr	r3, [r7, #24]
  401cb2:	431a      	orrs	r2, r3
  401cb4:	68fb      	ldr	r3, [r7, #12]
  401cb6:	675a      	str	r2, [r3, #116]	; 0x74
}
  401cb8:	e006      	b.n	401cc8 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401cbe:	69bb      	ldr	r3, [r7, #24]
  401cc0:	43db      	mvns	r3, r3
  401cc2:	401a      	ands	r2, r3
  401cc4:	68fb      	ldr	r3, [r7, #12]
  401cc6:	675a      	str	r2, [r3, #116]	; 0x74
  401cc8:	bf00      	nop
  401cca:	3734      	adds	r7, #52	; 0x34
  401ccc:	46bd      	mov	sp, r7
  401cce:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cd2:	4770      	bx	lr
  401cd4:	00200707 	.word	0x00200707

00401cd8 <ioport_set_pin_dir>:
{
  401cd8:	b480      	push	{r7}
  401cda:	b08d      	sub	sp, #52	; 0x34
  401cdc:	af00      	add	r7, sp, #0
  401cde:	6078      	str	r0, [r7, #4]
  401ce0:	460b      	mov	r3, r1
  401ce2:	70fb      	strb	r3, [r7, #3]
  401ce4:	687b      	ldr	r3, [r7, #4]
  401ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ce8:	78fb      	ldrb	r3, [r7, #3]
  401cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cf0:	627b      	str	r3, [r7, #36]	; 0x24
  401cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401cf4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401cf6:	6a3b      	ldr	r3, [r7, #32]
  401cf8:	095b      	lsrs	r3, r3, #5
  401cfa:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401cfc:	69fa      	ldr	r2, [r7, #28]
  401cfe:	4b17      	ldr	r3, [pc, #92]	; (401d5c <ioport_set_pin_dir+0x84>)
  401d00:	4413      	add	r3, r2
  401d02:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401d04:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401d0a:	2b01      	cmp	r3, #1
  401d0c:	d109      	bne.n	401d22 <ioport_set_pin_dir+0x4a>
  401d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d10:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401d12:	697b      	ldr	r3, [r7, #20]
  401d14:	f003 031f 	and.w	r3, r3, #31
  401d18:	2201      	movs	r2, #1
  401d1a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d1c:	69bb      	ldr	r3, [r7, #24]
  401d1e:	611a      	str	r2, [r3, #16]
  401d20:	e00c      	b.n	401d3c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401d26:	2b00      	cmp	r3, #0
  401d28:	d108      	bne.n	401d3c <ioport_set_pin_dir+0x64>
  401d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d2c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401d2e:	693b      	ldr	r3, [r7, #16]
  401d30:	f003 031f 	and.w	r3, r3, #31
  401d34:	2201      	movs	r2, #1
  401d36:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401d38:	69bb      	ldr	r3, [r7, #24]
  401d3a:	615a      	str	r2, [r3, #20]
  401d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401d3e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401d40:	68fb      	ldr	r3, [r7, #12]
  401d42:	f003 031f 	and.w	r3, r3, #31
  401d46:	2201      	movs	r2, #1
  401d48:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d4a:	69bb      	ldr	r3, [r7, #24]
  401d4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401d50:	bf00      	nop
  401d52:	3734      	adds	r7, #52	; 0x34
  401d54:	46bd      	mov	sp, r7
  401d56:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d5a:	4770      	bx	lr
  401d5c:	00200707 	.word	0x00200707

00401d60 <ioport_set_pin_level>:
{
  401d60:	b480      	push	{r7}
  401d62:	b08b      	sub	sp, #44	; 0x2c
  401d64:	af00      	add	r7, sp, #0
  401d66:	6078      	str	r0, [r7, #4]
  401d68:	460b      	mov	r3, r1
  401d6a:	70fb      	strb	r3, [r7, #3]
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	627b      	str	r3, [r7, #36]	; 0x24
  401d70:	78fb      	ldrb	r3, [r7, #3]
  401d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d78:	61fb      	str	r3, [r7, #28]
  401d7a:	69fb      	ldr	r3, [r7, #28]
  401d7c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401d7e:	69bb      	ldr	r3, [r7, #24]
  401d80:	095b      	lsrs	r3, r3, #5
  401d82:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d84:	697a      	ldr	r2, [r7, #20]
  401d86:	4b10      	ldr	r3, [pc, #64]	; (401dc8 <ioport_set_pin_level+0x68>)
  401d88:	4413      	add	r3, r2
  401d8a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401d8c:	613b      	str	r3, [r7, #16]
	if (level) {
  401d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401d92:	2b00      	cmp	r3, #0
  401d94:	d009      	beq.n	401daa <ioport_set_pin_level+0x4a>
  401d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d98:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401d9a:	68fb      	ldr	r3, [r7, #12]
  401d9c:	f003 031f 	and.w	r3, r3, #31
  401da0:	2201      	movs	r2, #1
  401da2:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401da4:	693b      	ldr	r3, [r7, #16]
  401da6:	631a      	str	r2, [r3, #48]	; 0x30
}
  401da8:	e008      	b.n	401dbc <ioport_set_pin_level+0x5c>
  401daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401dac:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401dae:	68bb      	ldr	r3, [r7, #8]
  401db0:	f003 031f 	and.w	r3, r3, #31
  401db4:	2201      	movs	r2, #1
  401db6:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401db8:	693b      	ldr	r3, [r7, #16]
  401dba:	635a      	str	r2, [r3, #52]	; 0x34
  401dbc:	bf00      	nop
  401dbe:	372c      	adds	r7, #44	; 0x2c
  401dc0:	46bd      	mov	sp, r7
  401dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dc6:	4770      	bx	lr
  401dc8:	00200707 	.word	0x00200707

00401dcc <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401dcc:	b480      	push	{r7}
  401dce:	b08d      	sub	sp, #52	; 0x34
  401dd0:	af00      	add	r7, sp, #0
  401dd2:	6078      	str	r0, [r7, #4]
  401dd4:	460b      	mov	r3, r1
  401dd6:	70fb      	strb	r3, [r7, #3]
  401dd8:	687b      	ldr	r3, [r7, #4]
  401dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ddc:	78fb      	ldrb	r3, [r7, #3]
  401dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401de4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401de8:	095a      	lsrs	r2, r3, #5
  401dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401dec:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401dee:	6a3b      	ldr	r3, [r7, #32]
  401df0:	f003 031f 	and.w	r3, r3, #31
  401df4:	2101      	movs	r1, #1
  401df6:	fa01 f303 	lsl.w	r3, r1, r3
  401dfa:	61fa      	str	r2, [r7, #28]
  401dfc:	61bb      	str	r3, [r7, #24]
  401dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401e02:	75fb      	strb	r3, [r7, #23]
  401e04:	69fb      	ldr	r3, [r7, #28]
  401e06:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401e08:	693a      	ldr	r2, [r7, #16]
  401e0a:	4b23      	ldr	r3, [pc, #140]	; (401e98 <ioport_set_pin_sense_mode+0xcc>)
  401e0c:	4413      	add	r3, r2
  401e0e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401e10:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401e12:	7dfb      	ldrb	r3, [r7, #23]
  401e14:	3b01      	subs	r3, #1
  401e16:	2b03      	cmp	r3, #3
  401e18:	d82e      	bhi.n	401e78 <ioport_set_pin_sense_mode+0xac>
  401e1a:	a201      	add	r2, pc, #4	; (adr r2, 401e20 <ioport_set_pin_sense_mode+0x54>)
  401e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401e20:	00401e55 	.word	0x00401e55
  401e24:	00401e67 	.word	0x00401e67
  401e28:	00401e31 	.word	0x00401e31
  401e2c:	00401e43 	.word	0x00401e43
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401e30:	68fb      	ldr	r3, [r7, #12]
  401e32:	69ba      	ldr	r2, [r7, #24]
  401e34:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401e38:	68fb      	ldr	r3, [r7, #12]
  401e3a:	69ba      	ldr	r2, [r7, #24]
  401e3c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401e40:	e01f      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	69ba      	ldr	r2, [r7, #24]
  401e46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	69ba      	ldr	r2, [r7, #24]
  401e4e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401e52:	e016      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401e54:	68fb      	ldr	r3, [r7, #12]
  401e56:	69ba      	ldr	r2, [r7, #24]
  401e58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401e5c:	68fb      	ldr	r3, [r7, #12]
  401e5e:	69ba      	ldr	r2, [r7, #24]
  401e60:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401e64:	e00d      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401e66:	68fb      	ldr	r3, [r7, #12]
  401e68:	69ba      	ldr	r2, [r7, #24]
  401e6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401e6e:	68fb      	ldr	r3, [r7, #12]
  401e70:	69ba      	ldr	r2, [r7, #24]
  401e72:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401e76:	e004      	b.n	401e82 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401e78:	68fb      	ldr	r3, [r7, #12]
  401e7a:	69ba      	ldr	r2, [r7, #24]
  401e7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401e80:	e003      	b.n	401e8a <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401e82:	68fb      	ldr	r3, [r7, #12]
  401e84:	69ba      	ldr	r2, [r7, #24]
  401e86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401e8a:	bf00      	nop
  401e8c:	3734      	adds	r7, #52	; 0x34
  401e8e:	46bd      	mov	sp, r7
  401e90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e94:	4770      	bx	lr
  401e96:	bf00      	nop
  401e98:	00200707 	.word	0x00200707

00401e9c <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401e9c:	b480      	push	{r7}
  401e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401ea0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ea4:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401ea8:	4a0c      	ldr	r2, [pc, #48]	; (401edc <tcm_disable+0x40>)
  401eaa:	4b0c      	ldr	r3, [pc, #48]	; (401edc <tcm_disable+0x40>)
  401eac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401eb0:	f023 0301 	bic.w	r3, r3, #1
  401eb4:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401eb8:	4a08      	ldr	r2, [pc, #32]	; (401edc <tcm_disable+0x40>)
  401eba:	4b08      	ldr	r3, [pc, #32]	; (401edc <tcm_disable+0x40>)
  401ebc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401ec0:	f023 0301 	bic.w	r3, r3, #1
  401ec4:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401ec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ecc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401ed0:	bf00      	nop
  401ed2:	46bd      	mov	sp, r7
  401ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ed8:	4770      	bx	lr
  401eda:	bf00      	nop
  401edc:	e000ed00 	.word	0xe000ed00

00401ee0 <board_init>:
#endif

void board_init(void)
{
  401ee0:	b580      	push	{r7, lr}
  401ee2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401ee4:	4b13      	ldr	r3, [pc, #76]	; (401f34 <board_init+0x54>)
  401ee6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401eea:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401eec:	4b12      	ldr	r3, [pc, #72]	; (401f38 <board_init+0x58>)
  401eee:	4798      	blx	r3
	SCB_EnableDCache();
  401ef0:	4b12      	ldr	r3, [pc, #72]	; (401f3c <board_init+0x5c>)
  401ef2:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ef4:	4b12      	ldr	r3, [pc, #72]	; (401f40 <board_init+0x60>)
  401ef6:	4a13      	ldr	r2, [pc, #76]	; (401f44 <board_init+0x64>)
  401ef8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401efa:	4b11      	ldr	r3, [pc, #68]	; (401f40 <board_init+0x60>)
  401efc:	4a12      	ldr	r2, [pc, #72]	; (401f48 <board_init+0x68>)
  401efe:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401f00:	4b12      	ldr	r3, [pc, #72]	; (401f4c <board_init+0x6c>)
  401f02:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401f04:	4b12      	ldr	r3, [pc, #72]	; (401f50 <board_init+0x70>)
  401f06:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401f08:	2101      	movs	r1, #1
  401f0a:	2048      	movs	r0, #72	; 0x48
  401f0c:	4b11      	ldr	r3, [pc, #68]	; (401f54 <board_init+0x74>)
  401f0e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401f10:	2101      	movs	r1, #1
  401f12:	2048      	movs	r0, #72	; 0x48
  401f14:	4b10      	ldr	r3, [pc, #64]	; (401f58 <board_init+0x78>)
  401f16:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401f18:	2100      	movs	r1, #0
  401f1a:	200b      	movs	r0, #11
  401f1c:	4b0d      	ldr	r3, [pc, #52]	; (401f54 <board_init+0x74>)
  401f1e:	4798      	blx	r3
  401f20:	2188      	movs	r1, #136	; 0x88
  401f22:	200b      	movs	r0, #11
  401f24:	4b0d      	ldr	r3, [pc, #52]	; (401f5c <board_init+0x7c>)
  401f26:	4798      	blx	r3
  401f28:	2102      	movs	r1, #2
  401f2a:	200b      	movs	r0, #11
  401f2c:	4b0c      	ldr	r3, [pc, #48]	; (401f60 <board_init+0x80>)
  401f2e:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401f30:	bf00      	nop
  401f32:	bd80      	pop	{r7, pc}
  401f34:	400e1850 	.word	0x400e1850
  401f38:	00401a99 	.word	0x00401a99
  401f3c:	00401ad1 	.word	0x00401ad1
  401f40:	400e0c00 	.word	0x400e0c00
  401f44:	5a00080c 	.word	0x5a00080c
  401f48:	5a00070c 	.word	0x5a00070c
  401f4c:	00401e9d 	.word	0x00401e9d
  401f50:	00401b91 	.word	0x00401b91
  401f54:	00401cd9 	.word	0x00401cd9
  401f58:	00401d61 	.word	0x00401d61
  401f5c:	00401bbd 	.word	0x00401bbd
  401f60:	00401dcd 	.word	0x00401dcd

00401f64 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401f64:	b480      	push	{r7}
  401f66:	b085      	sub	sp, #20
  401f68:	af00      	add	r7, sp, #0
  401f6a:	60f8      	str	r0, [r7, #12]
  401f6c:	60b9      	str	r1, [r7, #8]
  401f6e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401f70:	687b      	ldr	r3, [r7, #4]
  401f72:	2b00      	cmp	r3, #0
  401f74:	d003      	beq.n	401f7e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401f76:	68fb      	ldr	r3, [r7, #12]
  401f78:	68ba      	ldr	r2, [r7, #8]
  401f7a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401f7c:	e002      	b.n	401f84 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401f7e:	68fb      	ldr	r3, [r7, #12]
  401f80:	68ba      	ldr	r2, [r7, #8]
  401f82:	661a      	str	r2, [r3, #96]	; 0x60
}
  401f84:	bf00      	nop
  401f86:	3714      	adds	r7, #20
  401f88:	46bd      	mov	sp, r7
  401f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f8e:	4770      	bx	lr

00401f90 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401f90:	b480      	push	{r7}
  401f92:	b085      	sub	sp, #20
  401f94:	af00      	add	r7, sp, #0
  401f96:	60f8      	str	r0, [r7, #12]
  401f98:	60b9      	str	r1, [r7, #8]
  401f9a:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401f9c:	68fb      	ldr	r3, [r7, #12]
  401f9e:	68ba      	ldr	r2, [r7, #8]
  401fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401fa4:	687b      	ldr	r3, [r7, #4]
  401fa6:	005b      	lsls	r3, r3, #1
  401fa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401fac:	fbb2 f3f3 	udiv	r3, r2, r3
  401fb0:	3b01      	subs	r3, #1
  401fb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401fb6:	68fb      	ldr	r3, [r7, #12]
  401fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401fbc:	bf00      	nop
  401fbe:	3714      	adds	r7, #20
  401fc0:	46bd      	mov	sp, r7
  401fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fc6:	4770      	bx	lr

00401fc8 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401fc8:	b480      	push	{r7}
  401fca:	b083      	sub	sp, #12
  401fcc:	af00      	add	r7, sp, #0
  401fce:	6078      	str	r0, [r7, #4]
  401fd0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401fd2:	687b      	ldr	r3, [r7, #4]
  401fd4:	683a      	ldr	r2, [r7, #0]
  401fd6:	631a      	str	r2, [r3, #48]	; 0x30
}
  401fd8:	bf00      	nop
  401fda:	370c      	adds	r7, #12
  401fdc:	46bd      	mov	sp, r7
  401fde:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fe2:	4770      	bx	lr

00401fe4 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401fe4:	b480      	push	{r7}
  401fe6:	b083      	sub	sp, #12
  401fe8:	af00      	add	r7, sp, #0
  401fea:	6078      	str	r0, [r7, #4]
  401fec:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401fee:	687b      	ldr	r3, [r7, #4]
  401ff0:	683a      	ldr	r2, [r7, #0]
  401ff2:	635a      	str	r2, [r3, #52]	; 0x34
}
  401ff4:	bf00      	nop
  401ff6:	370c      	adds	r7, #12
  401ff8:	46bd      	mov	sp, r7
  401ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ffe:	4770      	bx	lr

00402000 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402000:	b480      	push	{r7}
  402002:	b087      	sub	sp, #28
  402004:	af00      	add	r7, sp, #0
  402006:	60f8      	str	r0, [r7, #12]
  402008:	60b9      	str	r1, [r7, #8]
  40200a:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40200c:	68bb      	ldr	r3, [r7, #8]
  40200e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402012:	d003      	beq.n	40201c <pio_get+0x1c>
  402014:	68bb      	ldr	r3, [r7, #8]
  402016:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40201a:	d103      	bne.n	402024 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  40201c:	68fb      	ldr	r3, [r7, #12]
  40201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402020:	617b      	str	r3, [r7, #20]
  402022:	e002      	b.n	40202a <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  402024:	68fb      	ldr	r3, [r7, #12]
  402026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402028:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  40202a:	697a      	ldr	r2, [r7, #20]
  40202c:	687b      	ldr	r3, [r7, #4]
  40202e:	4013      	ands	r3, r2
  402030:	2b00      	cmp	r3, #0
  402032:	d101      	bne.n	402038 <pio_get+0x38>
		return 0;
  402034:	2300      	movs	r3, #0
  402036:	e000      	b.n	40203a <pio_get+0x3a>
	} else {
		return 1;
  402038:	2301      	movs	r3, #1
	}
}
  40203a:	4618      	mov	r0, r3
  40203c:	371c      	adds	r7, #28
  40203e:	46bd      	mov	sp, r7
  402040:	f85d 7b04 	ldr.w	r7, [sp], #4
  402044:	4770      	bx	lr

00402046 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402046:	b480      	push	{r7}
  402048:	b087      	sub	sp, #28
  40204a:	af00      	add	r7, sp, #0
  40204c:	60f8      	str	r0, [r7, #12]
  40204e:	60b9      	str	r1, [r7, #8]
  402050:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402052:	68fb      	ldr	r3, [r7, #12]
  402054:	687a      	ldr	r2, [r7, #4]
  402056:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402058:	68bb      	ldr	r3, [r7, #8]
  40205a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40205e:	d04a      	beq.n	4020f6 <pio_set_peripheral+0xb0>
  402060:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402064:	d808      	bhi.n	402078 <pio_set_peripheral+0x32>
  402066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40206a:	d016      	beq.n	40209a <pio_set_peripheral+0x54>
  40206c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402070:	d02c      	beq.n	4020cc <pio_set_peripheral+0x86>
  402072:	2b00      	cmp	r3, #0
  402074:	d069      	beq.n	40214a <pio_set_peripheral+0x104>
  402076:	e064      	b.n	402142 <pio_set_peripheral+0xfc>
  402078:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40207c:	d065      	beq.n	40214a <pio_set_peripheral+0x104>
  40207e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402082:	d803      	bhi.n	40208c <pio_set_peripheral+0x46>
  402084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402088:	d04a      	beq.n	402120 <pio_set_peripheral+0xda>
  40208a:	e05a      	b.n	402142 <pio_set_peripheral+0xfc>
  40208c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402090:	d05b      	beq.n	40214a <pio_set_peripheral+0x104>
  402092:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402096:	d058      	beq.n	40214a <pio_set_peripheral+0x104>
  402098:	e053      	b.n	402142 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40209a:	68fb      	ldr	r3, [r7, #12]
  40209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40209e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4020a0:	68fb      	ldr	r3, [r7, #12]
  4020a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4020a4:	687b      	ldr	r3, [r7, #4]
  4020a6:	43d9      	mvns	r1, r3
  4020a8:	697b      	ldr	r3, [r7, #20]
  4020aa:	400b      	ands	r3, r1
  4020ac:	401a      	ands	r2, r3
  4020ae:	68fb      	ldr	r3, [r7, #12]
  4020b0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4020b2:	68fb      	ldr	r3, [r7, #12]
  4020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4020b6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4020b8:	68fb      	ldr	r3, [r7, #12]
  4020ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4020bc:	687b      	ldr	r3, [r7, #4]
  4020be:	43d9      	mvns	r1, r3
  4020c0:	697b      	ldr	r3, [r7, #20]
  4020c2:	400b      	ands	r3, r1
  4020c4:	401a      	ands	r2, r3
  4020c6:	68fb      	ldr	r3, [r7, #12]
  4020c8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4020ca:	e03a      	b.n	402142 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4020cc:	68fb      	ldr	r3, [r7, #12]
  4020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4020d0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4020d2:	687a      	ldr	r2, [r7, #4]
  4020d4:	697b      	ldr	r3, [r7, #20]
  4020d6:	431a      	orrs	r2, r3
  4020d8:	68fb      	ldr	r3, [r7, #12]
  4020da:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4020dc:	68fb      	ldr	r3, [r7, #12]
  4020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4020e0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4020e2:	68fb      	ldr	r3, [r7, #12]
  4020e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4020e6:	687b      	ldr	r3, [r7, #4]
  4020e8:	43d9      	mvns	r1, r3
  4020ea:	697b      	ldr	r3, [r7, #20]
  4020ec:	400b      	ands	r3, r1
  4020ee:	401a      	ands	r2, r3
  4020f0:	68fb      	ldr	r3, [r7, #12]
  4020f2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4020f4:	e025      	b.n	402142 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4020f6:	68fb      	ldr	r3, [r7, #12]
  4020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4020fa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4020fc:	68fb      	ldr	r3, [r7, #12]
  4020fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402100:	687b      	ldr	r3, [r7, #4]
  402102:	43d9      	mvns	r1, r3
  402104:	697b      	ldr	r3, [r7, #20]
  402106:	400b      	ands	r3, r1
  402108:	401a      	ands	r2, r3
  40210a:	68fb      	ldr	r3, [r7, #12]
  40210c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40210e:	68fb      	ldr	r3, [r7, #12]
  402110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402112:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402114:	687a      	ldr	r2, [r7, #4]
  402116:	697b      	ldr	r3, [r7, #20]
  402118:	431a      	orrs	r2, r3
  40211a:	68fb      	ldr	r3, [r7, #12]
  40211c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40211e:	e010      	b.n	402142 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402120:	68fb      	ldr	r3, [r7, #12]
  402122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402124:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402126:	687a      	ldr	r2, [r7, #4]
  402128:	697b      	ldr	r3, [r7, #20]
  40212a:	431a      	orrs	r2, r3
  40212c:	68fb      	ldr	r3, [r7, #12]
  40212e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402130:	68fb      	ldr	r3, [r7, #12]
  402132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402134:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402136:	687a      	ldr	r2, [r7, #4]
  402138:	697b      	ldr	r3, [r7, #20]
  40213a:	431a      	orrs	r2, r3
  40213c:	68fb      	ldr	r3, [r7, #12]
  40213e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402140:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402142:	68fb      	ldr	r3, [r7, #12]
  402144:	687a      	ldr	r2, [r7, #4]
  402146:	605a      	str	r2, [r3, #4]
  402148:	e000      	b.n	40214c <pio_set_peripheral+0x106>
		return;
  40214a:	bf00      	nop
}
  40214c:	371c      	adds	r7, #28
  40214e:	46bd      	mov	sp, r7
  402150:	f85d 7b04 	ldr.w	r7, [sp], #4
  402154:	4770      	bx	lr
	...

00402158 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  402158:	b580      	push	{r7, lr}
  40215a:	b084      	sub	sp, #16
  40215c:	af00      	add	r7, sp, #0
  40215e:	60f8      	str	r0, [r7, #12]
  402160:	60b9      	str	r1, [r7, #8]
  402162:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402164:	68b9      	ldr	r1, [r7, #8]
  402166:	68f8      	ldr	r0, [r7, #12]
  402168:	4b19      	ldr	r3, [pc, #100]	; (4021d0 <pio_set_input+0x78>)
  40216a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40216c:	687b      	ldr	r3, [r7, #4]
  40216e:	f003 0301 	and.w	r3, r3, #1
  402172:	461a      	mov	r2, r3
  402174:	68b9      	ldr	r1, [r7, #8]
  402176:	68f8      	ldr	r0, [r7, #12]
  402178:	4b16      	ldr	r3, [pc, #88]	; (4021d4 <pio_set_input+0x7c>)
  40217a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40217c:	687b      	ldr	r3, [r7, #4]
  40217e:	f003 030a 	and.w	r3, r3, #10
  402182:	2b00      	cmp	r3, #0
  402184:	d003      	beq.n	40218e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  402186:	68fb      	ldr	r3, [r7, #12]
  402188:	68ba      	ldr	r2, [r7, #8]
  40218a:	621a      	str	r2, [r3, #32]
  40218c:	e002      	b.n	402194 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40218e:	68fb      	ldr	r3, [r7, #12]
  402190:	68ba      	ldr	r2, [r7, #8]
  402192:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402194:	687b      	ldr	r3, [r7, #4]
  402196:	f003 0302 	and.w	r3, r3, #2
  40219a:	2b00      	cmp	r3, #0
  40219c:	d004      	beq.n	4021a8 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40219e:	68fb      	ldr	r3, [r7, #12]
  4021a0:	68ba      	ldr	r2, [r7, #8]
  4021a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4021a6:	e008      	b.n	4021ba <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	f003 0308 	and.w	r3, r3, #8
  4021ae:	2b00      	cmp	r3, #0
  4021b0:	d003      	beq.n	4021ba <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4021b2:	68fb      	ldr	r3, [r7, #12]
  4021b4:	68ba      	ldr	r2, [r7, #8]
  4021b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4021ba:	68fb      	ldr	r3, [r7, #12]
  4021bc:	68ba      	ldr	r2, [r7, #8]
  4021be:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4021c0:	68fb      	ldr	r3, [r7, #12]
  4021c2:	68ba      	ldr	r2, [r7, #8]
  4021c4:	601a      	str	r2, [r3, #0]
}
  4021c6:	bf00      	nop
  4021c8:	3710      	adds	r7, #16
  4021ca:	46bd      	mov	sp, r7
  4021cc:	bd80      	pop	{r7, pc}
  4021ce:	bf00      	nop
  4021d0:	00402391 	.word	0x00402391
  4021d4:	00401f65 	.word	0x00401f65

004021d8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4021d8:	b580      	push	{r7, lr}
  4021da:	b084      	sub	sp, #16
  4021dc:	af00      	add	r7, sp, #0
  4021de:	60f8      	str	r0, [r7, #12]
  4021e0:	60b9      	str	r1, [r7, #8]
  4021e2:	607a      	str	r2, [r7, #4]
  4021e4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4021e6:	68b9      	ldr	r1, [r7, #8]
  4021e8:	68f8      	ldr	r0, [r7, #12]
  4021ea:	4b12      	ldr	r3, [pc, #72]	; (402234 <pio_set_output+0x5c>)
  4021ec:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4021ee:	69ba      	ldr	r2, [r7, #24]
  4021f0:	68b9      	ldr	r1, [r7, #8]
  4021f2:	68f8      	ldr	r0, [r7, #12]
  4021f4:	4b10      	ldr	r3, [pc, #64]	; (402238 <pio_set_output+0x60>)
  4021f6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4021f8:	683b      	ldr	r3, [r7, #0]
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d003      	beq.n	402206 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4021fe:	68fb      	ldr	r3, [r7, #12]
  402200:	68ba      	ldr	r2, [r7, #8]
  402202:	651a      	str	r2, [r3, #80]	; 0x50
  402204:	e002      	b.n	40220c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402206:	68fb      	ldr	r3, [r7, #12]
  402208:	68ba      	ldr	r2, [r7, #8]
  40220a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	2b00      	cmp	r3, #0
  402210:	d003      	beq.n	40221a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  402212:	68fb      	ldr	r3, [r7, #12]
  402214:	68ba      	ldr	r2, [r7, #8]
  402216:	631a      	str	r2, [r3, #48]	; 0x30
  402218:	e002      	b.n	402220 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40221a:	68fb      	ldr	r3, [r7, #12]
  40221c:	68ba      	ldr	r2, [r7, #8]
  40221e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402220:	68fb      	ldr	r3, [r7, #12]
  402222:	68ba      	ldr	r2, [r7, #8]
  402224:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  402226:	68fb      	ldr	r3, [r7, #12]
  402228:	68ba      	ldr	r2, [r7, #8]
  40222a:	601a      	str	r2, [r3, #0]
}
  40222c:	bf00      	nop
  40222e:	3710      	adds	r7, #16
  402230:	46bd      	mov	sp, r7
  402232:	bd80      	pop	{r7, pc}
  402234:	00402391 	.word	0x00402391
  402238:	00401f65 	.word	0x00401f65

0040223c <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  40223c:	b590      	push	{r4, r7, lr}
  40223e:	b087      	sub	sp, #28
  402240:	af02      	add	r7, sp, #8
  402242:	60f8      	str	r0, [r7, #12]
  402244:	60b9      	str	r1, [r7, #8]
  402246:	607a      	str	r2, [r7, #4]
  402248:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40224a:	68bb      	ldr	r3, [r7, #8]
  40224c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402250:	d016      	beq.n	402280 <pio_configure+0x44>
  402252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402256:	d809      	bhi.n	40226c <pio_configure+0x30>
  402258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40225c:	d010      	beq.n	402280 <pio_configure+0x44>
  40225e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402262:	d00d      	beq.n	402280 <pio_configure+0x44>
  402264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402268:	d00a      	beq.n	402280 <pio_configure+0x44>
  40226a:	e03d      	b.n	4022e8 <pio_configure+0xac>
  40226c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402270:	d01a      	beq.n	4022a8 <pio_configure+0x6c>
  402272:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402276:	d017      	beq.n	4022a8 <pio_configure+0x6c>
  402278:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40227c:	d00e      	beq.n	40229c <pio_configure+0x60>
  40227e:	e033      	b.n	4022e8 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402280:	687a      	ldr	r2, [r7, #4]
  402282:	68b9      	ldr	r1, [r7, #8]
  402284:	68f8      	ldr	r0, [r7, #12]
  402286:	4b1c      	ldr	r3, [pc, #112]	; (4022f8 <pio_configure+0xbc>)
  402288:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40228a:	683b      	ldr	r3, [r7, #0]
  40228c:	f003 0301 	and.w	r3, r3, #1
  402290:	461a      	mov	r2, r3
  402292:	6879      	ldr	r1, [r7, #4]
  402294:	68f8      	ldr	r0, [r7, #12]
  402296:	4b19      	ldr	r3, [pc, #100]	; (4022fc <pio_configure+0xc0>)
  402298:	4798      	blx	r3
		break;
  40229a:	e027      	b.n	4022ec <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40229c:	683a      	ldr	r2, [r7, #0]
  40229e:	6879      	ldr	r1, [r7, #4]
  4022a0:	68f8      	ldr	r0, [r7, #12]
  4022a2:	4b17      	ldr	r3, [pc, #92]	; (402300 <pio_configure+0xc4>)
  4022a4:	4798      	blx	r3
		break;
  4022a6:	e021      	b.n	4022ec <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022a8:	68bb      	ldr	r3, [r7, #8]
  4022aa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4022ae:	bf0c      	ite	eq
  4022b0:	2301      	moveq	r3, #1
  4022b2:	2300      	movne	r3, #0
  4022b4:	b2db      	uxtb	r3, r3
  4022b6:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4022b8:	683b      	ldr	r3, [r7, #0]
  4022ba:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022be:	2b00      	cmp	r3, #0
  4022c0:	bf14      	ite	ne
  4022c2:	2301      	movne	r3, #1
  4022c4:	2300      	moveq	r3, #0
  4022c6:	b2db      	uxtb	r3, r3
  4022c8:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  4022ca:	683b      	ldr	r3, [r7, #0]
  4022cc:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4022d0:	2b00      	cmp	r3, #0
  4022d2:	bf14      	ite	ne
  4022d4:	2301      	movne	r3, #1
  4022d6:	2300      	moveq	r3, #0
  4022d8:	b2db      	uxtb	r3, r3
  4022da:	9300      	str	r3, [sp, #0]
  4022dc:	460b      	mov	r3, r1
  4022de:	6879      	ldr	r1, [r7, #4]
  4022e0:	68f8      	ldr	r0, [r7, #12]
  4022e2:	4c08      	ldr	r4, [pc, #32]	; (402304 <pio_configure+0xc8>)
  4022e4:	47a0      	blx	r4
		break;
  4022e6:	e001      	b.n	4022ec <pio_configure+0xb0>

	default:
		return 0;
  4022e8:	2300      	movs	r3, #0
  4022ea:	e000      	b.n	4022ee <pio_configure+0xb2>
	}

	return 1;
  4022ec:	2301      	movs	r3, #1
}
  4022ee:	4618      	mov	r0, r3
  4022f0:	3714      	adds	r7, #20
  4022f2:	46bd      	mov	sp, r7
  4022f4:	bd90      	pop	{r4, r7, pc}
  4022f6:	bf00      	nop
  4022f8:	00402047 	.word	0x00402047
  4022fc:	00401f65 	.word	0x00401f65
  402300:	00402159 	.word	0x00402159
  402304:	004021d9 	.word	0x004021d9

00402308 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402308:	b480      	push	{r7}
  40230a:	b085      	sub	sp, #20
  40230c:	af00      	add	r7, sp, #0
  40230e:	60f8      	str	r0, [r7, #12]
  402310:	60b9      	str	r1, [r7, #8]
  402312:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402314:	687b      	ldr	r3, [r7, #4]
  402316:	f003 0310 	and.w	r3, r3, #16
  40231a:	2b00      	cmp	r3, #0
  40231c:	d020      	beq.n	402360 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40231e:	68fb      	ldr	r3, [r7, #12]
  402320:	68ba      	ldr	r2, [r7, #8]
  402322:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402326:	687b      	ldr	r3, [r7, #4]
  402328:	f003 0320 	and.w	r3, r3, #32
  40232c:	2b00      	cmp	r3, #0
  40232e:	d004      	beq.n	40233a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402330:	68fb      	ldr	r3, [r7, #12]
  402332:	68ba      	ldr	r2, [r7, #8]
  402334:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402338:	e003      	b.n	402342 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40233a:	68fb      	ldr	r3, [r7, #12]
  40233c:	68ba      	ldr	r2, [r7, #8]
  40233e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402348:	2b00      	cmp	r3, #0
  40234a:	d004      	beq.n	402356 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40234c:	68fb      	ldr	r3, [r7, #12]
  40234e:	68ba      	ldr	r2, [r7, #8]
  402350:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402354:	e008      	b.n	402368 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402356:	68fb      	ldr	r3, [r7, #12]
  402358:	68ba      	ldr	r2, [r7, #8]
  40235a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40235e:	e003      	b.n	402368 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  402360:	68fb      	ldr	r3, [r7, #12]
  402362:	68ba      	ldr	r2, [r7, #8]
  402364:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  402368:	bf00      	nop
  40236a:	3714      	adds	r7, #20
  40236c:	46bd      	mov	sp, r7
  40236e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402372:	4770      	bx	lr

00402374 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402374:	b480      	push	{r7}
  402376:	b083      	sub	sp, #12
  402378:	af00      	add	r7, sp, #0
  40237a:	6078      	str	r0, [r7, #4]
  40237c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40237e:	687b      	ldr	r3, [r7, #4]
  402380:	683a      	ldr	r2, [r7, #0]
  402382:	641a      	str	r2, [r3, #64]	; 0x40
}
  402384:	bf00      	nop
  402386:	370c      	adds	r7, #12
  402388:	46bd      	mov	sp, r7
  40238a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40238e:	4770      	bx	lr

00402390 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402390:	b480      	push	{r7}
  402392:	b083      	sub	sp, #12
  402394:	af00      	add	r7, sp, #0
  402396:	6078      	str	r0, [r7, #4]
  402398:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40239a:	687b      	ldr	r3, [r7, #4]
  40239c:	683a      	ldr	r2, [r7, #0]
  40239e:	645a      	str	r2, [r3, #68]	; 0x44
}
  4023a0:	bf00      	nop
  4023a2:	370c      	adds	r7, #12
  4023a4:	46bd      	mov	sp, r7
  4023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023aa:	4770      	bx	lr

004023ac <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4023ac:	b480      	push	{r7}
  4023ae:	b083      	sub	sp, #12
  4023b0:	af00      	add	r7, sp, #0
  4023b2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4023b4:	687b      	ldr	r3, [r7, #4]
  4023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4023b8:	4618      	mov	r0, r3
  4023ba:	370c      	adds	r7, #12
  4023bc:	46bd      	mov	sp, r7
  4023be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023c2:	4770      	bx	lr

004023c4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4023c4:	b480      	push	{r7}
  4023c6:	b083      	sub	sp, #12
  4023c8:	af00      	add	r7, sp, #0
  4023ca:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4023cc:	687b      	ldr	r3, [r7, #4]
  4023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4023d0:	4618      	mov	r0, r3
  4023d2:	370c      	adds	r7, #12
  4023d4:	46bd      	mov	sp, r7
  4023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023da:	4770      	bx	lr

004023dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4023dc:	b580      	push	{r7, lr}
  4023de:	b084      	sub	sp, #16
  4023e0:	af00      	add	r7, sp, #0
  4023e2:	6078      	str	r0, [r7, #4]
  4023e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4023e6:	6878      	ldr	r0, [r7, #4]
  4023e8:	4b26      	ldr	r3, [pc, #152]	; (402484 <pio_handler_process+0xa8>)
  4023ea:	4798      	blx	r3
  4023ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4023ee:	6878      	ldr	r0, [r7, #4]
  4023f0:	4b25      	ldr	r3, [pc, #148]	; (402488 <pio_handler_process+0xac>)
  4023f2:	4798      	blx	r3
  4023f4:	4602      	mov	r2, r0
  4023f6:	68fb      	ldr	r3, [r7, #12]
  4023f8:	4013      	ands	r3, r2
  4023fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4023fc:	68fb      	ldr	r3, [r7, #12]
  4023fe:	2b00      	cmp	r3, #0
  402400:	d03c      	beq.n	40247c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402402:	2300      	movs	r3, #0
  402404:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402406:	e034      	b.n	402472 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402408:	4a20      	ldr	r2, [pc, #128]	; (40248c <pio_handler_process+0xb0>)
  40240a:	68bb      	ldr	r3, [r7, #8]
  40240c:	011b      	lsls	r3, r3, #4
  40240e:	4413      	add	r3, r2
  402410:	681a      	ldr	r2, [r3, #0]
  402412:	683b      	ldr	r3, [r7, #0]
  402414:	429a      	cmp	r2, r3
  402416:	d126      	bne.n	402466 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402418:	4a1c      	ldr	r2, [pc, #112]	; (40248c <pio_handler_process+0xb0>)
  40241a:	68bb      	ldr	r3, [r7, #8]
  40241c:	011b      	lsls	r3, r3, #4
  40241e:	4413      	add	r3, r2
  402420:	3304      	adds	r3, #4
  402422:	681a      	ldr	r2, [r3, #0]
  402424:	68fb      	ldr	r3, [r7, #12]
  402426:	4013      	ands	r3, r2
  402428:	2b00      	cmp	r3, #0
  40242a:	d01c      	beq.n	402466 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40242c:	4a17      	ldr	r2, [pc, #92]	; (40248c <pio_handler_process+0xb0>)
  40242e:	68bb      	ldr	r3, [r7, #8]
  402430:	011b      	lsls	r3, r3, #4
  402432:	4413      	add	r3, r2
  402434:	330c      	adds	r3, #12
  402436:	681b      	ldr	r3, [r3, #0]
  402438:	4914      	ldr	r1, [pc, #80]	; (40248c <pio_handler_process+0xb0>)
  40243a:	68ba      	ldr	r2, [r7, #8]
  40243c:	0112      	lsls	r2, r2, #4
  40243e:	440a      	add	r2, r1
  402440:	6810      	ldr	r0, [r2, #0]
  402442:	4912      	ldr	r1, [pc, #72]	; (40248c <pio_handler_process+0xb0>)
  402444:	68ba      	ldr	r2, [r7, #8]
  402446:	0112      	lsls	r2, r2, #4
  402448:	440a      	add	r2, r1
  40244a:	3204      	adds	r2, #4
  40244c:	6812      	ldr	r2, [r2, #0]
  40244e:	4611      	mov	r1, r2
  402450:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402452:	4a0e      	ldr	r2, [pc, #56]	; (40248c <pio_handler_process+0xb0>)
  402454:	68bb      	ldr	r3, [r7, #8]
  402456:	011b      	lsls	r3, r3, #4
  402458:	4413      	add	r3, r2
  40245a:	3304      	adds	r3, #4
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	43db      	mvns	r3, r3
  402460:	68fa      	ldr	r2, [r7, #12]
  402462:	4013      	ands	r3, r2
  402464:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  402466:	68bb      	ldr	r3, [r7, #8]
  402468:	3301      	adds	r3, #1
  40246a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40246c:	68bb      	ldr	r3, [r7, #8]
  40246e:	2b06      	cmp	r3, #6
  402470:	d803      	bhi.n	40247a <pio_handler_process+0x9e>
		while (status != 0) {
  402472:	68fb      	ldr	r3, [r7, #12]
  402474:	2b00      	cmp	r3, #0
  402476:	d1c7      	bne.n	402408 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402478:	e000      	b.n	40247c <pio_handler_process+0xa0>
				break;
  40247a:	bf00      	nop
}
  40247c:	bf00      	nop
  40247e:	3710      	adds	r7, #16
  402480:	46bd      	mov	sp, r7
  402482:	bd80      	pop	{r7, pc}
  402484:	004023ad 	.word	0x004023ad
  402488:	004023c5 	.word	0x004023c5
  40248c:	20400678 	.word	0x20400678

00402490 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402490:	b580      	push	{r7, lr}
  402492:	b086      	sub	sp, #24
  402494:	af00      	add	r7, sp, #0
  402496:	60f8      	str	r0, [r7, #12]
  402498:	60b9      	str	r1, [r7, #8]
  40249a:	607a      	str	r2, [r7, #4]
  40249c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40249e:	4b21      	ldr	r3, [pc, #132]	; (402524 <pio_handler_set+0x94>)
  4024a0:	681b      	ldr	r3, [r3, #0]
  4024a2:	2b06      	cmp	r3, #6
  4024a4:	d901      	bls.n	4024aa <pio_handler_set+0x1a>
		return 1;
  4024a6:	2301      	movs	r3, #1
  4024a8:	e038      	b.n	40251c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4024aa:	2300      	movs	r3, #0
  4024ac:	75fb      	strb	r3, [r7, #23]
  4024ae:	e011      	b.n	4024d4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4024b0:	7dfb      	ldrb	r3, [r7, #23]
  4024b2:	011b      	lsls	r3, r3, #4
  4024b4:	4a1c      	ldr	r2, [pc, #112]	; (402528 <pio_handler_set+0x98>)
  4024b6:	4413      	add	r3, r2
  4024b8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4024ba:	693b      	ldr	r3, [r7, #16]
  4024bc:	681a      	ldr	r2, [r3, #0]
  4024be:	68bb      	ldr	r3, [r7, #8]
  4024c0:	429a      	cmp	r2, r3
  4024c2:	d104      	bne.n	4024ce <pio_handler_set+0x3e>
  4024c4:	693b      	ldr	r3, [r7, #16]
  4024c6:	685a      	ldr	r2, [r3, #4]
  4024c8:	687b      	ldr	r3, [r7, #4]
  4024ca:	429a      	cmp	r2, r3
  4024cc:	d008      	beq.n	4024e0 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4024ce:	7dfb      	ldrb	r3, [r7, #23]
  4024d0:	3301      	adds	r3, #1
  4024d2:	75fb      	strb	r3, [r7, #23]
  4024d4:	7dfa      	ldrb	r2, [r7, #23]
  4024d6:	4b13      	ldr	r3, [pc, #76]	; (402524 <pio_handler_set+0x94>)
  4024d8:	681b      	ldr	r3, [r3, #0]
  4024da:	429a      	cmp	r2, r3
  4024dc:	d9e8      	bls.n	4024b0 <pio_handler_set+0x20>
  4024de:	e000      	b.n	4024e2 <pio_handler_set+0x52>
			break;
  4024e0:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4024e2:	693b      	ldr	r3, [r7, #16]
  4024e4:	68ba      	ldr	r2, [r7, #8]
  4024e6:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4024e8:	693b      	ldr	r3, [r7, #16]
  4024ea:	687a      	ldr	r2, [r7, #4]
  4024ec:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4024ee:	693b      	ldr	r3, [r7, #16]
  4024f0:	683a      	ldr	r2, [r7, #0]
  4024f2:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4024f4:	693b      	ldr	r3, [r7, #16]
  4024f6:	6a3a      	ldr	r2, [r7, #32]
  4024f8:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4024fa:	7dfa      	ldrb	r2, [r7, #23]
  4024fc:	4b09      	ldr	r3, [pc, #36]	; (402524 <pio_handler_set+0x94>)
  4024fe:	681b      	ldr	r3, [r3, #0]
  402500:	3301      	adds	r3, #1
  402502:	429a      	cmp	r2, r3
  402504:	d104      	bne.n	402510 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  402506:	4b07      	ldr	r3, [pc, #28]	; (402524 <pio_handler_set+0x94>)
  402508:	681b      	ldr	r3, [r3, #0]
  40250a:	3301      	adds	r3, #1
  40250c:	4a05      	ldr	r2, [pc, #20]	; (402524 <pio_handler_set+0x94>)
  40250e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402510:	683a      	ldr	r2, [r7, #0]
  402512:	6879      	ldr	r1, [r7, #4]
  402514:	68f8      	ldr	r0, [r7, #12]
  402516:	4b05      	ldr	r3, [pc, #20]	; (40252c <pio_handler_set+0x9c>)
  402518:	4798      	blx	r3

	return 0;
  40251a:	2300      	movs	r3, #0
}
  40251c:	4618      	mov	r0, r3
  40251e:	3718      	adds	r7, #24
  402520:	46bd      	mov	sp, r7
  402522:	bd80      	pop	{r7, pc}
  402524:	204006e8 	.word	0x204006e8
  402528:	20400678 	.word	0x20400678
  40252c:	00402309 	.word	0x00402309

00402530 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402530:	b580      	push	{r7, lr}
  402532:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402534:	210a      	movs	r1, #10
  402536:	4802      	ldr	r0, [pc, #8]	; (402540 <PIOA_Handler+0x10>)
  402538:	4b02      	ldr	r3, [pc, #8]	; (402544 <PIOA_Handler+0x14>)
  40253a:	4798      	blx	r3
}
  40253c:	bf00      	nop
  40253e:	bd80      	pop	{r7, pc}
  402540:	400e0e00 	.word	0x400e0e00
  402544:	004023dd 	.word	0x004023dd

00402548 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402548:	b580      	push	{r7, lr}
  40254a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40254c:	210b      	movs	r1, #11
  40254e:	4802      	ldr	r0, [pc, #8]	; (402558 <PIOB_Handler+0x10>)
  402550:	4b02      	ldr	r3, [pc, #8]	; (40255c <PIOB_Handler+0x14>)
  402552:	4798      	blx	r3
}
  402554:	bf00      	nop
  402556:	bd80      	pop	{r7, pc}
  402558:	400e1000 	.word	0x400e1000
  40255c:	004023dd 	.word	0x004023dd

00402560 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402560:	b580      	push	{r7, lr}
  402562:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  402564:	210c      	movs	r1, #12
  402566:	4802      	ldr	r0, [pc, #8]	; (402570 <PIOC_Handler+0x10>)
  402568:	4b02      	ldr	r3, [pc, #8]	; (402574 <PIOC_Handler+0x14>)
  40256a:	4798      	blx	r3
}
  40256c:	bf00      	nop
  40256e:	bd80      	pop	{r7, pc}
  402570:	400e1200 	.word	0x400e1200
  402574:	004023dd 	.word	0x004023dd

00402578 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402578:	b580      	push	{r7, lr}
  40257a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40257c:	2110      	movs	r1, #16
  40257e:	4802      	ldr	r0, [pc, #8]	; (402588 <PIOD_Handler+0x10>)
  402580:	4b02      	ldr	r3, [pc, #8]	; (40258c <PIOD_Handler+0x14>)
  402582:	4798      	blx	r3
}
  402584:	bf00      	nop
  402586:	bd80      	pop	{r7, pc}
  402588:	400e1400 	.word	0x400e1400
  40258c:	004023dd 	.word	0x004023dd

00402590 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402590:	b580      	push	{r7, lr}
  402592:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  402594:	2111      	movs	r1, #17
  402596:	4802      	ldr	r0, [pc, #8]	; (4025a0 <PIOE_Handler+0x10>)
  402598:	4b02      	ldr	r3, [pc, #8]	; (4025a4 <PIOE_Handler+0x14>)
  40259a:	4798      	blx	r3
}
  40259c:	bf00      	nop
  40259e:	bd80      	pop	{r7, pc}
  4025a0:	400e1600 	.word	0x400e1600
  4025a4:	004023dd 	.word	0x004023dd

004025a8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4025a8:	b480      	push	{r7}
  4025aa:	b083      	sub	sp, #12
  4025ac:	af00      	add	r7, sp, #0
  4025ae:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4025b0:	687b      	ldr	r3, [r7, #4]
  4025b2:	3b01      	subs	r3, #1
  4025b4:	2b03      	cmp	r3, #3
  4025b6:	d81a      	bhi.n	4025ee <pmc_mck_set_division+0x46>
  4025b8:	a201      	add	r2, pc, #4	; (adr r2, 4025c0 <pmc_mck_set_division+0x18>)
  4025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025be:	bf00      	nop
  4025c0:	004025d1 	.word	0x004025d1
  4025c4:	004025d7 	.word	0x004025d7
  4025c8:	004025df 	.word	0x004025df
  4025cc:	004025e7 	.word	0x004025e7
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025d0:	2300      	movs	r3, #0
  4025d2:	607b      	str	r3, [r7, #4]
			break;
  4025d4:	e00e      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4025d6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4025da:	607b      	str	r3, [r7, #4]
			break;
  4025dc:	e00a      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4025de:	f44f 7340 	mov.w	r3, #768	; 0x300
  4025e2:	607b      	str	r3, [r7, #4]
			break;
  4025e4:	e006      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4025e6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4025ea:	607b      	str	r3, [r7, #4]
			break;
  4025ec:	e002      	b.n	4025f4 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025ee:	2300      	movs	r3, #0
  4025f0:	607b      	str	r3, [r7, #4]
			break;
  4025f2:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4025f4:	490a      	ldr	r1, [pc, #40]	; (402620 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4025f6:	4b0a      	ldr	r3, [pc, #40]	; (402620 <pmc_mck_set_division+0x78>)
  4025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4025fe:	687b      	ldr	r3, [r7, #4]
  402600:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  402602:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402604:	bf00      	nop
  402606:	4b06      	ldr	r3, [pc, #24]	; (402620 <pmc_mck_set_division+0x78>)
  402608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40260a:	f003 0308 	and.w	r3, r3, #8
  40260e:	2b00      	cmp	r3, #0
  402610:	d0f9      	beq.n	402606 <pmc_mck_set_division+0x5e>
}
  402612:	bf00      	nop
  402614:	370c      	adds	r7, #12
  402616:	46bd      	mov	sp, r7
  402618:	f85d 7b04 	ldr.w	r7, [sp], #4
  40261c:	4770      	bx	lr
  40261e:	bf00      	nop
  402620:	400e0600 	.word	0x400e0600

00402624 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402624:	b480      	push	{r7}
  402626:	b085      	sub	sp, #20
  402628:	af00      	add	r7, sp, #0
  40262a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40262c:	491d      	ldr	r1, [pc, #116]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  40262e:	4b1d      	ldr	r3, [pc, #116]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402636:	687b      	ldr	r3, [r7, #4]
  402638:	4313      	orrs	r3, r2
  40263a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40263c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402640:	60fb      	str	r3, [r7, #12]
  402642:	e007      	b.n	402654 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402644:	68fb      	ldr	r3, [r7, #12]
  402646:	2b00      	cmp	r3, #0
  402648:	d101      	bne.n	40264e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40264a:	2301      	movs	r3, #1
  40264c:	e023      	b.n	402696 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40264e:	68fb      	ldr	r3, [r7, #12]
  402650:	3b01      	subs	r3, #1
  402652:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402654:	4b13      	ldr	r3, [pc, #76]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402658:	f003 0308 	and.w	r3, r3, #8
  40265c:	2b00      	cmp	r3, #0
  40265e:	d0f1      	beq.n	402644 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402660:	4a10      	ldr	r2, [pc, #64]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402662:	4b10      	ldr	r3, [pc, #64]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  402664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402666:	f023 0303 	bic.w	r3, r3, #3
  40266a:	f043 0302 	orr.w	r3, r3, #2
  40266e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402674:	60fb      	str	r3, [r7, #12]
  402676:	e007      	b.n	402688 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402678:	68fb      	ldr	r3, [r7, #12]
  40267a:	2b00      	cmp	r3, #0
  40267c:	d101      	bne.n	402682 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40267e:	2301      	movs	r3, #1
  402680:	e009      	b.n	402696 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402682:	68fb      	ldr	r3, [r7, #12]
  402684:	3b01      	subs	r3, #1
  402686:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402688:	4b06      	ldr	r3, [pc, #24]	; (4026a4 <pmc_switch_mck_to_pllack+0x80>)
  40268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40268c:	f003 0308 	and.w	r3, r3, #8
  402690:	2b00      	cmp	r3, #0
  402692:	d0f1      	beq.n	402678 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402694:	2300      	movs	r3, #0
}
  402696:	4618      	mov	r0, r3
  402698:	3714      	adds	r7, #20
  40269a:	46bd      	mov	sp, r7
  40269c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026a0:	4770      	bx	lr
  4026a2:	bf00      	nop
  4026a4:	400e0600 	.word	0x400e0600

004026a8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4026a8:	b480      	push	{r7}
  4026aa:	b083      	sub	sp, #12
  4026ac:	af00      	add	r7, sp, #0
  4026ae:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4026b0:	687b      	ldr	r3, [r7, #4]
  4026b2:	2b01      	cmp	r3, #1
  4026b4:	d105      	bne.n	4026c2 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4026b6:	4907      	ldr	r1, [pc, #28]	; (4026d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4026b8:	4b06      	ldr	r3, [pc, #24]	; (4026d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4026ba:	689a      	ldr	r2, [r3, #8]
  4026bc:	4b06      	ldr	r3, [pc, #24]	; (4026d8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4026be:	4313      	orrs	r3, r2
  4026c0:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4026c2:	4b04      	ldr	r3, [pc, #16]	; (4026d4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4026c4:	4a05      	ldr	r2, [pc, #20]	; (4026dc <pmc_switch_sclk_to_32kxtal+0x34>)
  4026c6:	601a      	str	r2, [r3, #0]
}
  4026c8:	bf00      	nop
  4026ca:	370c      	adds	r7, #12
  4026cc:	46bd      	mov	sp, r7
  4026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026d2:	4770      	bx	lr
  4026d4:	400e1810 	.word	0x400e1810
  4026d8:	a5100000 	.word	0xa5100000
  4026dc:	a5000008 	.word	0xa5000008

004026e0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4026e0:	b480      	push	{r7}
  4026e2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4026e4:	4b09      	ldr	r3, [pc, #36]	; (40270c <pmc_osc_is_ready_32kxtal+0x2c>)
  4026e6:	695b      	ldr	r3, [r3, #20]
  4026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d007      	beq.n	402700 <pmc_osc_is_ready_32kxtal+0x20>
  4026f0:	4b07      	ldr	r3, [pc, #28]	; (402710 <pmc_osc_is_ready_32kxtal+0x30>)
  4026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4026f8:	2b00      	cmp	r3, #0
  4026fa:	d001      	beq.n	402700 <pmc_osc_is_ready_32kxtal+0x20>
  4026fc:	2301      	movs	r3, #1
  4026fe:	e000      	b.n	402702 <pmc_osc_is_ready_32kxtal+0x22>
  402700:	2300      	movs	r3, #0
}
  402702:	4618      	mov	r0, r3
  402704:	46bd      	mov	sp, r7
  402706:	f85d 7b04 	ldr.w	r7, [sp], #4
  40270a:	4770      	bx	lr
  40270c:	400e1810 	.word	0x400e1810
  402710:	400e0600 	.word	0x400e0600

00402714 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402714:	b480      	push	{r7}
  402716:	b083      	sub	sp, #12
  402718:	af00      	add	r7, sp, #0
  40271a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40271c:	4915      	ldr	r1, [pc, #84]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40271e:	4b15      	ldr	r3, [pc, #84]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  402720:	6a1a      	ldr	r2, [r3, #32]
  402722:	4b15      	ldr	r3, [pc, #84]	; (402778 <pmc_switch_mainck_to_fastrc+0x64>)
  402724:	4313      	orrs	r3, r2
  402726:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402728:	bf00      	nop
  40272a:	4b12      	ldr	r3, [pc, #72]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40272c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402732:	2b00      	cmp	r3, #0
  402734:	d0f9      	beq.n	40272a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402736:	490f      	ldr	r1, [pc, #60]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  402738:	4b0e      	ldr	r3, [pc, #56]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40273a:	6a1a      	ldr	r2, [r3, #32]
  40273c:	4b0f      	ldr	r3, [pc, #60]	; (40277c <pmc_switch_mainck_to_fastrc+0x68>)
  40273e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402740:	687a      	ldr	r2, [r7, #4]
  402742:	4313      	orrs	r3, r2
  402744:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402748:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40274a:	bf00      	nop
  40274c:	4b09      	ldr	r3, [pc, #36]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40274e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402754:	2b00      	cmp	r3, #0
  402756:	d0f9      	beq.n	40274c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402758:	4906      	ldr	r1, [pc, #24]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40275a:	4b06      	ldr	r3, [pc, #24]	; (402774 <pmc_switch_mainck_to_fastrc+0x60>)
  40275c:	6a1a      	ldr	r2, [r3, #32]
  40275e:	4b08      	ldr	r3, [pc, #32]	; (402780 <pmc_switch_mainck_to_fastrc+0x6c>)
  402760:	4013      	ands	r3, r2
  402762:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402766:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402768:	bf00      	nop
  40276a:	370c      	adds	r7, #12
  40276c:	46bd      	mov	sp, r7
  40276e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402772:	4770      	bx	lr
  402774:	400e0600 	.word	0x400e0600
  402778:	00370008 	.word	0x00370008
  40277c:	ffc8ff8f 	.word	0xffc8ff8f
  402780:	fec8ffff 	.word	0xfec8ffff

00402784 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402784:	b480      	push	{r7}
  402786:	b083      	sub	sp, #12
  402788:	af00      	add	r7, sp, #0
  40278a:	6078      	str	r0, [r7, #4]
  40278c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40278e:	687b      	ldr	r3, [r7, #4]
  402790:	2b00      	cmp	r3, #0
  402792:	d008      	beq.n	4027a6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402794:	4913      	ldr	r1, [pc, #76]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  402796:	4b13      	ldr	r3, [pc, #76]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  402798:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40279a:	4a13      	ldr	r2, [pc, #76]	; (4027e8 <pmc_switch_mainck_to_xtal+0x64>)
  40279c:	401a      	ands	r2, r3
  40279e:	4b13      	ldr	r3, [pc, #76]	; (4027ec <pmc_switch_mainck_to_xtal+0x68>)
  4027a0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4027a2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4027a4:	e018      	b.n	4027d8 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4027a6:	490f      	ldr	r1, [pc, #60]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027a8:	4b0e      	ldr	r3, [pc, #56]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027aa:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4027ac:	4b10      	ldr	r3, [pc, #64]	; (4027f0 <pmc_switch_mainck_to_xtal+0x6c>)
  4027ae:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4027b0:	683a      	ldr	r2, [r7, #0]
  4027b2:	0212      	lsls	r2, r2, #8
  4027b4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4027b6:	431a      	orrs	r2, r3
  4027b8:	4b0e      	ldr	r3, [pc, #56]	; (4027f4 <pmc_switch_mainck_to_xtal+0x70>)
  4027ba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4027bc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4027be:	bf00      	nop
  4027c0:	4b08      	ldr	r3, [pc, #32]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4027c4:	f003 0301 	and.w	r3, r3, #1
  4027c8:	2b00      	cmp	r3, #0
  4027ca:	d0f9      	beq.n	4027c0 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4027cc:	4905      	ldr	r1, [pc, #20]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027ce:	4b05      	ldr	r3, [pc, #20]	; (4027e4 <pmc_switch_mainck_to_xtal+0x60>)
  4027d0:	6a1a      	ldr	r2, [r3, #32]
  4027d2:	4b09      	ldr	r3, [pc, #36]	; (4027f8 <pmc_switch_mainck_to_xtal+0x74>)
  4027d4:	4313      	orrs	r3, r2
  4027d6:	620b      	str	r3, [r1, #32]
}
  4027d8:	bf00      	nop
  4027da:	370c      	adds	r7, #12
  4027dc:	46bd      	mov	sp, r7
  4027de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027e2:	4770      	bx	lr
  4027e4:	400e0600 	.word	0x400e0600
  4027e8:	fec8fffc 	.word	0xfec8fffc
  4027ec:	01370002 	.word	0x01370002
  4027f0:	ffc8fffc 	.word	0xffc8fffc
  4027f4:	00370001 	.word	0x00370001
  4027f8:	01370000 	.word	0x01370000

004027fc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4027fc:	b480      	push	{r7}
  4027fe:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402800:	4b04      	ldr	r3, [pc, #16]	; (402814 <pmc_osc_is_ready_mainck+0x18>)
  402802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402808:	4618      	mov	r0, r3
  40280a:	46bd      	mov	sp, r7
  40280c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402810:	4770      	bx	lr
  402812:	bf00      	nop
  402814:	400e0600 	.word	0x400e0600

00402818 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402818:	b480      	push	{r7}
  40281a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40281c:	4b04      	ldr	r3, [pc, #16]	; (402830 <pmc_disable_pllack+0x18>)
  40281e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402822:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402824:	bf00      	nop
  402826:	46bd      	mov	sp, r7
  402828:	f85d 7b04 	ldr.w	r7, [sp], #4
  40282c:	4770      	bx	lr
  40282e:	bf00      	nop
  402830:	400e0600 	.word	0x400e0600

00402834 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402834:	b480      	push	{r7}
  402836:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402838:	4b04      	ldr	r3, [pc, #16]	; (40284c <pmc_is_locked_pllack+0x18>)
  40283a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40283c:	f003 0302 	and.w	r3, r3, #2
}
  402840:	4618      	mov	r0, r3
  402842:	46bd      	mov	sp, r7
  402844:	f85d 7b04 	ldr.w	r7, [sp], #4
  402848:	4770      	bx	lr
  40284a:	bf00      	nop
  40284c:	400e0600 	.word	0x400e0600

00402850 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  402850:	b480      	push	{r7}
  402852:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402854:	4b04      	ldr	r3, [pc, #16]	; (402868 <pmc_is_locked_upll+0x18>)
  402856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402858:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  40285c:	4618      	mov	r0, r3
  40285e:	46bd      	mov	sp, r7
  402860:	f85d 7b04 	ldr.w	r7, [sp], #4
  402864:	4770      	bx	lr
  402866:	bf00      	nop
  402868:	400e0600 	.word	0x400e0600

0040286c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40286c:	b480      	push	{r7}
  40286e:	b083      	sub	sp, #12
  402870:	af00      	add	r7, sp, #0
  402872:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402874:	687b      	ldr	r3, [r7, #4]
  402876:	2b3f      	cmp	r3, #63	; 0x3f
  402878:	d901      	bls.n	40287e <pmc_enable_periph_clk+0x12>
		return 1;
  40287a:	2301      	movs	r3, #1
  40287c:	e02f      	b.n	4028de <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40287e:	687b      	ldr	r3, [r7, #4]
  402880:	2b1f      	cmp	r3, #31
  402882:	d813      	bhi.n	4028ac <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402884:	4b19      	ldr	r3, [pc, #100]	; (4028ec <pmc_enable_periph_clk+0x80>)
  402886:	699a      	ldr	r2, [r3, #24]
  402888:	2101      	movs	r1, #1
  40288a:	687b      	ldr	r3, [r7, #4]
  40288c:	fa01 f303 	lsl.w	r3, r1, r3
  402890:	401a      	ands	r2, r3
  402892:	2101      	movs	r1, #1
  402894:	687b      	ldr	r3, [r7, #4]
  402896:	fa01 f303 	lsl.w	r3, r1, r3
  40289a:	429a      	cmp	r2, r3
  40289c:	d01e      	beq.n	4028dc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40289e:	4a13      	ldr	r2, [pc, #76]	; (4028ec <pmc_enable_periph_clk+0x80>)
  4028a0:	2101      	movs	r1, #1
  4028a2:	687b      	ldr	r3, [r7, #4]
  4028a4:	fa01 f303 	lsl.w	r3, r1, r3
  4028a8:	6113      	str	r3, [r2, #16]
  4028aa:	e017      	b.n	4028dc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	3b20      	subs	r3, #32
  4028b0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4028b2:	4b0e      	ldr	r3, [pc, #56]	; (4028ec <pmc_enable_periph_clk+0x80>)
  4028b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4028b8:	2101      	movs	r1, #1
  4028ba:	687b      	ldr	r3, [r7, #4]
  4028bc:	fa01 f303 	lsl.w	r3, r1, r3
  4028c0:	401a      	ands	r2, r3
  4028c2:	2101      	movs	r1, #1
  4028c4:	687b      	ldr	r3, [r7, #4]
  4028c6:	fa01 f303 	lsl.w	r3, r1, r3
  4028ca:	429a      	cmp	r2, r3
  4028cc:	d006      	beq.n	4028dc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4028ce:	4a07      	ldr	r2, [pc, #28]	; (4028ec <pmc_enable_periph_clk+0x80>)
  4028d0:	2101      	movs	r1, #1
  4028d2:	687b      	ldr	r3, [r7, #4]
  4028d4:	fa01 f303 	lsl.w	r3, r1, r3
  4028d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4028dc:	2300      	movs	r3, #0
}
  4028de:	4618      	mov	r0, r3
  4028e0:	370c      	adds	r7, #12
  4028e2:	46bd      	mov	sp, r7
  4028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028e8:	4770      	bx	lr
  4028ea:	bf00      	nop
  4028ec:	400e0600 	.word	0x400e0600

004028f0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4028f0:	b480      	push	{r7}
  4028f2:	b083      	sub	sp, #12
  4028f4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028f6:	f3ef 8310 	mrs	r3, PRIMASK
  4028fa:	607b      	str	r3, [r7, #4]
  return(result);
  4028fc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4028fe:	2b00      	cmp	r3, #0
  402900:	bf0c      	ite	eq
  402902:	2301      	moveq	r3, #1
  402904:	2300      	movne	r3, #0
  402906:	b2db      	uxtb	r3, r3
  402908:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40290a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40290c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402910:	4b04      	ldr	r3, [pc, #16]	; (402924 <cpu_irq_save+0x34>)
  402912:	2200      	movs	r2, #0
  402914:	701a      	strb	r2, [r3, #0]
	return flags;
  402916:	683b      	ldr	r3, [r7, #0]
}
  402918:	4618      	mov	r0, r3
  40291a:	370c      	adds	r7, #12
  40291c:	46bd      	mov	sp, r7
  40291e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402922:	4770      	bx	lr
  402924:	20400018 	.word	0x20400018

00402928 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402928:	b480      	push	{r7}
  40292a:	b083      	sub	sp, #12
  40292c:	af00      	add	r7, sp, #0
  40292e:	6078      	str	r0, [r7, #4]
	return (flags);
  402930:	687b      	ldr	r3, [r7, #4]
  402932:	2b00      	cmp	r3, #0
  402934:	bf14      	ite	ne
  402936:	2301      	movne	r3, #1
  402938:	2300      	moveq	r3, #0
  40293a:	b2db      	uxtb	r3, r3
}
  40293c:	4618      	mov	r0, r3
  40293e:	370c      	adds	r7, #12
  402940:	46bd      	mov	sp, r7
  402942:	f85d 7b04 	ldr.w	r7, [sp], #4
  402946:	4770      	bx	lr

00402948 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402948:	b580      	push	{r7, lr}
  40294a:	b082      	sub	sp, #8
  40294c:	af00      	add	r7, sp, #0
  40294e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  402950:	6878      	ldr	r0, [r7, #4]
  402952:	4b07      	ldr	r3, [pc, #28]	; (402970 <cpu_irq_restore+0x28>)
  402954:	4798      	blx	r3
  402956:	4603      	mov	r3, r0
  402958:	2b00      	cmp	r3, #0
  40295a:	d005      	beq.n	402968 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40295c:	4b05      	ldr	r3, [pc, #20]	; (402974 <cpu_irq_restore+0x2c>)
  40295e:	2201      	movs	r2, #1
  402960:	701a      	strb	r2, [r3, #0]
  402962:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402966:	b662      	cpsie	i
}
  402968:	bf00      	nop
  40296a:	3708      	adds	r7, #8
  40296c:	46bd      	mov	sp, r7
  40296e:	bd80      	pop	{r7, pc}
  402970:	00402929 	.word	0x00402929
  402974:	20400018 	.word	0x20400018

00402978 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402978:	b580      	push	{r7, lr}
  40297a:	b084      	sub	sp, #16
  40297c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40297e:	4b1e      	ldr	r3, [pc, #120]	; (4029f8 <Reset_Handler+0x80>)
  402980:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  402982:	4b1e      	ldr	r3, [pc, #120]	; (4029fc <Reset_Handler+0x84>)
  402984:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402986:	68fa      	ldr	r2, [r7, #12]
  402988:	68bb      	ldr	r3, [r7, #8]
  40298a:	429a      	cmp	r2, r3
  40298c:	d00c      	beq.n	4029a8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40298e:	e007      	b.n	4029a0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  402990:	68bb      	ldr	r3, [r7, #8]
  402992:	1d1a      	adds	r2, r3, #4
  402994:	60ba      	str	r2, [r7, #8]
  402996:	68fa      	ldr	r2, [r7, #12]
  402998:	1d11      	adds	r1, r2, #4
  40299a:	60f9      	str	r1, [r7, #12]
  40299c:	6812      	ldr	r2, [r2, #0]
  40299e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4029a0:	68bb      	ldr	r3, [r7, #8]
  4029a2:	4a17      	ldr	r2, [pc, #92]	; (402a00 <Reset_Handler+0x88>)
  4029a4:	4293      	cmp	r3, r2
  4029a6:	d3f3      	bcc.n	402990 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4029a8:	4b16      	ldr	r3, [pc, #88]	; (402a04 <Reset_Handler+0x8c>)
  4029aa:	60bb      	str	r3, [r7, #8]
  4029ac:	e004      	b.n	4029b8 <Reset_Handler+0x40>
                *pDest++ = 0;
  4029ae:	68bb      	ldr	r3, [r7, #8]
  4029b0:	1d1a      	adds	r2, r3, #4
  4029b2:	60ba      	str	r2, [r7, #8]
  4029b4:	2200      	movs	r2, #0
  4029b6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4029b8:	68bb      	ldr	r3, [r7, #8]
  4029ba:	4a13      	ldr	r2, [pc, #76]	; (402a08 <Reset_Handler+0x90>)
  4029bc:	4293      	cmp	r3, r2
  4029be:	d3f6      	bcc.n	4029ae <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4029c0:	4b12      	ldr	r3, [pc, #72]	; (402a0c <Reset_Handler+0x94>)
  4029c2:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4029c4:	4a12      	ldr	r2, [pc, #72]	; (402a10 <Reset_Handler+0x98>)
  4029c6:	68fb      	ldr	r3, [r7, #12]
  4029c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4029cc:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4029ce:	4b11      	ldr	r3, [pc, #68]	; (402a14 <Reset_Handler+0x9c>)
  4029d0:	4798      	blx	r3
  4029d2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4029d4:	4a10      	ldr	r2, [pc, #64]	; (402a18 <Reset_Handler+0xa0>)
  4029d6:	4b10      	ldr	r3, [pc, #64]	; (402a18 <Reset_Handler+0xa0>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4029de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4029e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4029e4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4029e8:	6878      	ldr	r0, [r7, #4]
  4029ea:	4b0c      	ldr	r3, [pc, #48]	; (402a1c <Reset_Handler+0xa4>)
  4029ec:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4029ee:	4b0c      	ldr	r3, [pc, #48]	; (402a20 <Reset_Handler+0xa8>)
  4029f0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4029f2:	4b0c      	ldr	r3, [pc, #48]	; (402a24 <Reset_Handler+0xac>)
  4029f4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4029f6:	e7fe      	b.n	4029f6 <Reset_Handler+0x7e>
  4029f8:	0040482c 	.word	0x0040482c
  4029fc:	20400000 	.word	0x20400000
  402a00:	20400454 	.word	0x20400454
  402a04:	20400454 	.word	0x20400454
  402a08:	20400720 	.word	0x20400720
  402a0c:	00400000 	.word	0x00400000
  402a10:	e000ed00 	.word	0xe000ed00
  402a14:	004028f1 	.word	0x004028f1
  402a18:	e000ed88 	.word	0xe000ed88
  402a1c:	00402949 	.word	0x00402949
  402a20:	00403c29 	.word	0x00403c29
  402a24:	00402ec9 	.word	0x00402ec9

00402a28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402a28:	b480      	push	{r7}
  402a2a:	af00      	add	r7, sp, #0
        while (1) {
  402a2c:	e7fe      	b.n	402a2c <Dummy_Handler+0x4>
	...

00402a30 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402a30:	b480      	push	{r7}
  402a32:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402a34:	4b52      	ldr	r3, [pc, #328]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a38:	f003 0303 	and.w	r3, r3, #3
  402a3c:	2b01      	cmp	r3, #1
  402a3e:	d014      	beq.n	402a6a <SystemCoreClockUpdate+0x3a>
  402a40:	2b01      	cmp	r3, #1
  402a42:	d302      	bcc.n	402a4a <SystemCoreClockUpdate+0x1a>
  402a44:	2b02      	cmp	r3, #2
  402a46:	d038      	beq.n	402aba <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402a48:	e07a      	b.n	402b40 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402a4a:	4b4e      	ldr	r3, [pc, #312]	; (402b84 <SystemCoreClockUpdate+0x154>)
  402a4c:	695b      	ldr	r3, [r3, #20]
  402a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402a52:	2b00      	cmp	r3, #0
  402a54:	d004      	beq.n	402a60 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402a56:	4b4c      	ldr	r3, [pc, #304]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402a5c:	601a      	str	r2, [r3, #0]
    break;
  402a5e:	e06f      	b.n	402b40 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402a60:	4b49      	ldr	r3, [pc, #292]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a62:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402a66:	601a      	str	r2, [r3, #0]
    break;
  402a68:	e06a      	b.n	402b40 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402a6a:	4b45      	ldr	r3, [pc, #276]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402a6c:	6a1b      	ldr	r3, [r3, #32]
  402a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402a72:	2b00      	cmp	r3, #0
  402a74:	d003      	beq.n	402a7e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402a76:	4b44      	ldr	r3, [pc, #272]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a78:	4a44      	ldr	r2, [pc, #272]	; (402b8c <SystemCoreClockUpdate+0x15c>)
  402a7a:	601a      	str	r2, [r3, #0]
    break;
  402a7c:	e060      	b.n	402b40 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a7e:	4b42      	ldr	r3, [pc, #264]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a80:	4a43      	ldr	r2, [pc, #268]	; (402b90 <SystemCoreClockUpdate+0x160>)
  402a82:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402a84:	4b3e      	ldr	r3, [pc, #248]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402a86:	6a1b      	ldr	r3, [r3, #32]
  402a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a8c:	2b10      	cmp	r3, #16
  402a8e:	d004      	beq.n	402a9a <SystemCoreClockUpdate+0x6a>
  402a90:	2b20      	cmp	r3, #32
  402a92:	d008      	beq.n	402aa6 <SystemCoreClockUpdate+0x76>
  402a94:	2b00      	cmp	r3, #0
  402a96:	d00e      	beq.n	402ab6 <SystemCoreClockUpdate+0x86>
          break;
  402a98:	e00e      	b.n	402ab8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402a9a:	4b3b      	ldr	r3, [pc, #236]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402a9c:	681b      	ldr	r3, [r3, #0]
  402a9e:	005b      	lsls	r3, r3, #1
  402aa0:	4a39      	ldr	r2, [pc, #228]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402aa2:	6013      	str	r3, [r2, #0]
          break;
  402aa4:	e008      	b.n	402ab8 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402aa6:	4b38      	ldr	r3, [pc, #224]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402aa8:	681a      	ldr	r2, [r3, #0]
  402aaa:	4613      	mov	r3, r2
  402aac:	005b      	lsls	r3, r3, #1
  402aae:	4413      	add	r3, r2
  402ab0:	4a35      	ldr	r2, [pc, #212]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402ab2:	6013      	str	r3, [r2, #0]
          break;
  402ab4:	e000      	b.n	402ab8 <SystemCoreClockUpdate+0x88>
          break;
  402ab6:	bf00      	nop
    break;
  402ab8:	e042      	b.n	402b40 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402aba:	4b31      	ldr	r3, [pc, #196]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402abc:	6a1b      	ldr	r3, [r3, #32]
  402abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402ac2:	2b00      	cmp	r3, #0
  402ac4:	d003      	beq.n	402ace <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402ac6:	4b30      	ldr	r3, [pc, #192]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402ac8:	4a30      	ldr	r2, [pc, #192]	; (402b8c <SystemCoreClockUpdate+0x15c>)
  402aca:	601a      	str	r2, [r3, #0]
  402acc:	e01c      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402ace:	4b2e      	ldr	r3, [pc, #184]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402ad0:	4a2f      	ldr	r2, [pc, #188]	; (402b90 <SystemCoreClockUpdate+0x160>)
  402ad2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402ad4:	4b2a      	ldr	r3, [pc, #168]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402ad6:	6a1b      	ldr	r3, [r3, #32]
  402ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402adc:	2b10      	cmp	r3, #16
  402ade:	d004      	beq.n	402aea <SystemCoreClockUpdate+0xba>
  402ae0:	2b20      	cmp	r3, #32
  402ae2:	d008      	beq.n	402af6 <SystemCoreClockUpdate+0xc6>
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	d00e      	beq.n	402b06 <SystemCoreClockUpdate+0xd6>
          break;
  402ae8:	e00e      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402aea:	4b27      	ldr	r3, [pc, #156]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402aec:	681b      	ldr	r3, [r3, #0]
  402aee:	005b      	lsls	r3, r3, #1
  402af0:	4a25      	ldr	r2, [pc, #148]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402af2:	6013      	str	r3, [r2, #0]
          break;
  402af4:	e008      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402af6:	4b24      	ldr	r3, [pc, #144]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402af8:	681a      	ldr	r2, [r3, #0]
  402afa:	4613      	mov	r3, r2
  402afc:	005b      	lsls	r3, r3, #1
  402afe:	4413      	add	r3, r2
  402b00:	4a21      	ldr	r2, [pc, #132]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b02:	6013      	str	r3, [r2, #0]
          break;
  402b04:	e000      	b.n	402b08 <SystemCoreClockUpdate+0xd8>
          break;
  402b06:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402b08:	4b1d      	ldr	r3, [pc, #116]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b0c:	f003 0303 	and.w	r3, r3, #3
  402b10:	2b02      	cmp	r3, #2
  402b12:	d114      	bne.n	402b3e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402b14:	4b1a      	ldr	r3, [pc, #104]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402b18:	0c1b      	lsrs	r3, r3, #16
  402b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402b1e:	3301      	adds	r3, #1
  402b20:	4a19      	ldr	r2, [pc, #100]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b22:	6812      	ldr	r2, [r2, #0]
  402b24:	fb02 f303 	mul.w	r3, r2, r3
  402b28:	4a17      	ldr	r2, [pc, #92]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b2a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402b2c:	4b14      	ldr	r3, [pc, #80]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402b30:	b2db      	uxtb	r3, r3
  402b32:	4a15      	ldr	r2, [pc, #84]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b34:	6812      	ldr	r2, [r2, #0]
  402b36:	fbb2 f3f3 	udiv	r3, r2, r3
  402b3a:	4a13      	ldr	r2, [pc, #76]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b3c:	6013      	str	r3, [r2, #0]
    break;
  402b3e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402b40:	4b0f      	ldr	r3, [pc, #60]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b48:	2b70      	cmp	r3, #112	; 0x70
  402b4a:	d108      	bne.n	402b5e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402b4c:	4b0e      	ldr	r3, [pc, #56]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b4e:	681b      	ldr	r3, [r3, #0]
  402b50:	4a10      	ldr	r2, [pc, #64]	; (402b94 <SystemCoreClockUpdate+0x164>)
  402b52:	fba2 2303 	umull	r2, r3, r2, r3
  402b56:	085b      	lsrs	r3, r3, #1
  402b58:	4a0b      	ldr	r2, [pc, #44]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b5a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402b5c:	e00a      	b.n	402b74 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402b5e:	4b08      	ldr	r3, [pc, #32]	; (402b80 <SystemCoreClockUpdate+0x150>)
  402b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b62:	091b      	lsrs	r3, r3, #4
  402b64:	f003 0307 	and.w	r3, r3, #7
  402b68:	4a07      	ldr	r2, [pc, #28]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b6a:	6812      	ldr	r2, [r2, #0]
  402b6c:	fa22 f303 	lsr.w	r3, r2, r3
  402b70:	4a05      	ldr	r2, [pc, #20]	; (402b88 <SystemCoreClockUpdate+0x158>)
  402b72:	6013      	str	r3, [r2, #0]
}
  402b74:	bf00      	nop
  402b76:	46bd      	mov	sp, r7
  402b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b7c:	4770      	bx	lr
  402b7e:	bf00      	nop
  402b80:	400e0600 	.word	0x400e0600
  402b84:	400e1810 	.word	0x400e1810
  402b88:	2040001c 	.word	0x2040001c
  402b8c:	00b71b00 	.word	0x00b71b00
  402b90:	003d0900 	.word	0x003d0900
  402b94:	aaaaaaab 	.word	0xaaaaaaab

00402b98 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402b98:	b480      	push	{r7}
  402b9a:	b083      	sub	sp, #12
  402b9c:	af00      	add	r7, sp, #0
  402b9e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402ba0:	687b      	ldr	r3, [r7, #4]
  402ba2:	4a1d      	ldr	r2, [pc, #116]	; (402c18 <system_init_flash+0x80>)
  402ba4:	4293      	cmp	r3, r2
  402ba6:	d804      	bhi.n	402bb2 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402ba8:	4b1c      	ldr	r3, [pc, #112]	; (402c1c <system_init_flash+0x84>)
  402baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402bae:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402bb0:	e02b      	b.n	402c0a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402bb2:	687b      	ldr	r3, [r7, #4]
  402bb4:	4a1a      	ldr	r2, [pc, #104]	; (402c20 <system_init_flash+0x88>)
  402bb6:	4293      	cmp	r3, r2
  402bb8:	d803      	bhi.n	402bc2 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402bba:	4b18      	ldr	r3, [pc, #96]	; (402c1c <system_init_flash+0x84>)
  402bbc:	4a19      	ldr	r2, [pc, #100]	; (402c24 <system_init_flash+0x8c>)
  402bbe:	601a      	str	r2, [r3, #0]
}
  402bc0:	e023      	b.n	402c0a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402bc2:	687b      	ldr	r3, [r7, #4]
  402bc4:	4a18      	ldr	r2, [pc, #96]	; (402c28 <system_init_flash+0x90>)
  402bc6:	4293      	cmp	r3, r2
  402bc8:	d803      	bhi.n	402bd2 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402bca:	4b14      	ldr	r3, [pc, #80]	; (402c1c <system_init_flash+0x84>)
  402bcc:	4a17      	ldr	r2, [pc, #92]	; (402c2c <system_init_flash+0x94>)
  402bce:	601a      	str	r2, [r3, #0]
}
  402bd0:	e01b      	b.n	402c0a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402bd2:	687b      	ldr	r3, [r7, #4]
  402bd4:	4a16      	ldr	r2, [pc, #88]	; (402c30 <system_init_flash+0x98>)
  402bd6:	4293      	cmp	r3, r2
  402bd8:	d803      	bhi.n	402be2 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402bda:	4b10      	ldr	r3, [pc, #64]	; (402c1c <system_init_flash+0x84>)
  402bdc:	4a15      	ldr	r2, [pc, #84]	; (402c34 <system_init_flash+0x9c>)
  402bde:	601a      	str	r2, [r3, #0]
}
  402be0:	e013      	b.n	402c0a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402be2:	687b      	ldr	r3, [r7, #4]
  402be4:	4a14      	ldr	r2, [pc, #80]	; (402c38 <system_init_flash+0xa0>)
  402be6:	4293      	cmp	r3, r2
  402be8:	d804      	bhi.n	402bf4 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402bea:	4b0c      	ldr	r3, [pc, #48]	; (402c1c <system_init_flash+0x84>)
  402bec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402bf0:	601a      	str	r2, [r3, #0]
}
  402bf2:	e00a      	b.n	402c0a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402bf4:	687b      	ldr	r3, [r7, #4]
  402bf6:	4a11      	ldr	r2, [pc, #68]	; (402c3c <system_init_flash+0xa4>)
  402bf8:	4293      	cmp	r3, r2
  402bfa:	d803      	bhi.n	402c04 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402bfc:	4b07      	ldr	r3, [pc, #28]	; (402c1c <system_init_flash+0x84>)
  402bfe:	4a10      	ldr	r2, [pc, #64]	; (402c40 <system_init_flash+0xa8>)
  402c00:	601a      	str	r2, [r3, #0]
}
  402c02:	e002      	b.n	402c0a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402c04:	4b05      	ldr	r3, [pc, #20]	; (402c1c <system_init_flash+0x84>)
  402c06:	4a0f      	ldr	r2, [pc, #60]	; (402c44 <system_init_flash+0xac>)
  402c08:	601a      	str	r2, [r3, #0]
}
  402c0a:	bf00      	nop
  402c0c:	370c      	adds	r7, #12
  402c0e:	46bd      	mov	sp, r7
  402c10:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c14:	4770      	bx	lr
  402c16:	bf00      	nop
  402c18:	015ef3bf 	.word	0x015ef3bf
  402c1c:	400e0c00 	.word	0x400e0c00
  402c20:	02bde77f 	.word	0x02bde77f
  402c24:	04000100 	.word	0x04000100
  402c28:	041cdb3f 	.word	0x041cdb3f
  402c2c:	04000200 	.word	0x04000200
  402c30:	057bceff 	.word	0x057bceff
  402c34:	04000300 	.word	0x04000300
  402c38:	06dac2bf 	.word	0x06dac2bf
  402c3c:	0839b67f 	.word	0x0839b67f
  402c40:	04000500 	.word	0x04000500
  402c44:	04000600 	.word	0x04000600

00402c48 <osc_get_rate>:
{
  402c48:	b480      	push	{r7}
  402c4a:	b083      	sub	sp, #12
  402c4c:	af00      	add	r7, sp, #0
  402c4e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402c50:	687b      	ldr	r3, [r7, #4]
  402c52:	2b07      	cmp	r3, #7
  402c54:	d825      	bhi.n	402ca2 <osc_get_rate+0x5a>
  402c56:	a201      	add	r2, pc, #4	; (adr r2, 402c5c <osc_get_rate+0x14>)
  402c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c5c:	00402c7d 	.word	0x00402c7d
  402c60:	00402c83 	.word	0x00402c83
  402c64:	00402c89 	.word	0x00402c89
  402c68:	00402c8f 	.word	0x00402c8f
  402c6c:	00402c93 	.word	0x00402c93
  402c70:	00402c97 	.word	0x00402c97
  402c74:	00402c9b 	.word	0x00402c9b
  402c78:	00402c9f 	.word	0x00402c9f
		return OSC_SLCK_32K_RC_HZ;
  402c7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402c80:	e010      	b.n	402ca4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402c86:	e00d      	b.n	402ca4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402c8c:	e00a      	b.n	402ca4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402c8e:	4b08      	ldr	r3, [pc, #32]	; (402cb0 <osc_get_rate+0x68>)
  402c90:	e008      	b.n	402ca4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402c92:	4b08      	ldr	r3, [pc, #32]	; (402cb4 <osc_get_rate+0x6c>)
  402c94:	e006      	b.n	402ca4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402c96:	4b08      	ldr	r3, [pc, #32]	; (402cb8 <osc_get_rate+0x70>)
  402c98:	e004      	b.n	402ca4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402c9a:	4b07      	ldr	r3, [pc, #28]	; (402cb8 <osc_get_rate+0x70>)
  402c9c:	e002      	b.n	402ca4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402c9e:	4b06      	ldr	r3, [pc, #24]	; (402cb8 <osc_get_rate+0x70>)
  402ca0:	e000      	b.n	402ca4 <osc_get_rate+0x5c>
	return 0;
  402ca2:	2300      	movs	r3, #0
}
  402ca4:	4618      	mov	r0, r3
  402ca6:	370c      	adds	r7, #12
  402ca8:	46bd      	mov	sp, r7
  402caa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cae:	4770      	bx	lr
  402cb0:	003d0900 	.word	0x003d0900
  402cb4:	007a1200 	.word	0x007a1200
  402cb8:	00b71b00 	.word	0x00b71b00

00402cbc <sysclk_get_main_hz>:
{
  402cbc:	b580      	push	{r7, lr}
  402cbe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402cc0:	2006      	movs	r0, #6
  402cc2:	4b05      	ldr	r3, [pc, #20]	; (402cd8 <sysclk_get_main_hz+0x1c>)
  402cc4:	4798      	blx	r3
  402cc6:	4602      	mov	r2, r0
  402cc8:	4613      	mov	r3, r2
  402cca:	009b      	lsls	r3, r3, #2
  402ccc:	4413      	add	r3, r2
  402cce:	009a      	lsls	r2, r3, #2
  402cd0:	4413      	add	r3, r2
}
  402cd2:	4618      	mov	r0, r3
  402cd4:	bd80      	pop	{r7, pc}
  402cd6:	bf00      	nop
  402cd8:	00402c49 	.word	0x00402c49

00402cdc <sysclk_get_cpu_hz>:
{
  402cdc:	b580      	push	{r7, lr}
  402cde:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402ce0:	4b02      	ldr	r3, [pc, #8]	; (402cec <sysclk_get_cpu_hz+0x10>)
  402ce2:	4798      	blx	r3
  402ce4:	4603      	mov	r3, r0
}
  402ce6:	4618      	mov	r0, r3
  402ce8:	bd80      	pop	{r7, pc}
  402cea:	bf00      	nop
  402cec:	00402cbd 	.word	0x00402cbd

00402cf0 <but1_callback>:

/************************************************************************/
/* callbacks                                                              */
/************************************************************************/
void but1_callback(void)
{
  402cf0:	b480      	push	{r7}
  402cf2:	af00      	add	r7, sp, #0
	but1_flag = 1;
  402cf4:	4b03      	ldr	r3, [pc, #12]	; (402d04 <but1_callback+0x14>)
  402cf6:	2201      	movs	r2, #1
  402cf8:	701a      	strb	r2, [r3, #0]
}
  402cfa:	bf00      	nop
  402cfc:	46bd      	mov	sp, r7
  402cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d02:	4770      	bx	lr
  402d04:	204006f0 	.word	0x204006f0

00402d08 <echo_callback>:

void echo_callback(void)
{
  402d08:	b580      	push	{r7, lr}
  402d0a:	af00      	add	r7, sp, #0
	if (pio_get(ECHO_PIO, PIO_INPUT, ECHO_IDX_MASK)) {
  402d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d10:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d14:	480e      	ldr	r0, [pc, #56]	; (402d50 <echo_callback+0x48>)
  402d16:	4b0f      	ldr	r3, [pc, #60]	; (402d54 <echo_callback+0x4c>)
  402d18:	4798      	blx	r3
  402d1a:	4603      	mov	r3, r0
  402d1c:	2b00      	cmp	r3, #0
  402d1e:	d00c      	beq.n	402d3a <echo_callback+0x32>
		 RTT_init(freq, 0, 0);
  402d20:	4b0d      	ldr	r3, [pc, #52]	; (402d58 <echo_callback+0x50>)
  402d22:	681b      	ldr	r3, [r3, #0]
  402d24:	ee07 3a90 	vmov	s15, r3
  402d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  402d2c:	2200      	movs	r2, #0
  402d2e:	2100      	movs	r1, #0
  402d30:	ee17 0a90 	vmov	r0, s15
  402d34:	4b09      	ldr	r3, [pc, #36]	; (402d5c <echo_callback+0x54>)
  402d36:	4798      	blx	r3
	} else { 
		echo_flag = 1;
		rtt_time = get_time_rtt();
	}
}
  402d38:	e007      	b.n	402d4a <echo_callback+0x42>
		echo_flag = 1;
  402d3a:	4b09      	ldr	r3, [pc, #36]	; (402d60 <echo_callback+0x58>)
  402d3c:	2201      	movs	r2, #1
  402d3e:	701a      	strb	r2, [r3, #0]
		rtt_time = get_time_rtt();
  402d40:	4b08      	ldr	r3, [pc, #32]	; (402d64 <echo_callback+0x5c>)
  402d42:	4798      	blx	r3
  402d44:	4602      	mov	r2, r0
  402d46:	4b08      	ldr	r3, [pc, #32]	; (402d68 <echo_callback+0x60>)
  402d48:	601a      	str	r2, [r3, #0]
}
  402d4a:	bf00      	nop
  402d4c:	bd80      	pop	{r7, pc}
  402d4e:	bf00      	nop
  402d50:	400e1400 	.word	0x400e1400
  402d54:	00402001 	.word	0x00402001
  402d58:	20400020 	.word	0x20400020
  402d5c:	004007a1 	.word	0x004007a1
  402d60:	204006f8 	.word	0x204006f8
  402d64:	00402d99 	.word	0x00402d99
  402d68:	204006ec 	.word	0x204006ec

00402d6c <erase_oled>:
/************************************************************************/
/* functions                                                             */
/************************************************************************/
void erase_oled() {
  402d6c:	b598      	push	{r3, r4, r7, lr}
  402d6e:	af00      	add	r7, sp, #0
	gfx_mono_draw_string("             ", 0, 5, &sysfont);
  402d70:	4b06      	ldr	r3, [pc, #24]	; (402d8c <erase_oled+0x20>)
  402d72:	2205      	movs	r2, #5
  402d74:	2100      	movs	r1, #0
  402d76:	4806      	ldr	r0, [pc, #24]	; (402d90 <erase_oled+0x24>)
  402d78:	4c06      	ldr	r4, [pc, #24]	; (402d94 <erase_oled+0x28>)
  402d7a:	47a0      	blx	r4
	gfx_mono_draw_string("             ", 0, 16, &sysfont);
  402d7c:	4b03      	ldr	r3, [pc, #12]	; (402d8c <erase_oled+0x20>)
  402d7e:	2210      	movs	r2, #16
  402d80:	2100      	movs	r1, #0
  402d82:	4803      	ldr	r0, [pc, #12]	; (402d90 <erase_oled+0x24>)
  402d84:	4c03      	ldr	r4, [pc, #12]	; (402d94 <erase_oled+0x28>)
  402d86:	47a0      	blx	r4
}
  402d88:	bf00      	nop
  402d8a:	bd98      	pop	{r3, r4, r7, pc}
  402d8c:	2040000c 	.word	0x2040000c
  402d90:	004047e0 	.word	0x004047e0
  402d94:	00400c65 	.word	0x00400c65

00402d98 <get_time_rtt>:
void pin_toggle(Pio *pio, uint32_t mask) {
	pio_get_output_data_status(pio, mask) ? pio_clear(pio, mask) : pio_set(pio,mask);
}

static uint32_t get_time_rtt() {
  402d98:	b580      	push	{r7, lr}
  402d9a:	af00      	add	r7, sp, #0
	return rtt_read_timer_value(RTT);
  402d9c:	4802      	ldr	r0, [pc, #8]	; (402da8 <get_time_rtt+0x10>)
  402d9e:	4b03      	ldr	r3, [pc, #12]	; (402dac <get_time_rtt+0x14>)
  402da0:	4798      	blx	r3
  402da2:	4603      	mov	r3, r0
}
  402da4:	4618      	mov	r0, r3
  402da6:	bd80      	pop	{r7, pc}
  402da8:	400e1830 	.word	0x400e1830
  402dac:	004002ad 	.word	0x004002ad

00402db0 <pulse>:

void pulse() {
  402db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402db2:	af00      	add	r7, sp, #0
	pio_set(TRIG_PIO, TRIG_IDX_MASK);
  402db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402db8:	4818      	ldr	r0, [pc, #96]	; (402e1c <pulse+0x6c>)
  402dba:	4b19      	ldr	r3, [pc, #100]	; (402e20 <pulse+0x70>)
  402dbc:	4798      	blx	r3
	delay_us(10);
  402dbe:	4b19      	ldr	r3, [pc, #100]	; (402e24 <pulse+0x74>)
  402dc0:	4798      	blx	r3
  402dc2:	4603      	mov	r3, r0
  402dc4:	4619      	mov	r1, r3
  402dc6:	f04f 0200 	mov.w	r2, #0
  402dca:	460b      	mov	r3, r1
  402dcc:	4614      	mov	r4, r2
  402dce:	00a6      	lsls	r6, r4, #2
  402dd0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402dd4:	009d      	lsls	r5, r3, #2
  402dd6:	462b      	mov	r3, r5
  402dd8:	4634      	mov	r4, r6
  402dda:	185b      	adds	r3, r3, r1
  402ddc:	eb44 0402 	adc.w	r4, r4, r2
  402de0:	18db      	adds	r3, r3, r3
  402de2:	eb44 0404 	adc.w	r4, r4, r4
  402de6:	4619      	mov	r1, r3
  402de8:	4622      	mov	r2, r4
  402dea:	4b0f      	ldr	r3, [pc, #60]	; (402e28 <pulse+0x78>)
  402dec:	f04f 0400 	mov.w	r4, #0
  402df0:	18cd      	adds	r5, r1, r3
  402df2:	eb42 0604 	adc.w	r6, r2, r4
  402df6:	4628      	mov	r0, r5
  402df8:	4631      	mov	r1, r6
  402dfa:	4c0c      	ldr	r4, [pc, #48]	; (402e2c <pulse+0x7c>)
  402dfc:	4a0c      	ldr	r2, [pc, #48]	; (402e30 <pulse+0x80>)
  402dfe:	f04f 0300 	mov.w	r3, #0
  402e02:	47a0      	blx	r4
  402e04:	4603      	mov	r3, r0
  402e06:	460c      	mov	r4, r1
  402e08:	4618      	mov	r0, r3
  402e0a:	4b0a      	ldr	r3, [pc, #40]	; (402e34 <pulse+0x84>)
  402e0c:	4798      	blx	r3
	pio_clear(TRIG_PIO, TRIG_IDX_MASK);
  402e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402e12:	4802      	ldr	r0, [pc, #8]	; (402e1c <pulse+0x6c>)
  402e14:	4b08      	ldr	r3, [pc, #32]	; (402e38 <pulse+0x88>)
  402e16:	4798      	blx	r3
}
  402e18:	bf00      	nop
  402e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e1c:	400e1200 	.word	0x400e1200
  402e20:	00401fc9 	.word	0x00401fc9
  402e24:	00402cdd 	.word	0x00402cdd
  402e28:	005a83df 	.word	0x005a83df
  402e2c:	00403919 	.word	0x00403919
  402e30:	005a83e0 	.word	0x005a83e0
  402e34:	20400001 	.word	0x20400001
  402e38:	00401fe5 	.word	0x00401fe5

00402e3c <RTT_Handler>:
void set_alarm_but1();
/************************************************************************/
/* handlers                                                             */
/************************************************************************/

void RTT_Handler(void) {
  402e3c:	b580      	push	{r7, lr}
  402e3e:	b082      	sub	sp, #8
  402e40:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  402e42:	4804      	ldr	r0, [pc, #16]	; (402e54 <RTT_Handler+0x18>)
  402e44:	4b04      	ldr	r3, [pc, #16]	; (402e58 <RTT_Handler+0x1c>)
  402e46:	4798      	blx	r3
  402e48:	6078      	str	r0, [r7, #4]
	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		//pin_toggle(TRIG_PIO, TRIG_IDX_MASK);    // BLINK Led
	}

}
  402e4a:	bf00      	nop
  402e4c:	3708      	adds	r7, #8
  402e4e:	46bd      	mov	sp, r7
  402e50:	bd80      	pop	{r7, pc}
  402e52:	bf00      	nop
  402e54:	400e1830 	.word	0x400e1830
  402e58:	004002db 	.word	0x004002db

00402e5c <io_init>:

/************************************************************************/
/* start                                                                */
/************************************************************************/
void io_init(void)
{
  402e5c:	b590      	push	{r4, r7, lr}
  402e5e:	b083      	sub	sp, #12
  402e60:	af02      	add	r7, sp, #8
	config_button(BUT1_PIO, BUT1_IDX_MASK, BUT1_PIO_ID, but1_callback, 1, 1); 
  402e62:	2301      	movs	r3, #1
  402e64:	9301      	str	r3, [sp, #4]
  402e66:	2301      	movs	r3, #1
  402e68:	9300      	str	r3, [sp, #0]
  402e6a:	4b10      	ldr	r3, [pc, #64]	; (402eac <io_init+0x50>)
  402e6c:	2210      	movs	r2, #16
  402e6e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e72:	480f      	ldr	r0, [pc, #60]	; (402eb0 <io_init+0x54>)
  402e74:	4c0f      	ldr	r4, [pc, #60]	; (402eb4 <io_init+0x58>)
  402e76:	47a0      	blx	r4
	config_button(ECHO_PIO, ECHO_IDX_MASK, ECHO_PIO_ID, echo_callback, 0, 0);
  402e78:	2300      	movs	r3, #0
  402e7a:	9301      	str	r3, [sp, #4]
  402e7c:	2300      	movs	r3, #0
  402e7e:	9300      	str	r3, [sp, #0]
  402e80:	4b0d      	ldr	r3, [pc, #52]	; (402eb8 <io_init+0x5c>)
  402e82:	2210      	movs	r2, #16
  402e84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e88:	4809      	ldr	r0, [pc, #36]	; (402eb0 <io_init+0x54>)
  402e8a:	4c0a      	ldr	r4, [pc, #40]	; (402eb4 <io_init+0x58>)
  402e8c:	47a0      	blx	r4
	
	pmc_enable_periph_clk(TRIG_PIO_ID);
  402e8e:	200c      	movs	r0, #12
  402e90:	4b0a      	ldr	r3, [pc, #40]	; (402ebc <io_init+0x60>)
  402e92:	4798      	blx	r3
	pio_configure(TRIG_PIO, PIO_OUTPUT_1, TRIG_IDX_MASK, PIO_PULLUP);
  402e94:	2301      	movs	r3, #1
  402e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402e9a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402e9e:	4808      	ldr	r0, [pc, #32]	; (402ec0 <io_init+0x64>)
  402ea0:	4c08      	ldr	r4, [pc, #32]	; (402ec4 <io_init+0x68>)
  402ea2:	47a0      	blx	r4
}
  402ea4:	bf00      	nop
  402ea6:	3704      	adds	r7, #4
  402ea8:	46bd      	mov	sp, r7
  402eaa:	bd90      	pop	{r4, r7, pc}
  402eac:	00402cf1 	.word	0x00402cf1
  402eb0:	400e1400 	.word	0x400e1400
  402eb4:	00400879 	.word	0x00400879
  402eb8:	00402d09 	.word	0x00402d09
  402ebc:	0040286d 	.word	0x0040286d
  402ec0:	400e1200 	.word	0x400e1200
  402ec4:	0040223d 	.word	0x0040223d

00402ec8 <main>:

int main (void)
{
  402ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402eca:	b087      	sub	sp, #28
  402ecc:	af00      	add	r7, sp, #0
	board_init();
  402ece:	4b54      	ldr	r3, [pc, #336]	; (403020 <main+0x158>)
  402ed0:	4798      	blx	r3
	sysclk_init();
  402ed2:	4b54      	ldr	r3, [pc, #336]	; (403024 <main+0x15c>)
  402ed4:	4798      	blx	r3
	delay_init();
	
	char str[10];
	float distance = 0.0;
  402ed6:	f04f 0300 	mov.w	r3, #0
  402eda:	613b      	str	r3, [r7, #16]
	int n = 0;
  402edc:	2300      	movs	r3, #0
  402ede:	617b      	str	r3, [r7, #20]

  // Init OLED
	gfx_mono_ssd1306_init();
  402ee0:	4b51      	ldr	r3, [pc, #324]	; (403028 <main+0x160>)
  402ee2:	4798      	blx	r3
	io_init();
  402ee4:	4b51      	ldr	r3, [pc, #324]	; (40302c <main+0x164>)
  402ee6:	4798      	blx	r3

  /* Insert application code here, after the board has been initialized. */
	while(1) {
		if(but1_flag) {
  402ee8:	4b51      	ldr	r3, [pc, #324]	; (403030 <main+0x168>)
  402eea:	781b      	ldrb	r3, [r3, #0]
  402eec:	b2db      	uxtb	r3, r3
  402eee:	2b00      	cmp	r3, #0
  402ef0:	d004      	beq.n	402efc <main+0x34>
			pulse();
  402ef2:	4b50      	ldr	r3, [pc, #320]	; (403034 <main+0x16c>)
  402ef4:	4798      	blx	r3
			but1_flag = 0;
  402ef6:	4b4e      	ldr	r3, [pc, #312]	; (403030 <main+0x168>)
  402ef8:	2200      	movs	r2, #0
  402efa:	701a      	strb	r2, [r3, #0]
		}
		if(echo_flag) {
  402efc:	4b4e      	ldr	r3, [pc, #312]	; (403038 <main+0x170>)
  402efe:	781b      	ldrb	r3, [r3, #0]
  402f00:	b2db      	uxtb	r3, r3
  402f02:	2b00      	cmp	r3, #0
  402f04:	d0f0      	beq.n	402ee8 <main+0x20>
			distance = (SOUND_SPEED*rtt_time*100)/(2.0 * freq);
  402f06:	4b4d      	ldr	r3, [pc, #308]	; (40303c <main+0x174>)
  402f08:	681a      	ldr	r2, [r3, #0]
  402f0a:	4b4d      	ldr	r3, [pc, #308]	; (403040 <main+0x178>)
  402f0c:	4610      	mov	r0, r2
  402f0e:	4798      	blx	r3
  402f10:	4c4c      	ldr	r4, [pc, #304]	; (403044 <main+0x17c>)
  402f12:	f04f 0200 	mov.w	r2, #0
  402f16:	4b4c      	ldr	r3, [pc, #304]	; (403048 <main+0x180>)
  402f18:	47a0      	blx	r4
  402f1a:	4603      	mov	r3, r0
  402f1c:	460c      	mov	r4, r1
  402f1e:	4618      	mov	r0, r3
  402f20:	4621      	mov	r1, r4
  402f22:	4c48      	ldr	r4, [pc, #288]	; (403044 <main+0x17c>)
  402f24:	f04f 0200 	mov.w	r2, #0
  402f28:	4b48      	ldr	r3, [pc, #288]	; (40304c <main+0x184>)
  402f2a:	47a0      	blx	r4
  402f2c:	4603      	mov	r3, r0
  402f2e:	460c      	mov	r4, r1
  402f30:	461d      	mov	r5, r3
  402f32:	4626      	mov	r6, r4
  402f34:	4b46      	ldr	r3, [pc, #280]	; (403050 <main+0x188>)
  402f36:	681a      	ldr	r2, [r3, #0]
  402f38:	4b46      	ldr	r3, [pc, #280]	; (403054 <main+0x18c>)
  402f3a:	4610      	mov	r0, r2
  402f3c:	4798      	blx	r3
  402f3e:	4c46      	ldr	r4, [pc, #280]	; (403058 <main+0x190>)
  402f40:	4602      	mov	r2, r0
  402f42:	460b      	mov	r3, r1
  402f44:	47a0      	blx	r4
  402f46:	4603      	mov	r3, r0
  402f48:	460c      	mov	r4, r1
  402f4a:	461a      	mov	r2, r3
  402f4c:	4623      	mov	r3, r4
  402f4e:	4c43      	ldr	r4, [pc, #268]	; (40305c <main+0x194>)
  402f50:	4628      	mov	r0, r5
  402f52:	4631      	mov	r1, r6
  402f54:	47a0      	blx	r4
  402f56:	4603      	mov	r3, r0
  402f58:	460c      	mov	r4, r1
  402f5a:	4619      	mov	r1, r3
  402f5c:	4622      	mov	r2, r4
  402f5e:	4b40      	ldr	r3, [pc, #256]	; (403060 <main+0x198>)
  402f60:	4608      	mov	r0, r1
  402f62:	4611      	mov	r1, r2
  402f64:	4798      	blx	r3
  402f66:	4603      	mov	r3, r0
  402f68:	613b      	str	r3, [r7, #16]
			if (n == 0) {
  402f6a:	697b      	ldr	r3, [r7, #20]
  402f6c:	2b00      	cmp	r3, #0
  402f6e:	d101      	bne.n	402f74 <main+0xac>
				erase_oled();
  402f70:	4b3c      	ldr	r3, [pc, #240]	; (403064 <main+0x19c>)
  402f72:	4798      	blx	r3
			}

			if(distance > 400 || distance < 2) {
  402f74:	edd7 7a04 	vldr	s15, [r7, #16]
  402f78:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 403068 <main+0x1a0>
  402f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
  402f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402f84:	dc08      	bgt.n	402f98 <main+0xd0>
  402f86:	edd7 7a04 	vldr	s15, [r7, #16]
  402f8a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
  402f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
  402f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  402f96:	d50a      	bpl.n	402fae <main+0xe6>
				erase_oled();
  402f98:	4b32      	ldr	r3, [pc, #200]	; (403064 <main+0x19c>)
  402f9a:	4798      	blx	r3
				gfx_mono_draw_string("ERROR", 0, 16, &sysfont);
  402f9c:	4b33      	ldr	r3, [pc, #204]	; (40306c <main+0x1a4>)
  402f9e:	2210      	movs	r2, #16
  402fa0:	2100      	movs	r1, #0
  402fa2:	4833      	ldr	r0, [pc, #204]	; (403070 <main+0x1a8>)
  402fa4:	4c33      	ldr	r4, [pc, #204]	; (403074 <main+0x1ac>)
  402fa6:	47a0      	blx	r4
				n = 0;
  402fa8:	2300      	movs	r3, #0
  402faa:	617b      	str	r3, [r7, #20]
  402fac:	e034      	b.n	403018 <main+0x150>
			} else {
				int y_dist =  MAX_Y * (1 - distance/400.0);
  402fae:	4b32      	ldr	r3, [pc, #200]	; (403078 <main+0x1b0>)
  402fb0:	6938      	ldr	r0, [r7, #16]
  402fb2:	4798      	blx	r3
  402fb4:	4c29      	ldr	r4, [pc, #164]	; (40305c <main+0x194>)
  402fb6:	f04f 0200 	mov.w	r2, #0
  402fba:	4b30      	ldr	r3, [pc, #192]	; (40307c <main+0x1b4>)
  402fbc:	47a0      	blx	r4
  402fbe:	4603      	mov	r3, r0
  402fc0:	460c      	mov	r4, r1
  402fc2:	461a      	mov	r2, r3
  402fc4:	4623      	mov	r3, r4
  402fc6:	4c2e      	ldr	r4, [pc, #184]	; (403080 <main+0x1b8>)
  402fc8:	f04f 0000 	mov.w	r0, #0
  402fcc:	492d      	ldr	r1, [pc, #180]	; (403084 <main+0x1bc>)
  402fce:	47a0      	blx	r4
  402fd0:	4603      	mov	r3, r0
  402fd2:	460c      	mov	r4, r1
  402fd4:	4618      	mov	r0, r3
  402fd6:	4621      	mov	r1, r4
  402fd8:	4c1a      	ldr	r4, [pc, #104]	; (403044 <main+0x17c>)
  402fda:	f04f 0200 	mov.w	r2, #0
  402fde:	4b2a      	ldr	r3, [pc, #168]	; (403088 <main+0x1c0>)
  402fe0:	47a0      	blx	r4
  402fe2:	4603      	mov	r3, r0
  402fe4:	460c      	mov	r4, r1
  402fe6:	4619      	mov	r1, r3
  402fe8:	4622      	mov	r2, r4
  402fea:	4b28      	ldr	r3, [pc, #160]	; (40308c <main+0x1c4>)
  402fec:	4608      	mov	r0, r1
  402fee:	4611      	mov	r1, r2
  402ff0:	4798      	blx	r3
  402ff2:	4603      	mov	r3, r0
  402ff4:	60fb      	str	r3, [r7, #12]
				gfx_mono_draw_string(".", n, y_dist, &sysfont);
  402ff6:	697b      	ldr	r3, [r7, #20]
  402ff8:	b2d9      	uxtb	r1, r3
  402ffa:	68fb      	ldr	r3, [r7, #12]
  402ffc:	b2da      	uxtb	r2, r3
  402ffe:	4b1b      	ldr	r3, [pc, #108]	; (40306c <main+0x1a4>)
  403000:	4823      	ldr	r0, [pc, #140]	; (403090 <main+0x1c8>)
  403002:	4c1c      	ldr	r4, [pc, #112]	; (403074 <main+0x1ac>)
  403004:	47a0      	blx	r4
				if (n < MAX_X - 7) {
  403006:	697b      	ldr	r3, [r7, #20]
  403008:	2b78      	cmp	r3, #120	; 0x78
  40300a:	dc03      	bgt.n	403014 <main+0x14c>
					n += 5;
  40300c:	697b      	ldr	r3, [r7, #20]
  40300e:	3305      	adds	r3, #5
  403010:	617b      	str	r3, [r7, #20]
  403012:	e001      	b.n	403018 <main+0x150>
					} else {
					n = 0;
  403014:	2300      	movs	r3, #0
  403016:	617b      	str	r3, [r7, #20]
				}
			}
			
			
			echo_flag = 0;
  403018:	4b07      	ldr	r3, [pc, #28]	; (403038 <main+0x170>)
  40301a:	2200      	movs	r2, #0
  40301c:	701a      	strb	r2, [r3, #0]
		if(but1_flag) {
  40301e:	e763      	b.n	402ee8 <main+0x20>
  403020:	00401ee1 	.word	0x00401ee1
  403024:	00401a1d 	.word	0x00401a1d
  403028:	00400d69 	.word	0x00400d69
  40302c:	00402e5d 	.word	0x00402e5d
  403030:	204006f0 	.word	0x204006f0
  403034:	00402db1 	.word	0x00402db1
  403038:	204006f8 	.word	0x204006f8
  40303c:	204006ec 	.word	0x204006ec
  403040:	00403319 	.word	0x00403319
  403044:	00403405 	.word	0x00403405
  403048:	40754000 	.word	0x40754000
  40304c:	40590000 	.word	0x40590000
  403050:	20400020 	.word	0x20400020
  403054:	00403339 	.word	0x00403339
  403058:	004030a1 	.word	0x004030a1
  40305c:	00403659 	.word	0x00403659
  403060:	00403879 	.word	0x00403879
  403064:	00402d6d 	.word	0x00402d6d
  403068:	43c80000 	.word	0x43c80000
  40306c:	2040000c 	.word	0x2040000c
  403070:	004047f0 	.word	0x004047f0
  403074:	00400c65 	.word	0x00400c65
  403078:	0040335d 	.word	0x0040335d
  40307c:	40790000 	.word	0x40790000
  403080:	0040309d 	.word	0x0040309d
  403084:	3ff00000 	.word	0x3ff00000
  403088:	40340000 	.word	0x40340000
  40308c:	00403829 	.word	0x00403829
  403090:	004047f8 	.word	0x004047f8

00403094 <__aeabi_drsub>:
  403094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403098:	e002      	b.n	4030a0 <__adddf3>
  40309a:	bf00      	nop

0040309c <__aeabi_dsub>:
  40309c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004030a0 <__adddf3>:
  4030a0:	b530      	push	{r4, r5, lr}
  4030a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4030a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4030aa:	ea94 0f05 	teq	r4, r5
  4030ae:	bf08      	it	eq
  4030b0:	ea90 0f02 	teqeq	r0, r2
  4030b4:	bf1f      	itttt	ne
  4030b6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4030ba:	ea55 0c02 	orrsne.w	ip, r5, r2
  4030be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4030c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4030c6:	f000 80e2 	beq.w	40328e <__adddf3+0x1ee>
  4030ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4030ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4030d2:	bfb8      	it	lt
  4030d4:	426d      	neglt	r5, r5
  4030d6:	dd0c      	ble.n	4030f2 <__adddf3+0x52>
  4030d8:	442c      	add	r4, r5
  4030da:	ea80 0202 	eor.w	r2, r0, r2
  4030de:	ea81 0303 	eor.w	r3, r1, r3
  4030e2:	ea82 0000 	eor.w	r0, r2, r0
  4030e6:	ea83 0101 	eor.w	r1, r3, r1
  4030ea:	ea80 0202 	eor.w	r2, r0, r2
  4030ee:	ea81 0303 	eor.w	r3, r1, r3
  4030f2:	2d36      	cmp	r5, #54	; 0x36
  4030f4:	bf88      	it	hi
  4030f6:	bd30      	pophi	{r4, r5, pc}
  4030f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4030fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403100:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403108:	d002      	beq.n	403110 <__adddf3+0x70>
  40310a:	4240      	negs	r0, r0
  40310c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403110:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403114:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40311c:	d002      	beq.n	403124 <__adddf3+0x84>
  40311e:	4252      	negs	r2, r2
  403120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403124:	ea94 0f05 	teq	r4, r5
  403128:	f000 80a7 	beq.w	40327a <__adddf3+0x1da>
  40312c:	f1a4 0401 	sub.w	r4, r4, #1
  403130:	f1d5 0e20 	rsbs	lr, r5, #32
  403134:	db0d      	blt.n	403152 <__adddf3+0xb2>
  403136:	fa02 fc0e 	lsl.w	ip, r2, lr
  40313a:	fa22 f205 	lsr.w	r2, r2, r5
  40313e:	1880      	adds	r0, r0, r2
  403140:	f141 0100 	adc.w	r1, r1, #0
  403144:	fa03 f20e 	lsl.w	r2, r3, lr
  403148:	1880      	adds	r0, r0, r2
  40314a:	fa43 f305 	asr.w	r3, r3, r5
  40314e:	4159      	adcs	r1, r3
  403150:	e00e      	b.n	403170 <__adddf3+0xd0>
  403152:	f1a5 0520 	sub.w	r5, r5, #32
  403156:	f10e 0e20 	add.w	lr, lr, #32
  40315a:	2a01      	cmp	r2, #1
  40315c:	fa03 fc0e 	lsl.w	ip, r3, lr
  403160:	bf28      	it	cs
  403162:	f04c 0c02 	orrcs.w	ip, ip, #2
  403166:	fa43 f305 	asr.w	r3, r3, r5
  40316a:	18c0      	adds	r0, r0, r3
  40316c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403174:	d507      	bpl.n	403186 <__adddf3+0xe6>
  403176:	f04f 0e00 	mov.w	lr, #0
  40317a:	f1dc 0c00 	rsbs	ip, ip, #0
  40317e:	eb7e 0000 	sbcs.w	r0, lr, r0
  403182:	eb6e 0101 	sbc.w	r1, lr, r1
  403186:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40318a:	d31b      	bcc.n	4031c4 <__adddf3+0x124>
  40318c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403190:	d30c      	bcc.n	4031ac <__adddf3+0x10c>
  403192:	0849      	lsrs	r1, r1, #1
  403194:	ea5f 0030 	movs.w	r0, r0, rrx
  403198:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40319c:	f104 0401 	add.w	r4, r4, #1
  4031a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4031a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4031a8:	f080 809a 	bcs.w	4032e0 <__adddf3+0x240>
  4031ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4031b0:	bf08      	it	eq
  4031b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4031b6:	f150 0000 	adcs.w	r0, r0, #0
  4031ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4031be:	ea41 0105 	orr.w	r1, r1, r5
  4031c2:	bd30      	pop	{r4, r5, pc}
  4031c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4031c8:	4140      	adcs	r0, r0
  4031ca:	eb41 0101 	adc.w	r1, r1, r1
  4031ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031d2:	f1a4 0401 	sub.w	r4, r4, #1
  4031d6:	d1e9      	bne.n	4031ac <__adddf3+0x10c>
  4031d8:	f091 0f00 	teq	r1, #0
  4031dc:	bf04      	itt	eq
  4031de:	4601      	moveq	r1, r0
  4031e0:	2000      	moveq	r0, #0
  4031e2:	fab1 f381 	clz	r3, r1
  4031e6:	bf08      	it	eq
  4031e8:	3320      	addeq	r3, #32
  4031ea:	f1a3 030b 	sub.w	r3, r3, #11
  4031ee:	f1b3 0220 	subs.w	r2, r3, #32
  4031f2:	da0c      	bge.n	40320e <__adddf3+0x16e>
  4031f4:	320c      	adds	r2, #12
  4031f6:	dd08      	ble.n	40320a <__adddf3+0x16a>
  4031f8:	f102 0c14 	add.w	ip, r2, #20
  4031fc:	f1c2 020c 	rsb	r2, r2, #12
  403200:	fa01 f00c 	lsl.w	r0, r1, ip
  403204:	fa21 f102 	lsr.w	r1, r1, r2
  403208:	e00c      	b.n	403224 <__adddf3+0x184>
  40320a:	f102 0214 	add.w	r2, r2, #20
  40320e:	bfd8      	it	le
  403210:	f1c2 0c20 	rsble	ip, r2, #32
  403214:	fa01 f102 	lsl.w	r1, r1, r2
  403218:	fa20 fc0c 	lsr.w	ip, r0, ip
  40321c:	bfdc      	itt	le
  40321e:	ea41 010c 	orrle.w	r1, r1, ip
  403222:	4090      	lslle	r0, r2
  403224:	1ae4      	subs	r4, r4, r3
  403226:	bfa2      	ittt	ge
  403228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40322c:	4329      	orrge	r1, r5
  40322e:	bd30      	popge	{r4, r5, pc}
  403230:	ea6f 0404 	mvn.w	r4, r4
  403234:	3c1f      	subs	r4, #31
  403236:	da1c      	bge.n	403272 <__adddf3+0x1d2>
  403238:	340c      	adds	r4, #12
  40323a:	dc0e      	bgt.n	40325a <__adddf3+0x1ba>
  40323c:	f104 0414 	add.w	r4, r4, #20
  403240:	f1c4 0220 	rsb	r2, r4, #32
  403244:	fa20 f004 	lsr.w	r0, r0, r4
  403248:	fa01 f302 	lsl.w	r3, r1, r2
  40324c:	ea40 0003 	orr.w	r0, r0, r3
  403250:	fa21 f304 	lsr.w	r3, r1, r4
  403254:	ea45 0103 	orr.w	r1, r5, r3
  403258:	bd30      	pop	{r4, r5, pc}
  40325a:	f1c4 040c 	rsb	r4, r4, #12
  40325e:	f1c4 0220 	rsb	r2, r4, #32
  403262:	fa20 f002 	lsr.w	r0, r0, r2
  403266:	fa01 f304 	lsl.w	r3, r1, r4
  40326a:	ea40 0003 	orr.w	r0, r0, r3
  40326e:	4629      	mov	r1, r5
  403270:	bd30      	pop	{r4, r5, pc}
  403272:	fa21 f004 	lsr.w	r0, r1, r4
  403276:	4629      	mov	r1, r5
  403278:	bd30      	pop	{r4, r5, pc}
  40327a:	f094 0f00 	teq	r4, #0
  40327e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403282:	bf06      	itte	eq
  403284:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403288:	3401      	addeq	r4, #1
  40328a:	3d01      	subne	r5, #1
  40328c:	e74e      	b.n	40312c <__adddf3+0x8c>
  40328e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403292:	bf18      	it	ne
  403294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403298:	d029      	beq.n	4032ee <__adddf3+0x24e>
  40329a:	ea94 0f05 	teq	r4, r5
  40329e:	bf08      	it	eq
  4032a0:	ea90 0f02 	teqeq	r0, r2
  4032a4:	d005      	beq.n	4032b2 <__adddf3+0x212>
  4032a6:	ea54 0c00 	orrs.w	ip, r4, r0
  4032aa:	bf04      	itt	eq
  4032ac:	4619      	moveq	r1, r3
  4032ae:	4610      	moveq	r0, r2
  4032b0:	bd30      	pop	{r4, r5, pc}
  4032b2:	ea91 0f03 	teq	r1, r3
  4032b6:	bf1e      	ittt	ne
  4032b8:	2100      	movne	r1, #0
  4032ba:	2000      	movne	r0, #0
  4032bc:	bd30      	popne	{r4, r5, pc}
  4032be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4032c2:	d105      	bne.n	4032d0 <__adddf3+0x230>
  4032c4:	0040      	lsls	r0, r0, #1
  4032c6:	4149      	adcs	r1, r1
  4032c8:	bf28      	it	cs
  4032ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4032ce:	bd30      	pop	{r4, r5, pc}
  4032d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4032d4:	bf3c      	itt	cc
  4032d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4032da:	bd30      	popcc	{r4, r5, pc}
  4032dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4032e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4032e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4032e8:	f04f 0000 	mov.w	r0, #0
  4032ec:	bd30      	pop	{r4, r5, pc}
  4032ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4032f2:	bf1a      	itte	ne
  4032f4:	4619      	movne	r1, r3
  4032f6:	4610      	movne	r0, r2
  4032f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4032fc:	bf1c      	itt	ne
  4032fe:	460b      	movne	r3, r1
  403300:	4602      	movne	r2, r0
  403302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403306:	bf06      	itte	eq
  403308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40330c:	ea91 0f03 	teqeq	r1, r3
  403310:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403314:	bd30      	pop	{r4, r5, pc}
  403316:	bf00      	nop

00403318 <__aeabi_ui2d>:
  403318:	f090 0f00 	teq	r0, #0
  40331c:	bf04      	itt	eq
  40331e:	2100      	moveq	r1, #0
  403320:	4770      	bxeq	lr
  403322:	b530      	push	{r4, r5, lr}
  403324:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403328:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40332c:	f04f 0500 	mov.w	r5, #0
  403330:	f04f 0100 	mov.w	r1, #0
  403334:	e750      	b.n	4031d8 <__adddf3+0x138>
  403336:	bf00      	nop

00403338 <__aeabi_i2d>:
  403338:	f090 0f00 	teq	r0, #0
  40333c:	bf04      	itt	eq
  40333e:	2100      	moveq	r1, #0
  403340:	4770      	bxeq	lr
  403342:	b530      	push	{r4, r5, lr}
  403344:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403348:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40334c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403350:	bf48      	it	mi
  403352:	4240      	negmi	r0, r0
  403354:	f04f 0100 	mov.w	r1, #0
  403358:	e73e      	b.n	4031d8 <__adddf3+0x138>
  40335a:	bf00      	nop

0040335c <__aeabi_f2d>:
  40335c:	0042      	lsls	r2, r0, #1
  40335e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403362:	ea4f 0131 	mov.w	r1, r1, rrx
  403366:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40336a:	bf1f      	itttt	ne
  40336c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403374:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403378:	4770      	bxne	lr
  40337a:	f092 0f00 	teq	r2, #0
  40337e:	bf14      	ite	ne
  403380:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403384:	4770      	bxeq	lr
  403386:	b530      	push	{r4, r5, lr}
  403388:	f44f 7460 	mov.w	r4, #896	; 0x380
  40338c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403394:	e720      	b.n	4031d8 <__adddf3+0x138>
  403396:	bf00      	nop

00403398 <__aeabi_ul2d>:
  403398:	ea50 0201 	orrs.w	r2, r0, r1
  40339c:	bf08      	it	eq
  40339e:	4770      	bxeq	lr
  4033a0:	b530      	push	{r4, r5, lr}
  4033a2:	f04f 0500 	mov.w	r5, #0
  4033a6:	e00a      	b.n	4033be <__aeabi_l2d+0x16>

004033a8 <__aeabi_l2d>:
  4033a8:	ea50 0201 	orrs.w	r2, r0, r1
  4033ac:	bf08      	it	eq
  4033ae:	4770      	bxeq	lr
  4033b0:	b530      	push	{r4, r5, lr}
  4033b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4033b6:	d502      	bpl.n	4033be <__aeabi_l2d+0x16>
  4033b8:	4240      	negs	r0, r0
  4033ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4033be:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4033c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4033c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4033ca:	f43f aedc 	beq.w	403186 <__adddf3+0xe6>
  4033ce:	f04f 0203 	mov.w	r2, #3
  4033d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4033d6:	bf18      	it	ne
  4033d8:	3203      	addne	r2, #3
  4033da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4033de:	bf18      	it	ne
  4033e0:	3203      	addne	r2, #3
  4033e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4033e6:	f1c2 0320 	rsb	r3, r2, #32
  4033ea:	fa00 fc03 	lsl.w	ip, r0, r3
  4033ee:	fa20 f002 	lsr.w	r0, r0, r2
  4033f2:	fa01 fe03 	lsl.w	lr, r1, r3
  4033f6:	ea40 000e 	orr.w	r0, r0, lr
  4033fa:	fa21 f102 	lsr.w	r1, r1, r2
  4033fe:	4414      	add	r4, r2
  403400:	e6c1      	b.n	403186 <__adddf3+0xe6>
  403402:	bf00      	nop

00403404 <__aeabi_dmul>:
  403404:	b570      	push	{r4, r5, r6, lr}
  403406:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40340a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40340e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403412:	bf1d      	ittte	ne
  403414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403418:	ea94 0f0c 	teqne	r4, ip
  40341c:	ea95 0f0c 	teqne	r5, ip
  403420:	f000 f8de 	bleq	4035e0 <__aeabi_dmul+0x1dc>
  403424:	442c      	add	r4, r5
  403426:	ea81 0603 	eor.w	r6, r1, r3
  40342a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40342e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403432:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403436:	bf18      	it	ne
  403438:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40343c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403444:	d038      	beq.n	4034b8 <__aeabi_dmul+0xb4>
  403446:	fba0 ce02 	umull	ip, lr, r0, r2
  40344a:	f04f 0500 	mov.w	r5, #0
  40344e:	fbe1 e502 	umlal	lr, r5, r1, r2
  403452:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403456:	fbe0 e503 	umlal	lr, r5, r0, r3
  40345a:	f04f 0600 	mov.w	r6, #0
  40345e:	fbe1 5603 	umlal	r5, r6, r1, r3
  403462:	f09c 0f00 	teq	ip, #0
  403466:	bf18      	it	ne
  403468:	f04e 0e01 	orrne.w	lr, lr, #1
  40346c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403470:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403474:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403478:	d204      	bcs.n	403484 <__aeabi_dmul+0x80>
  40347a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40347e:	416d      	adcs	r5, r5
  403480:	eb46 0606 	adc.w	r6, r6, r6
  403484:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403488:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40348c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403490:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403494:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403498:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40349c:	bf88      	it	hi
  40349e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4034a2:	d81e      	bhi.n	4034e2 <__aeabi_dmul+0xde>
  4034a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4034a8:	bf08      	it	eq
  4034aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4034ae:	f150 0000 	adcs.w	r0, r0, #0
  4034b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4034b6:	bd70      	pop	{r4, r5, r6, pc}
  4034b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4034bc:	ea46 0101 	orr.w	r1, r6, r1
  4034c0:	ea40 0002 	orr.w	r0, r0, r2
  4034c4:	ea81 0103 	eor.w	r1, r1, r3
  4034c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4034cc:	bfc2      	ittt	gt
  4034ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  4034d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4034d6:	bd70      	popgt	{r4, r5, r6, pc}
  4034d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4034dc:	f04f 0e00 	mov.w	lr, #0
  4034e0:	3c01      	subs	r4, #1
  4034e2:	f300 80ab 	bgt.w	40363c <__aeabi_dmul+0x238>
  4034e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4034ea:	bfde      	ittt	le
  4034ec:	2000      	movle	r0, #0
  4034ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4034f2:	bd70      	pople	{r4, r5, r6, pc}
  4034f4:	f1c4 0400 	rsb	r4, r4, #0
  4034f8:	3c20      	subs	r4, #32
  4034fa:	da35      	bge.n	403568 <__aeabi_dmul+0x164>
  4034fc:	340c      	adds	r4, #12
  4034fe:	dc1b      	bgt.n	403538 <__aeabi_dmul+0x134>
  403500:	f104 0414 	add.w	r4, r4, #20
  403504:	f1c4 0520 	rsb	r5, r4, #32
  403508:	fa00 f305 	lsl.w	r3, r0, r5
  40350c:	fa20 f004 	lsr.w	r0, r0, r4
  403510:	fa01 f205 	lsl.w	r2, r1, r5
  403514:	ea40 0002 	orr.w	r0, r0, r2
  403518:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40351c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403520:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403524:	fa21 f604 	lsr.w	r6, r1, r4
  403528:	eb42 0106 	adc.w	r1, r2, r6
  40352c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403530:	bf08      	it	eq
  403532:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403536:	bd70      	pop	{r4, r5, r6, pc}
  403538:	f1c4 040c 	rsb	r4, r4, #12
  40353c:	f1c4 0520 	rsb	r5, r4, #32
  403540:	fa00 f304 	lsl.w	r3, r0, r4
  403544:	fa20 f005 	lsr.w	r0, r0, r5
  403548:	fa01 f204 	lsl.w	r2, r1, r4
  40354c:	ea40 0002 	orr.w	r0, r0, r2
  403550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403554:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403558:	f141 0100 	adc.w	r1, r1, #0
  40355c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403560:	bf08      	it	eq
  403562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403566:	bd70      	pop	{r4, r5, r6, pc}
  403568:	f1c4 0520 	rsb	r5, r4, #32
  40356c:	fa00 f205 	lsl.w	r2, r0, r5
  403570:	ea4e 0e02 	orr.w	lr, lr, r2
  403574:	fa20 f304 	lsr.w	r3, r0, r4
  403578:	fa01 f205 	lsl.w	r2, r1, r5
  40357c:	ea43 0302 	orr.w	r3, r3, r2
  403580:	fa21 f004 	lsr.w	r0, r1, r4
  403584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403588:	fa21 f204 	lsr.w	r2, r1, r4
  40358c:	ea20 0002 	bic.w	r0, r0, r2
  403590:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403594:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403598:	bf08      	it	eq
  40359a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40359e:	bd70      	pop	{r4, r5, r6, pc}
  4035a0:	f094 0f00 	teq	r4, #0
  4035a4:	d10f      	bne.n	4035c6 <__aeabi_dmul+0x1c2>
  4035a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4035aa:	0040      	lsls	r0, r0, #1
  4035ac:	eb41 0101 	adc.w	r1, r1, r1
  4035b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4035b4:	bf08      	it	eq
  4035b6:	3c01      	subeq	r4, #1
  4035b8:	d0f7      	beq.n	4035aa <__aeabi_dmul+0x1a6>
  4035ba:	ea41 0106 	orr.w	r1, r1, r6
  4035be:	f095 0f00 	teq	r5, #0
  4035c2:	bf18      	it	ne
  4035c4:	4770      	bxne	lr
  4035c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4035ca:	0052      	lsls	r2, r2, #1
  4035cc:	eb43 0303 	adc.w	r3, r3, r3
  4035d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4035d4:	bf08      	it	eq
  4035d6:	3d01      	subeq	r5, #1
  4035d8:	d0f7      	beq.n	4035ca <__aeabi_dmul+0x1c6>
  4035da:	ea43 0306 	orr.w	r3, r3, r6
  4035de:	4770      	bx	lr
  4035e0:	ea94 0f0c 	teq	r4, ip
  4035e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4035e8:	bf18      	it	ne
  4035ea:	ea95 0f0c 	teqne	r5, ip
  4035ee:	d00c      	beq.n	40360a <__aeabi_dmul+0x206>
  4035f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4035f4:	bf18      	it	ne
  4035f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4035fa:	d1d1      	bne.n	4035a0 <__aeabi_dmul+0x19c>
  4035fc:	ea81 0103 	eor.w	r1, r1, r3
  403600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403604:	f04f 0000 	mov.w	r0, #0
  403608:	bd70      	pop	{r4, r5, r6, pc}
  40360a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40360e:	bf06      	itte	eq
  403610:	4610      	moveq	r0, r2
  403612:	4619      	moveq	r1, r3
  403614:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403618:	d019      	beq.n	40364e <__aeabi_dmul+0x24a>
  40361a:	ea94 0f0c 	teq	r4, ip
  40361e:	d102      	bne.n	403626 <__aeabi_dmul+0x222>
  403620:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403624:	d113      	bne.n	40364e <__aeabi_dmul+0x24a>
  403626:	ea95 0f0c 	teq	r5, ip
  40362a:	d105      	bne.n	403638 <__aeabi_dmul+0x234>
  40362c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403630:	bf1c      	itt	ne
  403632:	4610      	movne	r0, r2
  403634:	4619      	movne	r1, r3
  403636:	d10a      	bne.n	40364e <__aeabi_dmul+0x24a>
  403638:	ea81 0103 	eor.w	r1, r1, r3
  40363c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403640:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403648:	f04f 0000 	mov.w	r0, #0
  40364c:	bd70      	pop	{r4, r5, r6, pc}
  40364e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403652:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403656:	bd70      	pop	{r4, r5, r6, pc}

00403658 <__aeabi_ddiv>:
  403658:	b570      	push	{r4, r5, r6, lr}
  40365a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40365e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403666:	bf1d      	ittte	ne
  403668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40366c:	ea94 0f0c 	teqne	r4, ip
  403670:	ea95 0f0c 	teqne	r5, ip
  403674:	f000 f8a7 	bleq	4037c6 <__aeabi_ddiv+0x16e>
  403678:	eba4 0405 	sub.w	r4, r4, r5
  40367c:	ea81 0e03 	eor.w	lr, r1, r3
  403680:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403684:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403688:	f000 8088 	beq.w	40379c <__aeabi_ddiv+0x144>
  40368c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403690:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403694:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403698:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40369c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4036a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4036a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4036a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4036ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4036b0:	429d      	cmp	r5, r3
  4036b2:	bf08      	it	eq
  4036b4:	4296      	cmpeq	r6, r2
  4036b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4036ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4036be:	d202      	bcs.n	4036c6 <__aeabi_ddiv+0x6e>
  4036c0:	085b      	lsrs	r3, r3, #1
  4036c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4036c6:	1ab6      	subs	r6, r6, r2
  4036c8:	eb65 0503 	sbc.w	r5, r5, r3
  4036cc:	085b      	lsrs	r3, r3, #1
  4036ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4036d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4036d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4036da:	ebb6 0e02 	subs.w	lr, r6, r2
  4036de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036e2:	bf22      	ittt	cs
  4036e4:	1ab6      	subcs	r6, r6, r2
  4036e6:	4675      	movcs	r5, lr
  4036e8:	ea40 000c 	orrcs.w	r0, r0, ip
  4036ec:	085b      	lsrs	r3, r3, #1
  4036ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4036f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4036f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036fa:	bf22      	ittt	cs
  4036fc:	1ab6      	subcs	r6, r6, r2
  4036fe:	4675      	movcs	r5, lr
  403700:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403704:	085b      	lsrs	r3, r3, #1
  403706:	ea4f 0232 	mov.w	r2, r2, rrx
  40370a:	ebb6 0e02 	subs.w	lr, r6, r2
  40370e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403712:	bf22      	ittt	cs
  403714:	1ab6      	subcs	r6, r6, r2
  403716:	4675      	movcs	r5, lr
  403718:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40371c:	085b      	lsrs	r3, r3, #1
  40371e:	ea4f 0232 	mov.w	r2, r2, rrx
  403722:	ebb6 0e02 	subs.w	lr, r6, r2
  403726:	eb75 0e03 	sbcs.w	lr, r5, r3
  40372a:	bf22      	ittt	cs
  40372c:	1ab6      	subcs	r6, r6, r2
  40372e:	4675      	movcs	r5, lr
  403730:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403734:	ea55 0e06 	orrs.w	lr, r5, r6
  403738:	d018      	beq.n	40376c <__aeabi_ddiv+0x114>
  40373a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40373e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403742:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403746:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40374a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40374e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403752:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403756:	d1c0      	bne.n	4036da <__aeabi_ddiv+0x82>
  403758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40375c:	d10b      	bne.n	403776 <__aeabi_ddiv+0x11e>
  40375e:	ea41 0100 	orr.w	r1, r1, r0
  403762:	f04f 0000 	mov.w	r0, #0
  403766:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40376a:	e7b6      	b.n	4036da <__aeabi_ddiv+0x82>
  40376c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403770:	bf04      	itt	eq
  403772:	4301      	orreq	r1, r0
  403774:	2000      	moveq	r0, #0
  403776:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40377a:	bf88      	it	hi
  40377c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403780:	f63f aeaf 	bhi.w	4034e2 <__aeabi_dmul+0xde>
  403784:	ebb5 0c03 	subs.w	ip, r5, r3
  403788:	bf04      	itt	eq
  40378a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40378e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403792:	f150 0000 	adcs.w	r0, r0, #0
  403796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40379a:	bd70      	pop	{r4, r5, r6, pc}
  40379c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4037a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4037a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4037a8:	bfc2      	ittt	gt
  4037aa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4037ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4037b2:	bd70      	popgt	{r4, r5, r6, pc}
  4037b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4037b8:	f04f 0e00 	mov.w	lr, #0
  4037bc:	3c01      	subs	r4, #1
  4037be:	e690      	b.n	4034e2 <__aeabi_dmul+0xde>
  4037c0:	ea45 0e06 	orr.w	lr, r5, r6
  4037c4:	e68d      	b.n	4034e2 <__aeabi_dmul+0xde>
  4037c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4037ca:	ea94 0f0c 	teq	r4, ip
  4037ce:	bf08      	it	eq
  4037d0:	ea95 0f0c 	teqeq	r5, ip
  4037d4:	f43f af3b 	beq.w	40364e <__aeabi_dmul+0x24a>
  4037d8:	ea94 0f0c 	teq	r4, ip
  4037dc:	d10a      	bne.n	4037f4 <__aeabi_ddiv+0x19c>
  4037de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4037e2:	f47f af34 	bne.w	40364e <__aeabi_dmul+0x24a>
  4037e6:	ea95 0f0c 	teq	r5, ip
  4037ea:	f47f af25 	bne.w	403638 <__aeabi_dmul+0x234>
  4037ee:	4610      	mov	r0, r2
  4037f0:	4619      	mov	r1, r3
  4037f2:	e72c      	b.n	40364e <__aeabi_dmul+0x24a>
  4037f4:	ea95 0f0c 	teq	r5, ip
  4037f8:	d106      	bne.n	403808 <__aeabi_ddiv+0x1b0>
  4037fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4037fe:	f43f aefd 	beq.w	4035fc <__aeabi_dmul+0x1f8>
  403802:	4610      	mov	r0, r2
  403804:	4619      	mov	r1, r3
  403806:	e722      	b.n	40364e <__aeabi_dmul+0x24a>
  403808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40380c:	bf18      	it	ne
  40380e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403812:	f47f aec5 	bne.w	4035a0 <__aeabi_dmul+0x19c>
  403816:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40381a:	f47f af0d 	bne.w	403638 <__aeabi_dmul+0x234>
  40381e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403822:	f47f aeeb 	bne.w	4035fc <__aeabi_dmul+0x1f8>
  403826:	e712      	b.n	40364e <__aeabi_dmul+0x24a>

00403828 <__aeabi_d2iz>:
  403828:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40382c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403830:	d215      	bcs.n	40385e <__aeabi_d2iz+0x36>
  403832:	d511      	bpl.n	403858 <__aeabi_d2iz+0x30>
  403834:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403838:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40383c:	d912      	bls.n	403864 <__aeabi_d2iz+0x3c>
  40383e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403846:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40384a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40384e:	fa23 f002 	lsr.w	r0, r3, r2
  403852:	bf18      	it	ne
  403854:	4240      	negne	r0, r0
  403856:	4770      	bx	lr
  403858:	f04f 0000 	mov.w	r0, #0
  40385c:	4770      	bx	lr
  40385e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403862:	d105      	bne.n	403870 <__aeabi_d2iz+0x48>
  403864:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403868:	bf08      	it	eq
  40386a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40386e:	4770      	bx	lr
  403870:	f04f 0000 	mov.w	r0, #0
  403874:	4770      	bx	lr
  403876:	bf00      	nop

00403878 <__aeabi_d2f>:
  403878:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40387c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403880:	bf24      	itt	cs
  403882:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403886:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40388a:	d90d      	bls.n	4038a8 <__aeabi_d2f+0x30>
  40388c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403890:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403894:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403898:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40389c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4038a0:	bf08      	it	eq
  4038a2:	f020 0001 	biceq.w	r0, r0, #1
  4038a6:	4770      	bx	lr
  4038a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4038ac:	d121      	bne.n	4038f2 <__aeabi_d2f+0x7a>
  4038ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4038b2:	bfbc      	itt	lt
  4038b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4038b8:	4770      	bxlt	lr
  4038ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4038be:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4038c2:	f1c2 0218 	rsb	r2, r2, #24
  4038c6:	f1c2 0c20 	rsb	ip, r2, #32
  4038ca:	fa10 f30c 	lsls.w	r3, r0, ip
  4038ce:	fa20 f002 	lsr.w	r0, r0, r2
  4038d2:	bf18      	it	ne
  4038d4:	f040 0001 	orrne.w	r0, r0, #1
  4038d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4038dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4038e0:	fa03 fc0c 	lsl.w	ip, r3, ip
  4038e4:	ea40 000c 	orr.w	r0, r0, ip
  4038e8:	fa23 f302 	lsr.w	r3, r3, r2
  4038ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4038f0:	e7cc      	b.n	40388c <__aeabi_d2f+0x14>
  4038f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4038f6:	d107      	bne.n	403908 <__aeabi_d2f+0x90>
  4038f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4038fc:	bf1e      	ittt	ne
  4038fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403902:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403906:	4770      	bxne	lr
  403908:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40390c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403910:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403914:	4770      	bx	lr
  403916:	bf00      	nop

00403918 <__aeabi_uldivmod>:
  403918:	b953      	cbnz	r3, 403930 <__aeabi_uldivmod+0x18>
  40391a:	b94a      	cbnz	r2, 403930 <__aeabi_uldivmod+0x18>
  40391c:	2900      	cmp	r1, #0
  40391e:	bf08      	it	eq
  403920:	2800      	cmpeq	r0, #0
  403922:	bf1c      	itt	ne
  403924:	f04f 31ff 	movne.w	r1, #4294967295
  403928:	f04f 30ff 	movne.w	r0, #4294967295
  40392c:	f000 b97a 	b.w	403c24 <__aeabi_idiv0>
  403930:	f1ad 0c08 	sub.w	ip, sp, #8
  403934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403938:	f000 f806 	bl	403948 <__udivmoddi4>
  40393c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403944:	b004      	add	sp, #16
  403946:	4770      	bx	lr

00403948 <__udivmoddi4>:
  403948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40394c:	468c      	mov	ip, r1
  40394e:	460d      	mov	r5, r1
  403950:	4604      	mov	r4, r0
  403952:	9e08      	ldr	r6, [sp, #32]
  403954:	2b00      	cmp	r3, #0
  403956:	d151      	bne.n	4039fc <__udivmoddi4+0xb4>
  403958:	428a      	cmp	r2, r1
  40395a:	4617      	mov	r7, r2
  40395c:	d96d      	bls.n	403a3a <__udivmoddi4+0xf2>
  40395e:	fab2 fe82 	clz	lr, r2
  403962:	f1be 0f00 	cmp.w	lr, #0
  403966:	d00b      	beq.n	403980 <__udivmoddi4+0x38>
  403968:	f1ce 0c20 	rsb	ip, lr, #32
  40396c:	fa01 f50e 	lsl.w	r5, r1, lr
  403970:	fa20 fc0c 	lsr.w	ip, r0, ip
  403974:	fa02 f70e 	lsl.w	r7, r2, lr
  403978:	ea4c 0c05 	orr.w	ip, ip, r5
  40397c:	fa00 f40e 	lsl.w	r4, r0, lr
  403980:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403984:	0c25      	lsrs	r5, r4, #16
  403986:	fbbc f8fa 	udiv	r8, ip, sl
  40398a:	fa1f f987 	uxth.w	r9, r7
  40398e:	fb0a cc18 	mls	ip, sl, r8, ip
  403992:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403996:	fb08 f309 	mul.w	r3, r8, r9
  40399a:	42ab      	cmp	r3, r5
  40399c:	d90a      	bls.n	4039b4 <__udivmoddi4+0x6c>
  40399e:	19ed      	adds	r5, r5, r7
  4039a0:	f108 32ff 	add.w	r2, r8, #4294967295
  4039a4:	f080 8123 	bcs.w	403bee <__udivmoddi4+0x2a6>
  4039a8:	42ab      	cmp	r3, r5
  4039aa:	f240 8120 	bls.w	403bee <__udivmoddi4+0x2a6>
  4039ae:	f1a8 0802 	sub.w	r8, r8, #2
  4039b2:	443d      	add	r5, r7
  4039b4:	1aed      	subs	r5, r5, r3
  4039b6:	b2a4      	uxth	r4, r4
  4039b8:	fbb5 f0fa 	udiv	r0, r5, sl
  4039bc:	fb0a 5510 	mls	r5, sl, r0, r5
  4039c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4039c4:	fb00 f909 	mul.w	r9, r0, r9
  4039c8:	45a1      	cmp	r9, r4
  4039ca:	d909      	bls.n	4039e0 <__udivmoddi4+0x98>
  4039cc:	19e4      	adds	r4, r4, r7
  4039ce:	f100 33ff 	add.w	r3, r0, #4294967295
  4039d2:	f080 810a 	bcs.w	403bea <__udivmoddi4+0x2a2>
  4039d6:	45a1      	cmp	r9, r4
  4039d8:	f240 8107 	bls.w	403bea <__udivmoddi4+0x2a2>
  4039dc:	3802      	subs	r0, #2
  4039de:	443c      	add	r4, r7
  4039e0:	eba4 0409 	sub.w	r4, r4, r9
  4039e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4039e8:	2100      	movs	r1, #0
  4039ea:	2e00      	cmp	r6, #0
  4039ec:	d061      	beq.n	403ab2 <__udivmoddi4+0x16a>
  4039ee:	fa24 f40e 	lsr.w	r4, r4, lr
  4039f2:	2300      	movs	r3, #0
  4039f4:	6034      	str	r4, [r6, #0]
  4039f6:	6073      	str	r3, [r6, #4]
  4039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039fc:	428b      	cmp	r3, r1
  4039fe:	d907      	bls.n	403a10 <__udivmoddi4+0xc8>
  403a00:	2e00      	cmp	r6, #0
  403a02:	d054      	beq.n	403aae <__udivmoddi4+0x166>
  403a04:	2100      	movs	r1, #0
  403a06:	e886 0021 	stmia.w	r6, {r0, r5}
  403a0a:	4608      	mov	r0, r1
  403a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a10:	fab3 f183 	clz	r1, r3
  403a14:	2900      	cmp	r1, #0
  403a16:	f040 808e 	bne.w	403b36 <__udivmoddi4+0x1ee>
  403a1a:	42ab      	cmp	r3, r5
  403a1c:	d302      	bcc.n	403a24 <__udivmoddi4+0xdc>
  403a1e:	4282      	cmp	r2, r0
  403a20:	f200 80fa 	bhi.w	403c18 <__udivmoddi4+0x2d0>
  403a24:	1a84      	subs	r4, r0, r2
  403a26:	eb65 0503 	sbc.w	r5, r5, r3
  403a2a:	2001      	movs	r0, #1
  403a2c:	46ac      	mov	ip, r5
  403a2e:	2e00      	cmp	r6, #0
  403a30:	d03f      	beq.n	403ab2 <__udivmoddi4+0x16a>
  403a32:	e886 1010 	stmia.w	r6, {r4, ip}
  403a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a3a:	b912      	cbnz	r2, 403a42 <__udivmoddi4+0xfa>
  403a3c:	2701      	movs	r7, #1
  403a3e:	fbb7 f7f2 	udiv	r7, r7, r2
  403a42:	fab7 fe87 	clz	lr, r7
  403a46:	f1be 0f00 	cmp.w	lr, #0
  403a4a:	d134      	bne.n	403ab6 <__udivmoddi4+0x16e>
  403a4c:	1beb      	subs	r3, r5, r7
  403a4e:	0c3a      	lsrs	r2, r7, #16
  403a50:	fa1f fc87 	uxth.w	ip, r7
  403a54:	2101      	movs	r1, #1
  403a56:	fbb3 f8f2 	udiv	r8, r3, r2
  403a5a:	0c25      	lsrs	r5, r4, #16
  403a5c:	fb02 3318 	mls	r3, r2, r8, r3
  403a60:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403a64:	fb0c f308 	mul.w	r3, ip, r8
  403a68:	42ab      	cmp	r3, r5
  403a6a:	d907      	bls.n	403a7c <__udivmoddi4+0x134>
  403a6c:	19ed      	adds	r5, r5, r7
  403a6e:	f108 30ff 	add.w	r0, r8, #4294967295
  403a72:	d202      	bcs.n	403a7a <__udivmoddi4+0x132>
  403a74:	42ab      	cmp	r3, r5
  403a76:	f200 80d1 	bhi.w	403c1c <__udivmoddi4+0x2d4>
  403a7a:	4680      	mov	r8, r0
  403a7c:	1aed      	subs	r5, r5, r3
  403a7e:	b2a3      	uxth	r3, r4
  403a80:	fbb5 f0f2 	udiv	r0, r5, r2
  403a84:	fb02 5510 	mls	r5, r2, r0, r5
  403a88:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403a8c:	fb0c fc00 	mul.w	ip, ip, r0
  403a90:	45a4      	cmp	ip, r4
  403a92:	d907      	bls.n	403aa4 <__udivmoddi4+0x15c>
  403a94:	19e4      	adds	r4, r4, r7
  403a96:	f100 33ff 	add.w	r3, r0, #4294967295
  403a9a:	d202      	bcs.n	403aa2 <__udivmoddi4+0x15a>
  403a9c:	45a4      	cmp	ip, r4
  403a9e:	f200 80b8 	bhi.w	403c12 <__udivmoddi4+0x2ca>
  403aa2:	4618      	mov	r0, r3
  403aa4:	eba4 040c 	sub.w	r4, r4, ip
  403aa8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403aac:	e79d      	b.n	4039ea <__udivmoddi4+0xa2>
  403aae:	4631      	mov	r1, r6
  403ab0:	4630      	mov	r0, r6
  403ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ab6:	f1ce 0420 	rsb	r4, lr, #32
  403aba:	fa05 f30e 	lsl.w	r3, r5, lr
  403abe:	fa07 f70e 	lsl.w	r7, r7, lr
  403ac2:	fa20 f804 	lsr.w	r8, r0, r4
  403ac6:	0c3a      	lsrs	r2, r7, #16
  403ac8:	fa25 f404 	lsr.w	r4, r5, r4
  403acc:	ea48 0803 	orr.w	r8, r8, r3
  403ad0:	fbb4 f1f2 	udiv	r1, r4, r2
  403ad4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403ad8:	fb02 4411 	mls	r4, r2, r1, r4
  403adc:	fa1f fc87 	uxth.w	ip, r7
  403ae0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403ae4:	fb01 f30c 	mul.w	r3, r1, ip
  403ae8:	42ab      	cmp	r3, r5
  403aea:	fa00 f40e 	lsl.w	r4, r0, lr
  403aee:	d909      	bls.n	403b04 <__udivmoddi4+0x1bc>
  403af0:	19ed      	adds	r5, r5, r7
  403af2:	f101 30ff 	add.w	r0, r1, #4294967295
  403af6:	f080 808a 	bcs.w	403c0e <__udivmoddi4+0x2c6>
  403afa:	42ab      	cmp	r3, r5
  403afc:	f240 8087 	bls.w	403c0e <__udivmoddi4+0x2c6>
  403b00:	3902      	subs	r1, #2
  403b02:	443d      	add	r5, r7
  403b04:	1aeb      	subs	r3, r5, r3
  403b06:	fa1f f588 	uxth.w	r5, r8
  403b0a:	fbb3 f0f2 	udiv	r0, r3, r2
  403b0e:	fb02 3310 	mls	r3, r2, r0, r3
  403b12:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403b16:	fb00 f30c 	mul.w	r3, r0, ip
  403b1a:	42ab      	cmp	r3, r5
  403b1c:	d907      	bls.n	403b2e <__udivmoddi4+0x1e6>
  403b1e:	19ed      	adds	r5, r5, r7
  403b20:	f100 38ff 	add.w	r8, r0, #4294967295
  403b24:	d26f      	bcs.n	403c06 <__udivmoddi4+0x2be>
  403b26:	42ab      	cmp	r3, r5
  403b28:	d96d      	bls.n	403c06 <__udivmoddi4+0x2be>
  403b2a:	3802      	subs	r0, #2
  403b2c:	443d      	add	r5, r7
  403b2e:	1aeb      	subs	r3, r5, r3
  403b30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403b34:	e78f      	b.n	403a56 <__udivmoddi4+0x10e>
  403b36:	f1c1 0720 	rsb	r7, r1, #32
  403b3a:	fa22 f807 	lsr.w	r8, r2, r7
  403b3e:	408b      	lsls	r3, r1
  403b40:	fa05 f401 	lsl.w	r4, r5, r1
  403b44:	ea48 0303 	orr.w	r3, r8, r3
  403b48:	fa20 fe07 	lsr.w	lr, r0, r7
  403b4c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403b50:	40fd      	lsrs	r5, r7
  403b52:	ea4e 0e04 	orr.w	lr, lr, r4
  403b56:	fbb5 f9fc 	udiv	r9, r5, ip
  403b5a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403b5e:	fb0c 5519 	mls	r5, ip, r9, r5
  403b62:	fa1f f883 	uxth.w	r8, r3
  403b66:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403b6a:	fb09 f408 	mul.w	r4, r9, r8
  403b6e:	42ac      	cmp	r4, r5
  403b70:	fa02 f201 	lsl.w	r2, r2, r1
  403b74:	fa00 fa01 	lsl.w	sl, r0, r1
  403b78:	d908      	bls.n	403b8c <__udivmoddi4+0x244>
  403b7a:	18ed      	adds	r5, r5, r3
  403b7c:	f109 30ff 	add.w	r0, r9, #4294967295
  403b80:	d243      	bcs.n	403c0a <__udivmoddi4+0x2c2>
  403b82:	42ac      	cmp	r4, r5
  403b84:	d941      	bls.n	403c0a <__udivmoddi4+0x2c2>
  403b86:	f1a9 0902 	sub.w	r9, r9, #2
  403b8a:	441d      	add	r5, r3
  403b8c:	1b2d      	subs	r5, r5, r4
  403b8e:	fa1f fe8e 	uxth.w	lr, lr
  403b92:	fbb5 f0fc 	udiv	r0, r5, ip
  403b96:	fb0c 5510 	mls	r5, ip, r0, r5
  403b9a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403b9e:	fb00 f808 	mul.w	r8, r0, r8
  403ba2:	45a0      	cmp	r8, r4
  403ba4:	d907      	bls.n	403bb6 <__udivmoddi4+0x26e>
  403ba6:	18e4      	adds	r4, r4, r3
  403ba8:	f100 35ff 	add.w	r5, r0, #4294967295
  403bac:	d229      	bcs.n	403c02 <__udivmoddi4+0x2ba>
  403bae:	45a0      	cmp	r8, r4
  403bb0:	d927      	bls.n	403c02 <__udivmoddi4+0x2ba>
  403bb2:	3802      	subs	r0, #2
  403bb4:	441c      	add	r4, r3
  403bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403bba:	eba4 0408 	sub.w	r4, r4, r8
  403bbe:	fba0 8902 	umull	r8, r9, r0, r2
  403bc2:	454c      	cmp	r4, r9
  403bc4:	46c6      	mov	lr, r8
  403bc6:	464d      	mov	r5, r9
  403bc8:	d315      	bcc.n	403bf6 <__udivmoddi4+0x2ae>
  403bca:	d012      	beq.n	403bf2 <__udivmoddi4+0x2aa>
  403bcc:	b156      	cbz	r6, 403be4 <__udivmoddi4+0x29c>
  403bce:	ebba 030e 	subs.w	r3, sl, lr
  403bd2:	eb64 0405 	sbc.w	r4, r4, r5
  403bd6:	fa04 f707 	lsl.w	r7, r4, r7
  403bda:	40cb      	lsrs	r3, r1
  403bdc:	431f      	orrs	r7, r3
  403bde:	40cc      	lsrs	r4, r1
  403be0:	6037      	str	r7, [r6, #0]
  403be2:	6074      	str	r4, [r6, #4]
  403be4:	2100      	movs	r1, #0
  403be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bea:	4618      	mov	r0, r3
  403bec:	e6f8      	b.n	4039e0 <__udivmoddi4+0x98>
  403bee:	4690      	mov	r8, r2
  403bf0:	e6e0      	b.n	4039b4 <__udivmoddi4+0x6c>
  403bf2:	45c2      	cmp	sl, r8
  403bf4:	d2ea      	bcs.n	403bcc <__udivmoddi4+0x284>
  403bf6:	ebb8 0e02 	subs.w	lr, r8, r2
  403bfa:	eb69 0503 	sbc.w	r5, r9, r3
  403bfe:	3801      	subs	r0, #1
  403c00:	e7e4      	b.n	403bcc <__udivmoddi4+0x284>
  403c02:	4628      	mov	r0, r5
  403c04:	e7d7      	b.n	403bb6 <__udivmoddi4+0x26e>
  403c06:	4640      	mov	r0, r8
  403c08:	e791      	b.n	403b2e <__udivmoddi4+0x1e6>
  403c0a:	4681      	mov	r9, r0
  403c0c:	e7be      	b.n	403b8c <__udivmoddi4+0x244>
  403c0e:	4601      	mov	r1, r0
  403c10:	e778      	b.n	403b04 <__udivmoddi4+0x1bc>
  403c12:	3802      	subs	r0, #2
  403c14:	443c      	add	r4, r7
  403c16:	e745      	b.n	403aa4 <__udivmoddi4+0x15c>
  403c18:	4608      	mov	r0, r1
  403c1a:	e708      	b.n	403a2e <__udivmoddi4+0xe6>
  403c1c:	f1a8 0802 	sub.w	r8, r8, #2
  403c20:	443d      	add	r5, r7
  403c22:	e72b      	b.n	403a7c <__udivmoddi4+0x134>

00403c24 <__aeabi_idiv0>:
  403c24:	4770      	bx	lr
  403c26:	bf00      	nop

00403c28 <__libc_init_array>:
  403c28:	b570      	push	{r4, r5, r6, lr}
  403c2a:	4e0f      	ldr	r6, [pc, #60]	; (403c68 <__libc_init_array+0x40>)
  403c2c:	4d0f      	ldr	r5, [pc, #60]	; (403c6c <__libc_init_array+0x44>)
  403c2e:	1b76      	subs	r6, r6, r5
  403c30:	10b6      	asrs	r6, r6, #2
  403c32:	bf18      	it	ne
  403c34:	2400      	movne	r4, #0
  403c36:	d005      	beq.n	403c44 <__libc_init_array+0x1c>
  403c38:	3401      	adds	r4, #1
  403c3a:	f855 3b04 	ldr.w	r3, [r5], #4
  403c3e:	4798      	blx	r3
  403c40:	42a6      	cmp	r6, r4
  403c42:	d1f9      	bne.n	403c38 <__libc_init_array+0x10>
  403c44:	4e0a      	ldr	r6, [pc, #40]	; (403c70 <__libc_init_array+0x48>)
  403c46:	4d0b      	ldr	r5, [pc, #44]	; (403c74 <__libc_init_array+0x4c>)
  403c48:	1b76      	subs	r6, r6, r5
  403c4a:	f000 fdd9 	bl	404800 <_init>
  403c4e:	10b6      	asrs	r6, r6, #2
  403c50:	bf18      	it	ne
  403c52:	2400      	movne	r4, #0
  403c54:	d006      	beq.n	403c64 <__libc_init_array+0x3c>
  403c56:	3401      	adds	r4, #1
  403c58:	f855 3b04 	ldr.w	r3, [r5], #4
  403c5c:	4798      	blx	r3
  403c5e:	42a6      	cmp	r6, r4
  403c60:	d1f9      	bne.n	403c56 <__libc_init_array+0x2e>
  403c62:	bd70      	pop	{r4, r5, r6, pc}
  403c64:	bd70      	pop	{r4, r5, r6, pc}
  403c66:	bf00      	nop
  403c68:	0040480c 	.word	0x0040480c
  403c6c:	0040480c 	.word	0x0040480c
  403c70:	00404814 	.word	0x00404814
  403c74:	0040480c 	.word	0x0040480c

00403c78 <register_fini>:
  403c78:	4b02      	ldr	r3, [pc, #8]	; (403c84 <register_fini+0xc>)
  403c7a:	b113      	cbz	r3, 403c82 <register_fini+0xa>
  403c7c:	4802      	ldr	r0, [pc, #8]	; (403c88 <register_fini+0x10>)
  403c7e:	f000 b805 	b.w	403c8c <atexit>
  403c82:	4770      	bx	lr
  403c84:	00000000 	.word	0x00000000
  403c88:	00403c99 	.word	0x00403c99

00403c8c <atexit>:
  403c8c:	2300      	movs	r3, #0
  403c8e:	4601      	mov	r1, r0
  403c90:	461a      	mov	r2, r3
  403c92:	4618      	mov	r0, r3
  403c94:	f000 b81e 	b.w	403cd4 <__register_exitproc>

00403c98 <__libc_fini_array>:
  403c98:	b538      	push	{r3, r4, r5, lr}
  403c9a:	4c0a      	ldr	r4, [pc, #40]	; (403cc4 <__libc_fini_array+0x2c>)
  403c9c:	4d0a      	ldr	r5, [pc, #40]	; (403cc8 <__libc_fini_array+0x30>)
  403c9e:	1b64      	subs	r4, r4, r5
  403ca0:	10a4      	asrs	r4, r4, #2
  403ca2:	d00a      	beq.n	403cba <__libc_fini_array+0x22>
  403ca4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403ca8:	3b01      	subs	r3, #1
  403caa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403cae:	3c01      	subs	r4, #1
  403cb0:	f855 3904 	ldr.w	r3, [r5], #-4
  403cb4:	4798      	blx	r3
  403cb6:	2c00      	cmp	r4, #0
  403cb8:	d1f9      	bne.n	403cae <__libc_fini_array+0x16>
  403cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403cbe:	f000 bda9 	b.w	404814 <_fini>
  403cc2:	bf00      	nop
  403cc4:	00404824 	.word	0x00404824
  403cc8:	00404820 	.word	0x00404820

00403ccc <__retarget_lock_acquire_recursive>:
  403ccc:	4770      	bx	lr
  403cce:	bf00      	nop

00403cd0 <__retarget_lock_release_recursive>:
  403cd0:	4770      	bx	lr
  403cd2:	bf00      	nop

00403cd4 <__register_exitproc>:
  403cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403cd8:	4d2c      	ldr	r5, [pc, #176]	; (403d8c <__register_exitproc+0xb8>)
  403cda:	4606      	mov	r6, r0
  403cdc:	6828      	ldr	r0, [r5, #0]
  403cde:	4698      	mov	r8, r3
  403ce0:	460f      	mov	r7, r1
  403ce2:	4691      	mov	r9, r2
  403ce4:	f7ff fff2 	bl	403ccc <__retarget_lock_acquire_recursive>
  403ce8:	4b29      	ldr	r3, [pc, #164]	; (403d90 <__register_exitproc+0xbc>)
  403cea:	681c      	ldr	r4, [r3, #0]
  403cec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403cf0:	2b00      	cmp	r3, #0
  403cf2:	d03e      	beq.n	403d72 <__register_exitproc+0x9e>
  403cf4:	685a      	ldr	r2, [r3, #4]
  403cf6:	2a1f      	cmp	r2, #31
  403cf8:	dc1c      	bgt.n	403d34 <__register_exitproc+0x60>
  403cfa:	f102 0e01 	add.w	lr, r2, #1
  403cfe:	b176      	cbz	r6, 403d1e <__register_exitproc+0x4a>
  403d00:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403d04:	2401      	movs	r4, #1
  403d06:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403d0a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403d0e:	4094      	lsls	r4, r2
  403d10:	4320      	orrs	r0, r4
  403d12:	2e02      	cmp	r6, #2
  403d14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403d18:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403d1c:	d023      	beq.n	403d66 <__register_exitproc+0x92>
  403d1e:	3202      	adds	r2, #2
  403d20:	f8c3 e004 	str.w	lr, [r3, #4]
  403d24:	6828      	ldr	r0, [r5, #0]
  403d26:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403d2a:	f7ff ffd1 	bl	403cd0 <__retarget_lock_release_recursive>
  403d2e:	2000      	movs	r0, #0
  403d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d34:	4b17      	ldr	r3, [pc, #92]	; (403d94 <__register_exitproc+0xc0>)
  403d36:	b30b      	cbz	r3, 403d7c <__register_exitproc+0xa8>
  403d38:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403d3c:	f3af 8000 	nop.w
  403d40:	4603      	mov	r3, r0
  403d42:	b1d8      	cbz	r0, 403d7c <__register_exitproc+0xa8>
  403d44:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403d48:	6002      	str	r2, [r0, #0]
  403d4a:	2100      	movs	r1, #0
  403d4c:	6041      	str	r1, [r0, #4]
  403d4e:	460a      	mov	r2, r1
  403d50:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403d54:	f04f 0e01 	mov.w	lr, #1
  403d58:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403d5c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403d60:	2e00      	cmp	r6, #0
  403d62:	d0dc      	beq.n	403d1e <__register_exitproc+0x4a>
  403d64:	e7cc      	b.n	403d00 <__register_exitproc+0x2c>
  403d66:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403d6a:	430c      	orrs	r4, r1
  403d6c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403d70:	e7d5      	b.n	403d1e <__register_exitproc+0x4a>
  403d72:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403d76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403d7a:	e7bb      	b.n	403cf4 <__register_exitproc+0x20>
  403d7c:	6828      	ldr	r0, [r5, #0]
  403d7e:	f7ff ffa7 	bl	403cd0 <__retarget_lock_release_recursive>
  403d82:	f04f 30ff 	mov.w	r0, #4294967295
  403d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d8a:	bf00      	nop
  403d8c:	20400450 	.word	0x20400450
  403d90:	004047fc 	.word	0x004047fc
  403d94:	00000000 	.word	0x00000000

00403d98 <sysfont_glyphs>:
	...
  403db8:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  403dc8:	00000030 00000000 00000000 006c006c     0...........l.l.
  403dd8:	006c006c 00000000 00000000 00000000     l.l.............
	...
  403df0:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  403e00:	00000028 00000000 00000000 003c0010     (.............<.
  403e10:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  403e28:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  403e38:	00000088 00000000 00000000 00900060     ............`...
  403e48:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  403e60:	00100010 00000010 00000000 00000000     ................
	...
  403e7c:	00100008 00200020 00200020 00200020     .... . . . . . .
  403e8c:	00080010 00000000 00000000 00100020     ............ ...
  403e9c:	00080008 00080008 00080008 00200010     .............. .
  403eac:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  403ed4:	00100010 00fe0010 00100010 00000010     ................
	...
  403efc:	00300010 00000020 00000000 00000000     ..0. ...........
  403f0c:	00000000 007c0000 00000000 00000000     ......|.........
	...
  403f30:	00300000 00000030 00000000 00000000     ..0.0...........
  403f40:	00080000 00100008 00200010 00400020     .......... . .@.
  403f50:	00000040 00000000 00000000 00780000     @.............x.
  403f60:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  403f78:	00100000 00500030 00100010 00100010     ....0.P.........
  403f88:	0000007c 00000000 00000000 00700000     |.............p.
  403f98:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  403fb0:	00700000 00080088 00080030 00880008     ..p.....0.......
  403fc0:	00000070 00000000 00000000 00080000     p...............
  403fd0:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  403fe8:	00780000 00800080 000800f0 00080008     ..x.............
  403ff8:	000000f0 00000000 00000000 00300000     ..............0.
  404008:	00800040 008800f0 00880088 00000070     @...........p...
	...
  404020:	00f80000 00100008 00200010 00400020     .......... . .@.
  404030:	00000040 00000000 00000000 00700000     @.............p.
  404040:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  404058:	00700000 00880088 00780088 00100008     ..p.......x.....
  404068:	00000060 00000000 00000000 00000000     `...............
  404078:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  404094:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  4040a4:	00000040 00000000 00000000 00100008     @...............
  4040b4:	00400020 00100020 00000008 00000000      .@. ...........
	...
  4040d0:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  4040e8:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  404100:	00300000 00080048 00200010 00000000     ..0.H..... .....
  404110:	00000020 00000000 00000000 00000000      ...............
  404120:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  404138:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  404148:	00000044 00000000 00000000 00f80000     D...............
  404158:	00840084 008400f8 00840084 000000f8     ................
	...
  404170:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  404180:	0000003c 00000000 00000000 00f00000     <...............
  404190:	00840088 00840084 00880084 000000f0     ................
	...
  4041a8:	00f80000 00800080 008000f0 00800080     ................
  4041b8:	000000f8 00000000 00000000 00f80000     ................
  4041c8:	00800080 008000f8 00800080 00000080     ................
	...
  4041e0:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  4041f0:	00000038 00000000 00000000 00880000     8...............
  404200:	00880088 008800f8 00880088 00000088     ................
	...
  404218:	00f80000 00200020 00200020 00200020     .... . . . . . .
  404228:	000000f8 00000000 00000000 00f80000     ................
  404238:	00080008 00080008 00080008 000000f0     ................
	...
  404250:	00840000 00900088 00d000a0 00840088     ................
  404260:	00000084 00000000 00000000 00800000     ................
  404270:	00800080 00800080 00800080 000000fc     ................
	...
  404288:	00840000 00cc00cc 00b400b4 00840084     ................
  404298:	00000084 00000000 00000000 00840000     ................
  4042a8:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  4042c0:	00780000 00840084 00840084 00840084     ..x.............
  4042d0:	00000078 00000000 00000000 00f80000     x...............
  4042e0:	00840084 00f80084 00800080 00000080     ................
	...
  4042f8:	00780000 00840084 00840084 00840084     ..x.............
  404308:	00200078 00000018 00000000 00f80000     x. .............
  404318:	00840084 00f80084 00840088 00000084     ................
	...
  404330:	007c0000 00800080 00180060 00040004     ..|.....`.......
  404340:	000000f8 00000000 00000000 00f80000     ................
  404350:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  404368:	00840000 00840084 00840084 00840084     ................
  404378:	00000078 00000000 00000000 00840000     x...............
  404388:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4043a0:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4043b0:	00000050 00000000 00000000 00880000     P...............
  4043c0:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  4043d8:	00880000 00880088 00500050 00200020     ........P.P. . .
  4043e8:	00000020 00000000 00000000 00fc0000      ...............
  4043f8:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  404410:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  404420:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  404430:	00200020 00100020 00100010 00080008      . . ...........
	...
  404448:	00080038 00080008 00080008 00080008     8...............
  404458:	00080008 00000038 00000000 00280010     ....8.........(.
  404468:	00000044 00000000 00000000 00000000     D...............
	...
  404490:	00000038 00000000 00000000 00200000     8............. .
  4044a0:	00000010 00000000 00000000 00000000     ................
	...
  4044bc:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  4044d4:	00800080 00f80080 00840084 00840084     ................
  4044e4:	000000f8 00000000 00000000 00000000     ................
  4044f4:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  40450c:	00040004 007c0004 00840084 008c0084     ......|.........
  40451c:	00000074 00000000 00000000 00000000     t...............
  40452c:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  404544:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  404554:	000000fc 00000000 00000000 00000000     ................
  404564:	007c0000 00840084 00840084 0004007c     ..|.........|...
  404574:	00000078 00000000 00800080 00b80080     x...............
  404584:	008400c4 00840084 00000084 00000000     ................
  404594:	00000000 00100000 00700000 00100010     ..........p.....
  4045a4:	00100010 0000007c 00000000 00000000     ....|...........
  4045b4:	00080000 00780000 00080008 00080008     ......x.........
  4045c4:	00080008 00700008 00000000 00800080     ......p.........
  4045d4:	00880080 00a00090 008800d0 00000088     ................
	...
  4045ec:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  4045fc:	000000f8 00000000 00000000 00000000     ................
  40460c:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  404628:	00b80000 008400c4 00840084 00000084     ................
	...
  404644:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  404660:	00b80000 008400c4 00840084 008000f8     ................
  404670:	00000080 00000000 00000000 007c0000     ..............|.
  404680:	00840084 00840084 0004007c 00000004     ........|.......
	...
  404698:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  4046b4:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  4046d0:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  4046ec:	00880000 00880088 00880088 0000007c     ............|...
	...
  404708:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  404724:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  404740:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  40475c:	00840000 00480084 00300048 00200010     ......H.H.0... .
  40476c:	00000040 00000000 00000000 00f80000     @...............
  40477c:	00100008 00400020 000000f8 00000000     .... .@.........
  40478c:	00000000 00200010 00100020 00200020     ...... . ... . .
  40479c:	00200010 00100020 00000000 00000000     .. . ...........
  4047ac:	00100010 00100010 00000000 00100010     ................
  4047bc:	00100010 00000000 00000000 00100020     ............ ...
  4047cc:	00200010 00100010 00100020 00200010     .. ..... ..... .
  4047dc:	00000000 20202020 20202020 20202020     ....            
  4047ec:	00000020 4f525245 00000052 0000002e      ...ERROR.......

004047fc <_global_impure_ptr>:
  4047fc:	20400028                                (.@ 

00404800 <_init>:
  404800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404802:	bf00      	nop
  404804:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404806:	bc08      	pop	{r3}
  404808:	469e      	mov	lr, r3
  40480a:	4770      	bx	lr

0040480c <__init_array_start>:
  40480c:	00403c79 	.word	0x00403c79

00404810 <__frame_dummy_init_array_entry>:
  404810:	00400165                                e.@.

00404814 <_fini>:
  404814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404816:	bf00      	nop
  404818:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40481a:	bc08      	pop	{r3}
  40481c:	469e      	mov	lr, r3
  40481e:	4770      	bx	lr

00404820 <__fini_array_start>:
  404820:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 3d98 0040 0e0a 7d20               .....=@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <freq>:
20400020:	21ac 0000 0000 0000                         .!......

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	06fc 2040                                   ..@ 
